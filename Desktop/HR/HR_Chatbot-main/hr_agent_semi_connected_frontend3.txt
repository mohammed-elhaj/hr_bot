<summary>

<header>
RepopackPy Output File
This file was generated by RepopackPy on: 2025-01-08T11:42:35.354467
</header>

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository structure
3. Repository files, each consisting of:
    - File path as an attribute
    - Full contents of the file
</file_format>

<usage_guidelines>
1. This file should be treated as read-only. Any changes should be made to the
    original repository files, not this packed version.
2. When processing this file, use the file path attributes to distinguish
    between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
    the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation.
</notes>

<additional_info>
For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py
</additional_info>

</summary>

<repository_structure>
README.md
eslint.config.js
index.html
package.json
postcss.config.js
src\App.css
src\App.tsx
src\assets\background.webp
src\assets\أخصائية مشتريات وعقود مرام الحميد .png
src\assets\أخصائية مشتريات وعقود مرام الحميد_.png
src\assets\حاسبة المشتريات
src\assets\نماذج التأهيل مستوى 1-2-3 (1).xlsx
src\assets\نماذج التأهيل مستوى 1-2-3.xlsx
src\components\chat\DocumentMessage.tsx
src\components\chat\VacationMessage.tsx
src\components\common\ContentSkeleton.tsx
src\components\common\ErrorBoundary.tsx
src\components\common\ErrorDisplay.tsx
src\components\common\Layout.tsx
src\components\common\LoadingSpinner.tsx
src\components\common\PageLoader.tsx
src\components\common\ProtectedRoute.tsx
src\components\documents\DocumentList.tsx
src\components\documents\DocumentUpload.tsx
src\components\landing\FeatureCard.tsx
src\components\landing\Features.tsx
src\components\landing\Hero.tsx
src\components\vacation\VacationBalance.tsx
src\components\vacation\VacationRequest.tsx
src\constants\index.ts
src\context\AuthContext.tsx
src\context\ChatContext.tsx
src\context\DocumentContext.tsx
src\context\VacationContext.tsx
src\hooks\useAuth.ts
src\hooks\useChat.ts
src\hooks\useDocuments.ts
src\hooks\useVacation.ts
src\index.css
src\main.tsx
src\pages\ChatPage.tsx
src\pages\DocumentPage.tsx
src\pages\LandingPage.tsx
src\pages\LoginPage.tsx
src\pages\VacationPage.tsx
src\services\api.ts
src\services\auth.ts
src\services\chat.ts
src\services\documents.ts
src\services\vacation.ts
src\types\api.ts
src\types\chat.ts
src\types\documents.ts
src\types\vacation.ts
src\utils\data.ts
src\utils\errors.ts
src\utils\storage.ts
src\utils\validation.ts
src\vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</repository_structure>

<repository_files>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.9",
    "framer-motion": "^11.15.0",
    "lucide-react": "^0.468.0",
    "postcss": "^8.4.49",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.1",
    "tailwindcss": "^3.4.16"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/axios": "^0.9.36",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@types/react-router-dom": "^5.3.3",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.15.0",
    "vite": "^6.0.1"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```
</file>

<file path="tailwind.config.js">
// tailwind.config.js
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
        },
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  // "compilerOptions": {
  //   "target": "esnext",
  //   "module": "esnext",
  //   "jsx": "react-jsx",
  //   "strict": true,
  //   "esModuleInterop": true,
  //   "skipLibCheck": true,
  //   "moduleResolution": "node",
  //   "allowSyntheticDefaultImports": true
  // }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  
})
</file>

<file path="src\App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src\App.tsx">
// src/App.tsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import { ChatProvider } from './context/ChatContext';
import { VacationProvider } from './context/VacationContext';
import { DocumentProvider } from './context/DocumentContext';
import LandingPage from './pages/LandingPage';
import LoginPage from './pages/LoginPage';
import ChatPage from './pages/ChatPage';
import ProtectedRoute from './components/common/ProtectedRoute';
import ErrorBoundary from './components/common/ErrorBoundary';
import DocumentPage from './pages/DocumentPage';
import VacationPage from './pages/VacationPage';

const App = () => {
  return (
    <Router>
      <ErrorBoundary>
        <AuthProvider>
          <ChatProvider>
            <VacationProvider>
              <DocumentProvider>
                <Routes>
                  <Route path="/" element={<LandingPage />} />
                  <Route path="/login" element={<LoginPage />} />
                  <Route path="/documents" element={<DocumentPage />} />
                  <Route path="/vacation" element={<VacationPage />} />
                  <Route
                    path="/chat"
                    element={
                      <ProtectedRoute>
                        <ErrorBoundary>
                          <ChatPage />
                        </ErrorBoundary>
                      </ProtectedRoute>
                    }
                  />
                </Routes>
              </DocumentProvider>
            </VacationProvider>
          </ChatProvider>
        </AuthProvider>
      </ErrorBoundary>
    </Router>
  );
};

export default App;
</file>

<file path="src\index.css">
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gray-50 text-gray-900;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-lg font-medium transition-colors;
  }
  
  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-700;
  }
}
</file>

<file path="src\main.tsx">
// src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

// Set the HTML dir attribute to RTL
document.documentElement.dir = 'rtl'
document.documentElement.lang = 'ar'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
</file>

<file path="src\vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="src\components\chat\DocumentMessage.tsx">
// src/components/chat/DocumentMessage.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { FileText, Download, Eye } from 'lucide-react';
import { DocumentMessage } from '../../types/chat';
import { formatDate } from '../../utils/data';

interface DocumentChatMessageProps {
  message: DocumentMessage;
  onPreview?: (documentId: string) => void;
  onDownload?: (documentId: string) => void;
}

export const DocumentChatMessage: React.FC<DocumentChatMessageProps> = ({
  message,
  onPreview,
  onDownload
}) => {
  const { document } = message.metadata;
  const fileSize = (document.size / 1024 / 1024).toFixed(2);

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden max-w-sm"
    >
      <div className="p-4">
        <div className="flex items-start gap-3">
          <div className="p-2 bg-primary-50 rounded-lg">
            <FileText className="w-6 h-6 text-primary-600" />
          </div>
          <div className="flex-1 min-w-0">
            <p className="font-medium text-gray-900 truncate">{document.title}</p>
            <p className="text-sm text-gray-500">
              {fileSize} MB · {document.fileType.toUpperCase()}
            </p>
          </div>
        </div>
        
        <div className="mt-4 flex items-center justify-between">
          <span className="text-xs text-gray-500">
            {formatDate(document.uploadedAt)}
          </span>
          <div className="flex gap-2">
            {document.fileType === 'pdf' && (
              <button
                onClick={() => onPreview?.(document.id)}
                className="p-1 text-gray-400 hover:text-primary-600 transition-colors"
                title="معاينة"
              >
                <Eye className="w-5 h-5" />
              </button>
            )}
            <button
              onClick={() => onDownload?.(document.id)}
              className="p-1 text-gray-400 hover:text-primary-600 transition-colors"
              title="تحميل"
            >
              <Download className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default DocumentChatMessage;
</file>

<file path="src\components\chat\VacationMessage.tsx">
// src/components/chat/VacationMessage.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { Calendar, Clock, CheckCircle, XCircle } from 'lucide-react';
import { VacationRequestMessage, VacationBalanceMessage, VacationStatusMessage } from '../../types/chat';
import { formatDate } from '../../utils/data';

interface VacationMessageProps {
  message: VacationRequestMessage | VacationBalanceMessage | VacationStatusMessage;
  onAction?: (action: string) => void;
}

export const VacationMessage: React.FC<VacationMessageProps> = ({ message, onAction }) => {
  switch (message.type) {
    case 'vacation_balance':
      return (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-lg shadow-sm p-4 max-w-sm"
        >
          <div className="text-lg font-semibold mb-2">رصيد الإجازات</div>
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-gray-600">الرصيد السنوي:</span>
              <span className="font-medium">{message.metadata.balance.annual_balance} يوم</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">المستخدم:</span>
              <span className="font-medium">{message.metadata.balance.used_days} يوم</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">المتبقي:</span>
              <span className="font-medium text-primary-600">
                {message.metadata.balance.remaining_balance} يوم
              </span>
            </div>
          </div>
          <button
            onClick={() => onAction?.('request_vacation')}
            className="mt-4 w-full py-2 px-4 bg-primary-50 text-primary-600 rounded-lg hover:bg-primary-100 transition-colors"
          >
            تقديم طلب إجازة
          </button>
        </motion.div>
      );

    case 'vacation_request':
      const request = message.metadata.request;
      return (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-lg shadow-sm p-4 max-w-sm"
        >
          <div className="text-lg font-semibold mb-2">طلب إجازة</div>
          <div className="space-y-2">
            <div className="flex items-center gap-2 text-gray-600">
              <Calendar className="w-4 h-4" />
              <span>
                {formatDate(request.start_date)} - {formatDate(request.end_date)}
              </span>
            </div>
            <div className="flex items-center gap-2 text-gray-600">
              <Clock className="w-4 h-4" />
              <span>نوع الإجازة: {request.request_type}</span>
            </div>
          </div>
          <div className="mt-4 flex gap-2">
            <button
              onClick={() => onAction?.('confirm_request')}
              className="flex-1 py-2 px-4 bg-primary-50 text-primary-600 rounded-lg hover:bg-primary-100 transition-colors"
            >
              تأكيد
            </button>
            <button
              onClick={() => onAction?.('cancel_request')}
              className="flex-1 py-2 px-4 bg-gray-50 text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
            >
              إلغاء
            </button>
          </div>
        </motion.div>
      );

    case 'vacation_status':
      return (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className={`rounded-lg p-4 ${
            message.metadata.status === 'approved' 
              ? 'bg-green-50 text-green-700'
              : 'bg-red-50 text-red-700'
          }`}
        >
          <div className="flex items-center gap-2">
            {message.metadata.status === 'approved' ? (
              <CheckCircle className="w-5 h-5" />
            ) : (
              <XCircle className="w-5 h-5" />
            )}
            <span>{message.content}</span>
          </div>
        </motion.div>
      );

    default:
      return null;
  }
};

export default VacationMessage;
</file>

<file path="src\components\common\ContentSkeleton.tsx">
// src/components/common/ContentSkeleton.tsx
import React from 'react';
import { motion } from 'framer-motion';

interface SkeletonProps {
  className?: string;
}

const Skeleton: React.FC<SkeletonProps> = ({ className = '' }) => (
  <motion.div
    initial={{ opacity: 0.5 }}
    animate={{ opacity: 1 }}
    transition={{
      repeat: Infinity,
      repeatType: "reverse",
      duration: 1
    }}
    className={`bg-gray-200 rounded ${className}`}
  />
);

interface ContentSkeletonProps {
  type?: 'message' | 'card' | 'list';
  count?: number;
}

export const ContentSkeleton: React.FC<ContentSkeletonProps> = ({ 
  type = 'message',
  count = 1 
}) => {
  const renderMessageSkeleton = () => (
    <div className="flex gap-3 w-full">
      <Skeleton className="w-8 h-8 rounded-full flex-shrink-0" />
      <div className="flex-1 space-y-2">
        <Skeleton className="h-4 w-3/4" />
        <Skeleton className="h-4 w-1/2" />
      </div>
    </div>
  );

  const renderCardSkeleton = () => (
    <div className="p-4 border rounded-lg space-y-4">
      <Skeleton className="h-6 w-3/4" />
      <div className="space-y-2">
        <Skeleton className="h-4 w-full" />
        <Skeleton className="h-4 w-5/6" />
        <Skeleton className="h-4 w-4/6" />
      </div>
    </div>
  );

  const renderListSkeleton = () => (
    <div className="space-y-2">
      <Skeleton className="h-4 w-full" />
      <Skeleton className="h-4 w-5/6" />
      <Skeleton className="h-4 w-4/6" />
    </div>
  );

  const renderSkeleton = () => {
    switch (type) {
      case 'card':
        return renderCardSkeleton();
      case 'list':
        return renderListSkeleton();
      default:
        return renderMessageSkeleton();
    }
  };

  return (
    <div className="space-y-4">
      {Array.from({ length: count }).map((_, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1 }}
        >
          {renderSkeleton()}
        </motion.div>
      ))}
    </div>
  );
};

export default ContentSkeleton;
</file>

<file path="src\components\common\ErrorBoundary.tsx">
// src/components/common/ErrorBoundary.tsx
import React, { Component, ErrorInfo } from 'react';
import ErrorDisplay from './ErrorDisplay';

interface Props {
  children: React.ReactNode;
  fallback?: React.ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null
    };
  }

  static getDerivedStateFromError(error: Error): State {
    return {
      hasError: true,
      error
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
    this.props.onError?.(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return <ErrorDisplay error={this.state.error} onReset={() => this.setState({ hasError: false, error: null })} />;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
</file>

<file path="src\components\common\ErrorDisplay.tsx">
// src/components/common/ErrorDisplay.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { AlertCircle, RefreshCcw, Home } from 'lucide-react';
import { useNavigate, useLocation } from 'react-router-dom';

interface ErrorDisplayProps {
  error: Error | null;
  onReset?: () => void;
  fullPage?: boolean;
}

const ErrorDisplay: React.FC<ErrorDisplayProps> = ({ error, onReset, fullPage = false }) => {
  const navigate = useNavigate();
  const location = useLocation();

  const handleReset = () => {
    onReset?.();
  };

  const getErrorMessage = (error: Error | null): string => {
    if (!error) return 'حدث خطأ غير متوقع';

    if (error.message.includes('Network Error')) {
      return 'تعذر الاتصال بالخادم. يرجى التحقق من اتصال الإنترنت الخاص بك.';
    }

    if (error.message.includes('401')) {
      return 'انتهت صلاحية الجلسة. يرجى تسجيل الدخول مرة أخرى.';
    }

    return error.message || 'حدث خطأ غير متوقع';
  };

  const content = (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`bg-white rounded-lg shadow-lg p-6 ${fullPage ? 'max-w-lg mx-auto' : ''}`}
    >
      <div className="flex items-center justify-center w-12 h-12 mx-auto mb-4 bg-red-100 rounded-full">
        <AlertCircle className="w-6 h-6 text-red-600" />
      </div>

      <h3 className="mb-2 text-lg font-semibold text-center text-gray-900">
        عذراً! حدث خطأ
      </h3>

      <p className="text-center text-gray-600 mb-6">
        {getErrorMessage(error)}
      </p>

      <div className="flex flex-col sm:flex-row gap-3 justify-center">
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={handleReset}
          className="inline-flex items-center justify-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors gap-2"
        >
          <RefreshCcw className="w-4 h-4" />
          إعادة المحاولة
        </motion.button>

        {/* Only show "Home" button if within Router context */}
        {location && (
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => navigate('/')}
            className="inline-flex items-center justify-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors gap-2"
          >
            <Home className="w-4 h-4" />
            العودة للرئيسية
          </motion.button>
        )}
      </div>
    </motion.div>
  );

  if (fullPage) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">
        {content}
      </div>
    );
  }

  return content;
};

export default ErrorDisplay;
</file>

<file path="src\components\common\Layout.tsx">
import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Menu, X, ChevronDown } from 'lucide-react';

const Layout = ({ children }: { children: React.ReactNode }) => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const location = useLocation();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <motion.nav
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        className={`fixed w-full z-50 transition-all duration-300 ${
          isScrolled ? 'bg-white/80 backdrop-blur-md shadow-lg' : 'bg-transparent'
        }`}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <motion.div
              className="flex-shrink-0"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Link to="/" className="flex items-center space-x-2 space-x-reverse">
                <div className="w-10 h-10 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 flex items-center justify-center">
                  <span className="text-white text-xl font-bold">HR</span>
                </div>
                <span className="text-2xl font-bold bg-gradient-to-r from-primary-600 to-purple-600 bg-clip-text text-transparent">
                  روبوت الموارد البشرية
                </span>
              </Link>
            </motion.div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8 space-x-reverse">
              <NavLink href="/" isActive={location.pathname === '/'}>
                الرئيسية
              </NavLink>
              <NavLink href="/features" isActive={location.pathname === '/features'}>
                المميزات
              </NavLink>
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Link
                  to="/login"
                  className="px-6 py-3 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium hover:shadow-lg transition-shadow"
                >
                  تسجيل الدخول
                </Link>
              </motion.div>
            </div>

            {/* Mobile Menu Button */}
            <div className="md:hidden">
              <button
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                className="text-gray-600 hover:text-gray-900"
              >
                {isMobileMenuOpen ? (
                  <X className="h-6 w-6" />
                ) : (
                  <Menu className="h-6 w-6" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Mobile Menu */}
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{
            opacity: isMobileMenuOpen ? 1 : 0,
            height: isMobileMenuOpen ? 'auto' : 0
          }}
          className="md:hidden bg-white border-t"
        >
          <div className="px-4 py-2 space-y-1">
            <MobileNavLink href="/" isActive={location.pathname === '/'}>
              الرئيسية
            </MobileNavLink>
            <MobileNavLink href="/features" isActive={location.pathname === '/features'}>
              المميزات
            </MobileNavLink>
            <Link
              to="/login"
              className="block w-full text-center px-4 py-2 rounded-lg bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium"
            >
              تسجيل الدخول
            </Link>
          </div>
        </motion.div>
      </motion.nav>

      <main className="pt-20">{children}</main>

      <footer className="bg-gradient-to-r from-gray-900 to-gray-800 text-white">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div>
              <h3 className="text-xl font-bold mb-4">روبوت الموارد البشرية</h3>
              <p className="text-gray-400">
                حلول ذكية لإدارة الموارد البشرية في مؤسستك
              </p>
            </div>
            <div>
              <h3 className="text-xl font-bold mb-4">روابط سريعة</h3>
              <ul className="space-y-2">
                <li>
                  <Link to="/" className="text-gray-400 hover:text-white">
                    الرئيسية
                  </Link>
                </li>
                <li>
                  <Link to="/features" className="text-gray-400 hover:text-white">
                    المميزات
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="text-xl font-bold mb-4">تواصل معنا</h3>
              <p className="text-gray-400">
                البريد الإلكتروني: info@hrchatbot.com
              </p>
            </div>
          </div>
          <div className="mt-8 pt-8 border-t border-gray-700 text-center text-gray-400">
            <p>جميع الحقوق محفوظة © {new Date().getFullYear()}</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

// Navigation Link Components
const NavLink = ({ href, children, isActive }: { href: string; children: React.ReactNode; isActive: boolean }) => (
  <Link
    to={href}
    className={`relative text-lg font-medium transition-colors ${
      isActive ? 'text-primary-600' : 'text-gray-600 hover:text-gray-900'
    }`}
  >
    {children}
    {isActive && (
      <motion.div
        layoutId="underline"
        className="absolute right-0 left-0 bottom-0 h-0.5 bg-primary-600"
      />
    )}
  </Link>
);

const MobileNavLink = ({ href, children, isActive }: { href: string; children: React.ReactNode; isActive: boolean }) => (
  <Link
    to={href}
    className={`block px-4 py-2 rounded-lg transition-colors ${
      isActive ? 'bg-primary-50 text-primary-600' : 'text-gray-600 hover:bg-gray-50'
    }`}
  >
    {children}
  </Link>
);

export default Layout;
</file>

<file path="src\components\common\LoadingSpinner.tsx">
// src/components/common/LoadingSpinner.tsx
import React from 'react';
import { motion } from 'framer-motion';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  color?: 'primary' | 'white' | 'gray';
  className?: string;
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ 
  size = 'md', 
  color = 'primary',
  className = ''
}) => {
  const sizeClasses = {
    sm: 'w-4 h-4 border-2',
    md: 'w-8 h-8 border-3',
    lg: 'w-12 h-12 border-4'
  };

  const colorClasses = {
    primary: 'border-primary-200 border-t-primary-600',
    white: 'border-white/30 border-t-white',
    gray: 'border-gray-200 border-t-gray-600'
  };

  return (
    <motion.div
      animate={{ rotate: 360 }}
      transition={{
        duration: 1,
        repeat: Infinity,
        ease: "linear"
      }}
      className={`
        rounded-full
        ${sizeClasses[size]}
        ${colorClasses[color]}
        ${className}
      `}
    />
  );
};

export default LoadingSpinner;
</file>

<file path="src\components\common\PageLoader.tsx">
// src/components/common/PageLoader.tsx
import React from 'react';
import { motion } from 'framer-motion';
import LoadingSpinner from './LoadingSpinner';

interface PageLoaderProps {
  message?: string;
  overlay?: boolean;
}

export const PageLoader: React.FC<PageLoaderProps> = ({ 
  message = 'جاري التحميل...',
  overlay = false 
}) => {
  const content = (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="flex flex-col items-center justify-center gap-4 p-4"
    >
      <LoadingSpinner size="lg" />
      {message && (
        <motion.p
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-gray-600 text-lg"
        >
          {message}
        </motion.p>
      )}
    </motion.div>
  );

  if (overlay) {
    return (
      <div className="fixed inset-0 bg-white/80 backdrop-blur-sm z-50 flex items-center justify-center">
        {content}
      </div>
    );
  }

  return (
    <div className="min-h-[400px] flex items-center justify-center">
      {content}
    </div>
  );
};

export default PageLoader;
</file>

<file path="src\components\common\ProtectedRoute.tsx">
// src/components/common/ProtectedRoute.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;
</file>

<file path="src\components\documents\DocumentList.tsx">
// src/components/documents/DocumentList.tsx
import React, { useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  FileText, 
  Trash2, 
  Download, 
  AlertCircle
} from 'lucide-react';
import { useDocuments } from '../../hooks/useDocuments';
import { DocumentMetadata, AllowedFileType } from '../../types/documents';
import { formatDate } from '../../utils/data';
import ContentSkeleton from '../common/ContentSkeleton';

const DocumentList: React.FC = () => {
  const { state, fetchDocuments, deleteDocument } = useDocuments();

  useEffect(() => {
    fetchDocuments();
  }, [fetchDocuments]);

  const handleDelete = async (documentId: string) => {
    try {
      await deleteDocument(documentId);
    } catch (error) {
      // Error is handled by the context
    }
  };

  const getFileTypeIcon = (type: AllowedFileType) => {
    // Placeholder - replace with actual icons
    return <FileText className="w-5 h-5" />;
  };

  if (state.isLoading && !state.documents.length) {
    return <ContentSkeleton type="list" count={5} />;
  }

  return (
    <div className="space-y-4">
      {/* Documents List */}
      {state.documents.length > 0 ? (
        <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
          {/* Table Header (Simplified) */}
          <div className="grid grid-cols-3 gap-4 px-4 py-3 bg-gray-50 border-b text-sm font-medium text-gray-500">
            <div>اسم الملف</div>
            <div>النوع</div>
            <div>إجراءات</div>
          </div>

          {/* Document Items */}
          {state.documents.map((doc) => (
            <motion.div
              key={doc.id}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="grid grid-cols-3 gap-4 px-4 py-3 border-b last:border-0 items-center hover:bg-gray-50"
            >
              {/* File Name */}
              <div className="flex items-center gap-3">
                <div className="p-2 bg-gray-100 rounded">
                  {getFileTypeIcon(doc.fileType)}
                </div>
                <div className="truncate">
                  <p className="font-medium text-gray-900 truncate">{doc.title}</p>
                  <p className="text-sm text-gray-500">
                    {(doc.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
              </div>

              {/* File Type */}
              <div>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
                {doc.fileType ? doc.fileType.toUpperCase() : ''}
                </span>
              </div>

              {/* Actions */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => window.open( `/api/documents/${doc.id}/download`)}
                  className="p-1 text-gray-400 hover:text-gray-500"
                  title="تحميل"
                >
                  <Download className="w-5 h-5" />
                </button>

                <button
                  onClick={() => handleDelete(doc.id)}
                  className="p-1 text-gray-400 hover:text-red-500"
                  title="حذف"
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              </div>
            </motion.div>
          ))}
        </div>
      ) : (
        <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
          <div className="w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center">
            <FileText className="w-8 h-8 text-gray-400" />
          </div>
          <h3 className="mt-4 text-lg font-medium text-gray-900">لا توجد مستندات</h3>
          <p className="mt-2 text-gray-500">
              ابدأ برفع مستنداتك
          </p>
        </div>
      )}

      {/* Error Message */}
      {state.error && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="bg-red-50 text-red-600 p-4 rounded-lg flex items-center gap-2"
          >
            <AlertCircle className="w-5 h-5 flex-shrink-0" />
            <span>{state.error}</span>
          </motion.div>
        )}
    </div>
  );
};

export default DocumentList;
</file>

<file path="src\components\documents\DocumentUpload.tsx">
// src/components/documents/DocumentUpload.tsx
import React, { useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Upload, File, X, AlertCircle, CheckCircle, Loader2 } from 'lucide-react';
import { useDocuments } from '../../hooks/useDocuments';
import { AllowedFileType } from '../../types/documents';

const ALLOWED_TYPES: AllowedFileType[] = ['pdf', 'docx', 'doc', 'txt'];
const MAX_SIZE = 10 * 1024 * 1024; // 10MB

export const DocumentUpload: React.FC = () => {
  const { uploadDocument } = useDocuments();
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const validateFile = (file: File): string | null => {
    const fileType = file.name.split('.').pop()?.toLowerCase() as AllowedFileType;

    if (!ALLOWED_TYPES.includes(fileType)) {
      return 'نوع الملف غير مدعوم. الأنواع المدعومة هي: PDF، DOCX، DOC، TXT';
    }

    if (file.size > MAX_SIZE) {
      return 'حجم الملف يتجاوز الحد المسموح به (10 ميجابايت)';
    }

    return null;
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) {
      setUploadError('لم يتم اختيار ملف');
      return;
    }

    // Reset states
    setUploadError(null);
    setUploadSuccess(false);
    setSelectedFile(file);

    const error = validateFile(file);
    if (error) {
      setUploadError(error);
      setSelectedFile(null);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      setUploadError('لم يتم اختيار ملف');
      return;
    }

    setIsUploading(true);
    setUploadError(null);
    setUploadSuccess(false); // Reset success message

    try {
      await uploadDocument(selectedFile);
      setUploadSuccess(true); 
      setSelectedFile(null); // Clear the selected file
      if (fileInputRef.current) {
        fileInputRef.current.value = ''; // Reset file input
      }
    } catch (error: any) {
      let errorMessage = 'حدث خطأ في رفع الملف'; // Default error message

      // Check for specific error messages from the backend
      if (error.message.includes('نوع الملف غير مسموح به')) {
        errorMessage = 'نوع الملف غير مسموح به. الأنواع المدعومة هي: PDF، DOCX، DOC، TXT';
      } else if (error.message.includes('حجم الملف كبير جداً')) {
        errorMessage = 'حجم الملف يتجاوز الحد المسموح به (10 ميجابايت)';
      } else if (error.message.includes('لم يتم توفير ملف') || error.message.includes('لم يتم اختيار ملف')){
        errorMessage = 'الرجاء اختيار ملف صحيح';
      }

      setUploadError(errorMessage);
    } finally {
      setIsUploading(false);
    }
};

  const handleReset = () => {
    setSelectedFile(null);
    setUploadError(null);
    setUploadSuccess(false);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="space-y-4">
      {/* Upload Area */}
      <motion.div
        className={`
          relative border-2 border-dashed rounded-lg p-8
          transition-colors duration-200 ease-in-out
          border-gray-300
        `}
      >
        <input
          ref={fileInputRef}
          type="file"
          accept=".pdf,.docx,.doc,.txt"
          onChange={handleFileSelect}
          className="hidden"
        />

        <div className="flex flex-col items-center justify-center space-y-4">
          <div className="p-3 bg-primary-50 rounded-full">
            <Upload className="w-6 h-6 text-primary-600" />
          </div>
          <div className="text-center">
            <p className="text-gray-700 font-medium">قم بسحب وإفلات الملف هنا</p>
            <p className="text-gray-500 text-sm mt-1">أو</p>
            <button
              type="button"
              onClick={() => fileInputRef.current?.click()}
              className="mt-2 text-primary-600 hover:text-primary-700 font-medium"
            >
              اختر ملف
            </button>
          </div>
          <p className="text-sm text-gray-500">
            PDF, DOCX, DOC, TXT حتى 10 ميجابايت
          </p>
        </div>
      </motion.div>

      {/* Selected File */}
      <AnimatePresence>
        {selectedFile && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="bg-white border rounded-lg p-4"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3 space-x-reverse">
                <File className="w-5 h-5 text-gray-500" />
                <div>
                  <p className="font-medium text-gray-900">{selectedFile.name}</p>
                  <p className="text-sm text-gray-500">
                    {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
              </div>
              <button
                onClick={handleReset}
                className="text-gray-400 hover:text-gray-500"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Upload Button */}
            <motion.button
              whileHover={{ scale: 1.01 }}
              whileTap={{ scale: 0.99 }}
              onClick={handleUpload}
              disabled={isUploading}
              className="mt-4 w-full py-2 px-4 rounded-lg bg-primary-600 text-white 
                         hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed
                         flex items-center justify-center gap-2"
            >
              {isUploading ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  جاري الرفع...
                </>
              ) : (
                <>
                  <Upload className="w-5 h-5" />
                  رفع الملف
                </>
              )}
            </motion.button>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Error Message */}
      <AnimatePresence>
        {uploadError && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="bg-red-50 text-red-600 p-4 rounded-lg flex items-center gap-2"
          >
            <AlertCircle className="w-5 h-5 flex-shrink-0" />
            <span>{uploadError}</span>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Success Message */}
      <AnimatePresence>
        {uploadSuccess && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="bg-green-50 text-green-600 p-4 rounded-lg flex items-center gap-2"
          >
            <CheckCircle className="w-5 h-5 flex-shrink-0" />
            <span>تم رفع الملف بنجاح</span>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default DocumentUpload;
</file>

<file path="src\components\vacation\VacationBalance.tsx">
// src/components/vacation/VacationBalance.tsx
import React, { useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Calendar,
  Clock,
  RefreshCcw,
  AlertCircle,
  CheckCircle,
  XCircle,
  Clock3,
} from "lucide-react";
import { useVacation } from "../../hooks/useVacation";
import { useAuth } from "../../hooks/useAuth";
import { VacationRequest } from "../../types/vacation";
import { formatDate } from "../../utils/data";
import ContentSkeleton from "../common/ContentSkeleton";

export const VacationBalance: React.FC = () => {
  const { user } = useAuth();
  const { state, fetchBalance, fetchRequests } = useVacation();

  useEffect(() => {
    if (user?.id) {
      fetchBalance();
      fetchRequests();
    }
  }, [user, fetchBalance, fetchRequests]);

  const renderStatusBadge = (status: VacationRequest["status"]) => {
    const statusConfig = {
      pending: {
        icon: Clock3,
        class: "bg-yellow-100 text-yellow-800",
        text: "قيد المراجعة",
      },
      approved: {
        icon: CheckCircle,
        class: "bg-green-100 text-green-800",
        text: "تمت الموافقة",
      },
      rejected: {
        icon: XCircle,
        class: "bg-red-100 text-red-800",
        text: "مرفوض",
      },
      cancelled: {
        icon: XCircle,
        class: "bg-gray-100 text-gray-800",
        text: "ملغي",
      },
    };

    const config = statusConfig[status];
    const Icon = config.icon;

    return (
      <span
        className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-sm font-medium ${config.class}`}
      >
        <Icon className="w-4 h-4" />
        {config.text}
      </span>
    );
  };

  if (state.isLoading) {
    return <ContentSkeleton type="card" />;
  }

  return (
    <div className="space-y-6">
      {/* Balance Card */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-xl shadow-lg overflow-hidden"
      >
        <div className="p-6">
          <div className="flex justify-between items-start">
            <h2 className="text-2xl font-bold text-gray-900">رصيد الإجازات</h2>
            <button
              onClick={() => fetchBalance()}
              className="text-gray-500 hover:text-gray-700"
              title="تحديث"
            >
              <RefreshCcw className="w-5 h-5" />
            </button>
          </div>

          {state.balance ? (
            <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-primary-50 rounded-lg p-4">
                <div className="text-primary-600 text-sm font-medium">
                  الرصيد السنوي
                </div>
                <div className="mt-2 text-3xl font-bold text-primary-700">
                  {state.balance.annual_balance} يوم
                </div>
              </div>

              <div className="bg-purple-50 rounded-lg p-4">
                <div className="text-purple-600 text-sm font-medium">
                  الإجازات المستخدمة
                </div>
                <div className="mt-2 text-3xl font-bold text-purple-700">
                  {state.balance.used_days} يوم
                </div>
              </div>

              <div className="bg-green-50 rounded-lg p-4">
                <div className="text-green-600 text-sm font-medium">
                  الرصيد المتبقي
                </div>
                <div className="mt-2 text-3xl font-bold text-green-700">
                  {state.balance.remaining_balance} يوم
                </div>
              </div>
            </div>
          ) : (
            <div className="mt-4 text-gray-500">
              لا يوجد معلومات متوفرة عن الرصيد
            </div>
          )}

          {state.balance && (
            <div className="mt-4 text-sm text-gray-500 flex items-center gap-1">
              <Clock className="w-4 h-4" />
              آخر تحديث: {formatDate(state.balance.last_updated)}
            </div>
          )}
        </div>

        {/* Progress Bar */}
        {state.balance && (
          <div className="px-6 pb-6">
            <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
              <motion.div
                initial={{ width: 0 }}
                animate={{
                  width: `${
                    (state.balance.used_days / state.balance.annual_balance) *
                    100
                  }%`,
                }}
                transition={{ duration: 1, ease: "easeOut" }}
                className="h-full bg-primary-500"
              />
            </div>
          </div>
        )}
      </motion.div>

      {/* Recent Requests */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="bg-white rounded-xl shadow-lg p-6"
      >
        <h2 className="text-xl font-bold text-gray-900 mb-6">
          طلبات الإجازة السابقة
        </h2>

        {/* Use isLoading state to show skeleton or requests */}
        {state.isLoading ? (
          <ContentSkeleton type="list" count={3} /> // Adjust count as needed
        ) : state.requests && state.requests.length > 0 ? (
          <div className="space-y-4">
            {state.requests.map((request) => (
              // Add a check for request and request.id
              request && request.id && (
                <motion.div
                  key={request.id} // Use the id as the key
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="border border-gray-100 rounded-lg p-4 hover:bg-gray-50 transition-colors"
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <div className="font-medium text-gray-900 mb-1">
                        {request?.start_date
                          ? formatDate(request.start_date)
                          : ""}{" "}
                        -{" "}
                        {request?.end_date ? formatDate(request.end_date) : ""}
                      </div>
                      <div className="text-sm text-gray-500">
                        نوع الإجازة:{" "}
                        {request?.request_type
                          ? request.request_type === "annual"
                            ? "سنوية"
                            : request.request_type === "sick"
                            ? "مرضية"
                            : "طارئة"
                          : ""}
                      </div>
                    </div>
                    {request?.status && renderStatusBadge(request.status)}
                  </div>
                  {request?.notes && (
                    <div className="mt-2 text-sm text-gray-600">
                      {request.notes}
                    </div>
                  )}
                </motion.div>
              )
            ))}
          </div>
        ) : (
          <div className="text-center text-gray-500 py-8">
            لا توجد طلبات إجازة سابقة
          </div>
        )}
      </motion.div>

      {/* Error Display */}
      <AnimatePresence>
        {state.error && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            className="bg-red-50 text-red-600 p-4 rounded-lg flex items-center gap-2"
          >
            <AlertCircle className="w-5 h-5 flex-shrink-0" />
            <span>{state.error}</span>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default VacationBalance;
</file>

<file path="src\components\vacation\VacationRequest.tsx">
// src/components/vacation/VacationRequest.tsx
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Calendar, Clock, AlertCircle, Loader2, Check } from 'lucide-react';
import { useVacation } from '../../hooks/useVacation';
import { useAuth } from '../../hooks/useAuth';
import { 
  VacationRequestType,
  VacationRequestFormData,
  CreateVacationRequestPayload 
} from '../../types/vacation';
import { calculateDaysBetween } from '../../utils/data';

const VACATION_TYPES: { value: VacationRequestType; label: string }[] = [
  { value: 'annual', label: 'إجازة سنوية' },
  { value: 'sick', label: 'إجازة مرضية' },
  { value: 'emergency', label: 'إجازة طارئة' }
];

const initialFormData: VacationRequestFormData = {
  startDate: '',
  endDate: '',
  requestType: 'annual',
  notes: ''
};

export const VacationRequest: React.FC = () => {
  const { user } = useAuth();
  const { state, submitRequest, fetchBalance } = useVacation();
  const [formData, setFormData] = useState<VacationRequestFormData>(initialFormData);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formErrors, setFormErrors] = useState<Partial<Record<keyof VacationRequestFormData, string>>>({});

  useEffect(() => {
    if (user?.id) {
      fetchBalance();
    }
  }, [user, fetchBalance]);

  const validateForm = (): boolean => {
    const errors: Partial<Record<keyof VacationRequestFormData, string>> = {};
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const startDate = new Date(formData.startDate);
    const endDate = new Date(formData.endDate);

    // Validate start date
    if (!formData.startDate) {
      errors.startDate = 'تاريخ البداية مطلوب';
    } else if (startDate < today) {
      errors.startDate = 'لا يمكن اختيار تاريخ في الماضي';
    }

    // Validate end date
    if (!formData.endDate) {
      errors.endDate = 'تاريخ النهاية مطلوب';
    } else if (endDate < startDate) {
      errors.endDate = 'تاريخ النهاية يجب أن يكون بعد تاريخ البداية';
    }

    // Validate request type
    if (!formData.requestType) {
      errors.requestType = 'نوع الإجازة مطلوب';
    }

    // Check against balance if it's an annual leave
    if (formData.requestType === 'annual' && 
        state.balance && 
        formData.startDate && 
        formData.endDate) {
      const daysRequested = calculateDaysBetween(formData.startDate, formData.endDate);
      if (daysRequested > state.balance.remaining_balance) {
        errors.endDate = 'عدد أيام الإجازة يتجاوز الرصيد المتبقي';
      }
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!user?.id || !validateForm()) return;

    setIsSubmitting(true);
    try {
      const request: CreateVacationRequestPayload = {
        employee_id: user.id,
        start_date: formData.startDate,
        end_date: formData.endDate,
        request_type: formData.requestType,
        notes: formData.notes
      };

      await submitRequest(request);
      setFormData(initialFormData);
      
      // Show success message (could be enhanced with a toast notification)
    } catch (error) {
      // Error is handled by the context
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when field is modified
    if (formErrors[name as keyof VacationRequestFormData]) {
      setFormErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-xl shadow-lg p-6 max-w-2xl mx-auto"
    >
      {/* Header Section */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">تقديم طلب إجازة</h2>
        {state.balance && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-gray-50 rounded-lg p-4 mt-4"
          >
            <div className="flex justify-between items-center">
              <span className="text-gray-600">الرصيد المتبقي:</span>
              <span className="font-semibold text-xl text-primary-600">
                {state.balance.remaining_balance} يوم
              </span>
            </div>
          </motion.div>
        )}
      </div>

      {/* Form */}
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Vacation Type */}
        <div>
          <label htmlFor="requestType" className="block text-sm font-medium text-gray-700 mb-1">
            نوع الإجازة
          </label>
          <select
            id="requestType"
            name="requestType"
            value={formData.requestType}
            onChange={handleChange}
            className={`w-full rounded-lg border ${
              formErrors.requestType ? 'border-red-500' : 'border-gray-300'
            } p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent`}
          >
            {VACATION_TYPES.map(type => (
              <option key={type.value} value={type.value}>
                {type.label}
              </option>
            ))}
          </select>
          {formErrors.requestType && (
            <p className="mt-1 text-sm text-red-500 flex items-center gap-1">
              <AlertCircle className="w-4 h-4" />
              {formErrors.requestType}
            </p>
          )}
        </div>

        {/* Date Selection */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Start Date */}
          <div>
            <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">
              تاريخ البداية
            </label>
            <div className="relative">
              <input
                type="date"
                id="startDate"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className={`w-full rounded-lg border ${
                  formErrors.startDate ? 'border-red-500' : 'border-gray-300'
                } p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent`}
              />
              <Calendar className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            </div>
            {formErrors.startDate && (
              <p className="mt-1 text-sm text-red-500 flex items-center gap-1">
                <AlertCircle className="w-4 h-4" />
                {formErrors.startDate}
              </p>
            )}
          </div>

          {/* End Date */}
          <div>
            <label htmlFor="endDate" className="block text-sm font-medium text-gray-700 mb-1">
              تاريخ النهاية
            </label>
            <div className="relative">
              <input
                type="date"
                id="endDate"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className={`w-full rounded-lg border ${
                  formErrors.endDate ? 'border-red-500' : 'border-gray-300'
                } p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent`}
              />
              <Calendar className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            </div>
            {formErrors.endDate && (
              <p className="mt-1 text-sm text-red-500 flex items-center gap-1">
                <AlertCircle className="w-4 h-4" />
                {formErrors.endDate}
              </p>
            )}
          </div>
        </div>

        {/* Notes */}
        <div>
          <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-1">
            ملاحظات
          </label>
          <textarea
            id="notes"
            name="notes"
            value={formData.notes}
            onChange={handleChange}
            rows={3}
            className="w-full rounded-lg border border-gray-300 p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            placeholder="أضف أي ملاحظات إضافية هنا..."
          />
        </div>

        {/* Submit Button */}
        <motion.button
          whileHover={{ scale: 1.01 }}
          whileTap={{ scale: 0.99 }}
          type="submit"
          disabled={isSubmitting || state.isLoading}
          className="w-full py-3 px-4 rounded-lg bg-primary-600 text-white font-medium hover:bg-primary-700 
                     focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500
                     disabled:opacity-50 disabled:cursor-not-allowed
                     flex items-center justify-center gap-2"
        >
          {isSubmitting ? (
            <>
              <Loader2 className="w-5 h-5 animate-spin" />
              جاري التقديم...
            </>
          ) : (
            <>
              <Check className="w-5 h-5" />
              تقديم الطلب
            </>
          )}
        </motion.button>

        {/* Error Display */}
        <AnimatePresence>
          {state.error && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="bg-red-50 text-red-600 p-3 rounded-lg flex items-center gap-2"
            >
              <AlertCircle className="w-5 h-5 flex-shrink-0" />
              <span>{state.error}</span>
            </motion.div>
          )}
        </AnimatePresence>
      </form>
    </motion.div>
  );
};

export default VacationRequest;
</file>

<file path="src\constants\index.ts">
// src/constants/index.ts
export const API_ENDPOINTS = {
    LOGIN: '/api/auth/login',
    CHAT: '/api/chat',
    VACATION_BALANCE: '/api/employee/vacation-balance',
    VACATION_REQUEST: '/api/employee/vacation-request',
    DOCUMENTS: '/api/admin/documents',
    UPLOAD_DOCUMENT: '/api/admin/upload'
  };
  
  export const VACATION_TYPES = {
    ANNUAL: 'annual',
    SICK: 'sick',
    EMERGENCY: 'emergency'
  } as const;
  
  export const MESSAGE_STATUS = {
    SENDING: 'sending',
    SENT: 'sent',
    ERROR: 'error'
  } as const;
  
  export const ERROR_MESSAGES = {
    NETWORK_ERROR: 'حدث خطأ في الاتصال بالخادم',
    UNAUTHORIZED: 'جلسة العمل منتهية. يرجى تسجيل الدخول مرة أخرى',
    INVALID_CREDENTIALS: 'اسم المستخدم أو كلمة المرور غير صحيحة',
    GENERAL_ERROR: 'حدث خطأ غير متوقع'
  };
  
  export const ROUTES = {
    HOME: '/',
    LOGIN: '/login',
    CHAT: '/chat',
    PROFILE: '/profile',
    ADMIN: '/admin'
  } as const;
</file>

<file path="src\context\AuthContext.tsx">
// src/context/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { User } from '../types/api';
import { authService } from '../services/auth';
import { storage } from '../utils/storage';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Check for existing session
    const checkAuth = async () => {
      const storedUser = storage.getUser();
      if (storedUser) {
        setUser(storedUser);
      }
      setIsLoading(false);
    };

    checkAuth();
  }, []);

  const login = async (username: string, password: string) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await authService.login({ username, password });
      const userData = response.user;
      
      setUser(userData);
      storage.setUser(userData);
    } catch (error: any) {
      setError(error.message || 'فشل تسجيل الدخول');
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    authService.logout();
    setUser(null);
    storage.clear();
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        isLoading,
        error,
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
</file>

<file path="src\context\ChatContext.tsx">
// src/context/ChatContext.tsx
import React, { createContext, useContext, useReducer, useEffect } from 'react';
import { useAuth } from './AuthContext';
import { chatService } from '../services/chat';
import { Message } from '../types/api';

interface ChatState {
  messages: Message[];
  isLoading: boolean;
  error: string | null;
}

type ChatAction =
  | { type: 'SET_MESSAGES'; payload: Message[] }
  | { type: 'ADD_MESSAGE'; payload: Message }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'UPDATE_MESSAGE_STATUS'; payload: { id: string; status: Message['status'] } };

const chatReducer = (state: ChatState, action: ChatAction): ChatState => {
  switch (action.type) {
    case 'SET_MESSAGES':
      return {
        ...state,
        messages: action.payload
      };
    case 'ADD_MESSAGE':
      return {
        ...state,
        messages: [...state.messages, action.payload]
      };
    case 'SET_LOADING':
      return {
        ...state,
        isLoading: action.payload
      };
    case 'SET_ERROR':
      return {
        ...state,
        error: action.payload
      };
    case 'UPDATE_MESSAGE_STATUS':
      return {
        ...state,
        messages: state.messages.map(msg =>
          msg.id === action.payload.id
            ? { ...msg, status: action.payload.status }
            : msg
        )
      };
    default:
      return state;
  }
};

interface ChatContextType {
  state: ChatState;
  sendMessage: (content: string) => Promise<void>;
  clearError: () => void;
}

export const ChatContext = createContext<ChatContextType | undefined>(undefined);

const initialState: ChatState = {
  messages: [],
  isLoading: false,
  error: null
};

export const ChatProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  const [state, dispatch] = useReducer(chatReducer, initialState);

  useEffect(() => {
    const loadChatHistory = async () => {
      if (user?.employee_id) {
        dispatch({ type: 'SET_LOADING', payload: true });
        try {
          const history = await chatService.getChatHistory(user.employee_id);
          const historyWithDates = history.map(msg => ({
            ...msg,
            timestamp: new Date(msg.timestamp)
          }));
          dispatch({ type: 'SET_MESSAGES', payload: historyWithDates });
        } catch (error) {
          dispatch({ 
            type: 'SET_ERROR', 
            payload: 'فشل في تحميل سجل المحادثات' 
          });
        } finally {
          dispatch({ type: 'SET_LOADING', payload: false });
        }
      }
    };

    loadChatHistory();
  }, [user]);

  const sendMessage = async (content: string) => {
    const currentUser = user; // Store user in variable to avoid closure issues
    
    if (!currentUser?.employee_id) {
      dispatch({ 
        type: 'SET_ERROR', 
        payload: 'يجب تسجيل الدخول لإرسال الرسائل' 
      });
      return;
    }

    const messageId = Date.now().toString();
    
    dispatch({
      type: 'ADD_MESSAGE',
      payload: {
        id: messageId,
        content,
        type: 'user',
        timestamp: new Date(),
        status: 'sending'
      }
    });

    dispatch({ type: 'SET_LOADING', payload: true });

    try {
      const response = await chatService.sendMessage(content, currentUser.employee_id);
      
      dispatch({
        type: 'UPDATE_MESSAGE_STATUS',
        payload: { id: messageId, status: 'sent' }
      });

      dispatch({
        type: 'ADD_MESSAGE',
        payload: {
          id: Date.now().toString(),
          content: response.response,
          type: 'bot',
          timestamp: new Date(response.timestamp),
          status: 'sent'
        }
      });
    } catch (error) {
      dispatch({
        type: 'UPDATE_MESSAGE_STATUS',
        payload: { id: messageId, status: 'error' }
      });
      dispatch({
        type: 'SET_ERROR',
        payload: 'فشل في إرسال الرسالة. يرجى المحاولة مرة أخرى.'
      });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const clearError = () => {
    dispatch({ type: 'SET_ERROR', payload: null });
  };

  return (
    <ChatContext.Provider
      value={{
        state,
        sendMessage,
        clearError
      }}
    >
      {children}
    </ChatContext.Provider>
  );
};

export const useChat = () => {
  const context = useContext(ChatContext);
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};
</file>

<file path="src\context\DocumentContext.tsx">
// src/context/DocumentContext.tsx
import React, { createContext, useContext, useReducer, useCallback } from 'react';
import { documentService } from '../services/documents';
import { DocumentMetadata } from '../types/documents';

interface DocumentState {
  documents: DocumentMetadata[];
  isLoading: boolean;
  error: string | null;
  status: 'idle' | 'loading' | 'failed';
}

type DocumentAction =
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_DOCUMENTS'; payload: DocumentMetadata[] }
  | { type: 'ADD_DOCUMENT'; payload: DocumentMetadata }
  | { type: 'REMOVE_DOCUMENT'; payload: string }
  | { type: 'SET_ERROR'; payload: string | null };

interface DocumentContextType {
  state: DocumentState;
  fetchDocuments: () => Promise<void>;
  uploadDocument: (file: File) => Promise<void>;
  deleteDocument: (documentId: string) => Promise<void>;
  clearError: () => void;
}

// Create and export the context
export const DocumentContext = createContext<DocumentContextType | undefined>(undefined);

const initialState: DocumentState = {
  documents: [],
  isLoading: false,
  error: null
};



const documentReducer = (state: DocumentState, action: DocumentAction): DocumentState => {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, isLoading: action.payload, error: null };
    case 'SET_DOCUMENTS':
      return { ...state, documents: action.payload };
    case 'ADD_DOCUMENT':
      return { ...state, documents: [...state.documents, action.payload] };
    case 'REMOVE_DOCUMENT':
      return {
        ...state,
        documents: state.documents.filter(doc => doc.id !== action.payload)
      };
    case 'SET_ERROR':
      return { ...state, error: action.payload, isLoading: false };
    default:
      return state;
  }
};

export const DocumentProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(documentReducer, initialState);

  const fetchDocuments = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await documentService.getDocuments();
      dispatch({ type: 'SET_DOCUMENTS', payload: response.documents });
    } catch (error) {
      dispatch({ 
        type: 'SET_ERROR', 
        payload: error instanceof Error ? error.message : 'حدث خطأ في جلب المستندات'
      });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, []);

  const uploadDocument = useCallback(async (file: File) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await documentService.uploadDocument(file);
      dispatch({
        type: 'ADD_DOCUMENT',
        payload: { ...response.document, status: 'success' } // Assuming backend sets the status
      });
      return response;
    } catch (error) {
      dispatch({
        type: 'SET_ERROR',
        payload: error instanceof Error ? error.message : 'حدث خطأ في رفع المستند'
      });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, []);

  const deleteDocument = useCallback(async (documentId: string) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      await documentService.deleteDocument(documentId);
      dispatch({ type: 'REMOVE_DOCUMENT', payload: documentId });
    } catch (error) {
      dispatch({
        type: 'SET_ERROR',
        payload: error instanceof Error ? error.message : 'حدث خطأ في حذف المستند'
      });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, []);

  const clearError = () => {
    dispatch({ type: 'SET_ERROR', payload: null });
  };

  return (
    <DocumentContext.Provider
      value={{
        state,
        fetchDocuments,
        uploadDocument,
        deleteDocument,
        clearError
      }}
    >
      {children}
    </DocumentContext.Provider>
  );
};
</file>

<file path="src\context\VacationContext.tsx">
// src/context/VacationContext.tsx

import React, { createContext, useContext, useReducer, useCallback } from 'react';
import { useAuth } from './AuthContext';
import { vacationService } from '../services/vacation';
import { 
  VacationBalance, 
  VacationRequest,
  CreateVacationRequestPayload 
} from '../types/vacation';

interface VacationState {
  balance: VacationBalance | null;
  requests: VacationRequest[];
  isLoading: boolean;
  error: string | null;
}

type VacationAction =
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_BALANCE'; payload: VacationBalance }
  | { type: 'SET_REQUESTS'; payload: VacationRequest[] }
  | { type: 'ADD_REQUEST'; payload: VacationRequest }
  | { type: 'UPDATE_REQUEST'; payload: VacationRequest }
  | { type: 'SET_ERROR'; payload: string | null };

const initialState: VacationState = {
  balance: null,
  requests: [],
  isLoading: false,
  error: null
};

const vacationReducer = (state: VacationState, action: VacationAction): VacationState => {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, isLoading: action.payload, error: null };
    case 'SET_BALANCE':
      return { ...state, balance: action.payload };
    case 'SET_REQUESTS':
      return { ...state, requests: action.payload };
    case 'ADD_REQUEST':
      return { ...state, requests: [...state.requests, action.payload] };
    case 'UPDATE_REQUEST':
      return {
        ...state,
        requests: state.requests.map(req =>
          req.id === action.payload.id ? action.payload : req
        )
      };
    case 'SET_ERROR':
      return { ...state, error: action.payload, isLoading: false };
    default:
      return state;
  }
};

interface VacationContextType {
  state: VacationState;
  fetchBalance: () => Promise<void>;
  fetchRequests: () => Promise<void>;
  submitRequest: (request: CreateVacationRequestPayload) => Promise<void>;
  cancelRequest: (requestId: string) => Promise<void>;
  clearError: () => void;
}

// Correct: Named export
export const VacationContext = createContext<VacationContextType | undefined>(undefined);

export const VacationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(vacationReducer, initialState);
  const { user } = useAuth();

  const fetchBalance = useCallback(async () => {
    if (!user?.id) return;

    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await vacationService.getBalance(user.id);
      dispatch({ type: 'SET_BALANCE', payload: response.data });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error instanceof Error ? error.message : 'حدث خطأ في جلب رصيد الإجازات' });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, [user]);

  const fetchRequests = useCallback(async () => {
    if (!user?.id) return;

    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await vacationService.getRequests(user.id);
      dispatch({ type: 'SET_REQUESTS', payload: response.data });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error instanceof Error ? error.message : 'حدث خطأ في جلب طلبات الإجازة' });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, [user]);

  const submitRequest = async (request: CreateVacationRequestPayload) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      // add this line to check if the backend is reciving a valid employee_id
      console.log('Submitting request:', request); 
      const response = await vacationService.submitRequest(request);
      // add this line to check the response from the backend
      console.log('Vacation request response:', response); 
      dispatch({ type: 'ADD_REQUEST', payload: response.data });
      await fetchBalance(); // Refresh balance after successful request
    } catch (error) {
      console.error('Error submitting vacation request:', error);
      dispatch({ type: 'SET_ERROR', payload: error instanceof Error ? error.message : 'حدث خطأ في تقديم طلب الإجازة' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const cancelRequest = async (requestId: string) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await vacationService.cancelRequest(requestId);
      dispatch({ type: 'UPDATE_REQUEST', payload: response.data });
      await fetchBalance(); // Refresh balance after cancellation
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error instanceof Error ? error.message : 'حدث خطأ في إلغاء طلب الإجازة' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const clearError = () => {
    dispatch({ type: 'SET_ERROR', payload: null });
  };

  return (
    <VacationContext.Provider
      value={{
        state,
        fetchBalance,
        fetchRequests,
        submitRequest,
        cancelRequest,
        clearError
      }}
    >
      {children}
    </VacationContext.Provider>
  );
};

// No default export
</file>

<file path="src\hooks\useAuth.ts">
// src/hooks/useAuth.ts
import { useContext } from 'react';
import { AuthContext } from '../context/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Make sure to export both the context and the provider
export { AuthContext };
</file>

<file path="src\hooks\useChat.ts">
// src/hooks/useChat.ts
import { useContext } from 'react';
import { ChatContext } from '../context/ChatContext';

export const useChat = () => {
  const context = useContext(ChatContext);
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};

// Make sure to export both the context and the provider
</file>

<file path="src\hooks\useDocuments.ts">
// src/hooks/useDocuments.ts
import { useContext } from 'react';
import { DocumentContext } from '../context/DocumentContext';

export const useDocuments = () => {
  const context = useContext(DocumentContext);
  if (context === undefined) {
    throw new Error('useDocuments must be used within a DocumentProvider');
  }
  return context;
};
</file>

<file path="src\hooks\useVacation.ts">
// src/hooks/useVacation.ts
import { useContext } from 'react';
import { VacationContext } from '../context/VacationContext';


export const useVacation = () => {
  const context = useContext(VacationContext);
  if (context === undefined) {
    throw new Error('useVacation must be used within a VacationProvider');
  }
  return context;
};
</file>

<file path="src\pages\ChatPage.tsx">
// src/pages/ChatPage.tsx
import React, { useRef, useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Send, 
  Bot, 
  User, 
  FileText, 
  Calendar,
  AlertCircle,
  X
} from 'lucide-react';
import Layout from '../components/common/Layout';
import { useChat } from '../hooks/useChat';
import { useAuth } from '../hooks/useAuth';
import { useDocuments } from '../hooks/useDocuments';
import { ChatMessage } from '../types/chat';
import LoadingSpinner from '../components/common/LoadingSpinner';
import PageLoader from '../components/common/PageLoader';
import ContentSkeleton from '../components/common/ContentSkeleton';

import { DocumentChatMessage } from '../components/chat/DocumentMessage';

import DocumentUpload from '../components/documents/DocumentUpload';


const ChatPage = () => {
  const { user } = useAuth();
  const { state, sendMessage } = useChat();
  const { uploadDocument } = useDocuments();
  const [inputMessage, setInputMessage] = useState('');
  const [sendingMessage, setSendingMessage] = useState(false);
  const [showDocumentUpload, setShowDocumentUpload] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Quick action suggestions
  const quickActions = [
    {
      id: 'vacation',
      text: 'كيف يمكنني تقديم إجازة؟',
      icon: Calendar,
    },
    {
      id: 'document',
      text: 'مشاركة مستند',
      icon: FileText,
    },
    // Add more quick actions as needed
  ];

  useEffect(() => {
    scrollToBottom();
  }, [state.messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async (content: string) => {
    if (!content.trim() || sendingMessage) return;

    setSendingMessage(true);
    setInputMessage('');
    
    try {
      await sendMessage(content);
    } finally {
      setSendingMessage(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(inputMessage);
    }
  };

  const handleDocumentUpload = async (file: File) => {
    try {
      const response = await uploadDocument(file);
      await sendMessage(
        'تم مشاركة مستند',
        'document_upload',
        { document: response.document }
      );
      setShowDocumentUpload(false);
    } catch (error) {
      // Error is handled by the document context
    }
  };

  const renderMessage = (message: ChatMessage) => {
    switch (message.type) {
      case 'document_upload':
      case 'document_shared':
        return (
          <DocumentChatMessage
            message={message}
            onPreview={(documentId) => window.open(`/api/documents/${documentId}/preview`, '_blank')}
            onDownload={(documentId) => window.open(`/api/documents/${documentId}/download`)}
          />
        );
      default:
        return <div className="whitespace-pre-wrap">{message.content}</div>;
    }
  };

  if (state.isLoading && !state.messages.length) {
    return (
      <Layout>
        <PageLoader message="جاري تحميل المحادثة..." />
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="h-screen flex flex-col bg-gray-50">
        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto px-4 py-6">
          <div className="max-w-3xl mx-auto space-y-6">
            {/* Welcome Message */}
            {state.messages.length === 0 && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-center space-y-4"
              >
                <div className="w-20 h-20 mx-auto rounded-full bg-gradient-to-r from-primary-500 to-purple-500 flex items-center justify-center">
                  <Bot className="w-10 h-10 text-white" />
                </div>
                <h2 className="text-xl font-semibold">مرحباً {user?.name}</h2>
                <p className="text-gray-600">كيف يمكنني مساعدتك اليوم؟</p>
              </motion.div>
            )}

            {/* Message List */}
            <AnimatePresence>
              {state.messages.map((message) => (
                <motion.div
                  key={message.id}  // Use just message.id as the key
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`flex ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start gap-3 max-w-[80%]`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 
                      ${message.type === 'user' ? 'bg-primary-500' : 'bg-purple-500'}`}
                    >
                      {message.type === 'user' ? (
                        <User className="w-5 h-5 text-white" />
                      ) : (
                        <Bot className="w-5 h-5 text-white" />
                      )}
                    </div>
                    <div className={`flex flex-col ${message.type === 'user' ? 'items-end' : 'items-start'}`}>
                      <div className={`rounded-2xl px-4 py-2 ${
                        message.type === 'user' 
                          ? 'bg-primary-500 text-white' 
                          : 'bg-white border border-gray-200'
                      }`}>
                        {message.type === 'document_upload' || message.type === 'document_shared' ? (
                          <DocumentChatMessage
                            message={message}
                            onPreview={(documentId) => window.open(`/api/documents/${documentId}/preview`, '_blank')}
                            onDownload={(documentId) => window.open(`/api/documents/${documentId}/download`)}
                          />
                        ) : (
                          <div className="whitespace-pre-wrap">{message.content}</div>
                        )}
                      </div>
                      <div className="flex items-center gap-2 mt-1">
                        <span className="text-xs text-gray-500">
                          {new Date(message.timestamp).toLocaleTimeString('ar-SA', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </span>
                        {message.status === 'error' && (
                          <span className="text-red-500 text-xs flex items-center gap-1">
                            <AlertCircle className="w-3 h-3" />
                            فشل الإرسال
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>

            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Document Upload Area */}
        <AnimatePresence>
          {showDocumentUpload && (
            <motion.div
              initial={{ opacity: 0, y: 100 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 100 }}
              className="bg-white border-t"
            >
              <div className="max-w-3xl mx-auto p-4">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="font-medium">مشاركة مستند</h3>
                  <button 
                    onClick={() => setShowDocumentUpload(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>
                <DocumentUpload onUpload={handleDocumentUpload} />
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Quick Actions */}
        {state.messages.length === 0 && (
          <div className="bg-white border-t">
            <div className="max-w-3xl mx-auto px-4 py-4">
              <div className="flex flex-wrap gap-2">
                {quickActions.map((action) => (
                  <motion.button
                    key={action.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => {
                      if (action.id === 'document') {
                        setShowDocumentUpload(true);
                      } else {
                        handleSendMessage(action.text);
                      }
                    }}
                    className="px-4 py-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 
                             text-sm transition-colors flex items-center gap-2"
                  >
                    <action.icon className="w-4 h-4" />
                    {action.text}
                  </motion.button>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Input Area */}
        <div className="bg-white border-t">
          <div className="max-w-3xl mx-auto px-4 py-4">
            <div className="flex items-end gap-4">
              <div className="flex-1 bg-gray-100 rounded-2xl">
                <textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="اكتب رسالتك هنا..."
                  className="w-full bg-transparent border-none resize-none px-4 py-3 max-h-32 focus:ring-0 focus:outline-none"
                  rows={1}
                  dir="rtl"
                  disabled={sendingMessage}
                />
              </div>
              <button
                onClick={() => setShowDocumentUpload(true)}
                className="p-3 text-gray-500 hover:text-gray-700 rounded-full hover:bg-gray-100"
                title="مشاركة مستند"
              >
                <FileText className="w-5 h-5" />
              </button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => handleSendMessage(inputMessage)}
                disabled={!inputMessage.trim() || sendingMessage}
                className="flex-shrink-0 p-3 rounded-full bg-primary-500 text-white hover:bg-primary-600 
                         disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {sendingMessage ? (
                  <LoadingSpinner size="sm" color="white" />
                ) : (
                  <Send className="w-5 h-5" />
                )}
              </motion.button>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default ChatPage;
</file>

<file path="src\pages\DocumentPage.tsx">
// src/pages/DocumentPage.tsx

import React from 'react';
import Layout from '../components/common/Layout';
import DocumentUpload from '../components/documents/DocumentUpload';
import DocumentList from '../components/documents/DocumentList';
import { motion } from 'framer-motion';

const DocumentsPage: React.FC = () => {
  return (
    <Layout>
      <div className="container mx-auto p-4">
        <motion.h1
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-2xl font-bold mb-4"
        >
          إدارة المستندات
        </motion.h1>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <motion.h2
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="text-xl font-semibold mb-2"
            >
              رفع مستند جديد
            </motion.h2>
            <DocumentUpload />
          </div>
          <div>
            <motion.h2
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className="text-xl font-semibold mb-2"
            >
              قائمة المستندات
            </motion.h2>
            <DocumentList />
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default DocumentsPage;
</file>

<file path="src\pages\LandingPage.tsx">
// src/pages/LandingPage.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { MessageCircle, Shield, Zap, Users, ArrowLeft, ChevronLeft, CheckCircle, Bot, Calendar, User } from 'lucide-react';
import Layout from '../components/common/Layout';

// Feature component
interface Feature {
  title: string;
  description: string;
  icon: React.FC<{ className?: string }>;
  gradient: string;
}

const features: Feature[] = [
  {
    title: "دعم ذكي على مدار الساعة",
    description: "مساعد افتراضي متاح 24/7 للإجابة على جميع استفساراتك المتعلقة بالموارد البشرية",
    icon: Bot,
    gradient: "from-blue-500 to-cyan-500"
  },
  {
    title: "إدارة الإجازات",
    description: "نظام سهل لتقديم وتتبع طلبات الإجازة والاستعلام عن الأرصدة",
    icon: Calendar,
    gradient: "from-purple-500 to-pink-500"
  },
  {
    title: "معالجة فورية",
    description: "معالجة سريعة لجميع الطلبات والاستفسارات بدون تأخير",
    icon: Zap,
    gradient: "from-primary-500 to-yellow-500"
  },
  {
    title: "إدارة المعلومات",
    description: "الوصول السهل والآمن لجميع سياسات وإجراءات الموارد البشرية",
    icon: Shield,
    gradient: "from-green-500 to-teal-500"
  }
];

// Statistics component
interface Statistic {
  number: string;
  label: string;
  suffix: string;
}

const statistics: Statistic[] = [
  { number: "98", label: "رضا المستخدمين", suffix: "%" },
  { number: "50,000", label: "مستخدم نشط", suffix: "+" },
  { number: "24/7", label: "دعم متواصل", suffix: "" },
  { number: "15", label: "دقيقة متوسط وقت الاستجابة", suffix: "" }
];

// Testimonial component
interface Testimonial {
  content: string;
  author: string;
  position: string;
  company: string;
  imageUrl: string;
}

const testimonials: Testimonial[] = [
  {
    content: "نظام سهل الاستخدام وفعال جداً في تلبية احتياجات الموظفين. ساعد في تقليل وقت معالجة طلبات الموارد البشرية بشكل كبير.",
    author: "سارة الأحمد",
    position: "مدير الموارد البشرية",
    company: "شركة التقنية المتقدمة",
    imageUrl: "/api/placeholder/64/64"
  },
  {
    content: "المساعد الافتراضي ممتاز في الرد على استفسارات الموظفين. وفر علينا الكثير من الوقت والجهد.",
    author: "محمد العمري",
    position: "مدير التطوير التنظيمي",
    company: "مجموعة الابتكار",
    imageUrl: "/api/placeholder/64/64"
  }
];

const LandingPage = () => {
  return (
    <Layout>
      <Hero />
      <Features />
      <Benefits />
      <Statistics />
      <Testimonials />
      <CallToAction />
    </Layout>
  );
};

const Hero = () => {
  const navigate = useNavigate();

  return (
    <section className="relative overflow-hidden bg-gradient-to-br from-primary-50 via-white to-purple-50 pt-16 pb-32">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
        className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"
      >
        <div className="text-center">
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="text-5xl font-extrabold tracking-tight text-gray-900 sm:text-6xl md:text-7xl"
          >
            <span className="block text-transparent bg-clip-text bg-gradient-to-r from-primary-600 to-purple-600">
              مساعد الموارد البشرية الذكي
            </span>
            <span className="block text-gray-600 mt-3 text-3xl sm:text-4xl">
              إدارة شؤون الموظفين بذكاء وكفاءة
            </span>
          </motion.h1>
          
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="mt-6 max-w-2xl mx-auto text-xl text-gray-500"
          >
            نظام متكامل يجمع بين الذكاء الاصطناعي وأفضل ممارسات الموارد البشرية لتقديم تجربة سلسة للموظفين
          </motion.p>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
            className="mt-10 flex justify-center gap-4"
          >
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => navigate('/chat')}
              className="px-8 py-4 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium hover:shadow-lg transition-shadow flex items-center gap-2"
            >
              ابدأ المحادثة
              <MessageCircle className="w-5 h-5" />
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => navigate('/login')}
              className="px-8 py-4 rounded-full border-2 border-primary-500 text-primary-600 font-medium hover:bg-primary-50 transition-colors flex items-center gap-2"
            >
              تسجيل الدخول
              <User className="w-5 h-5" />
            </motion.button>
          </motion.div>
        </div>
      </motion.div>

      {/* Decorative Elements */}
      <motion.div
        animate={{
          rotate: 360,
          scale: [1, 1.2, 1],
        }}
        transition={{
          duration: 20,
          repeat: Infinity,
          ease: "linear"
        }}
        className="absolute right-0 top-1/4 w-72 h-72 bg-gradient-to-r from-primary-300/20 to-purple-300/20 rounded-full blur-3xl"
      />
      <motion.div
        animate={{
          rotate: -360,
          scale: [1, 1.5, 1],
        }}
        transition={{
          duration: 25,
          repeat: Infinity,
          ease: "linear"
        }}
        className="absolute left-0 bottom-1/4 w-96 h-96 bg-gradient-to-r from-purple-300/20 to-primary-300/20 rounded-full blur-3xl"
      />
    </section>
  );
};

const Features = () => {
  return (
    <section className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-gray-900">مميزات النظام</h2>
          <p className="mt-4 text-xl text-gray-600">كل ما تحتاجه لإدارة شؤون الموظفين في مكان واحد</p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              whileHover={{ y: -5 }}
              className="relative group"
            >
              <div className="bg-white rounded-2xl shadow-lg p-8 transition-shadow hover:shadow-xl border border-gray-100">
                <div className={`w-14 h-14 rounded-full bg-gradient-to-r ${feature.gradient} p-4 mb-6`}>
                  <feature.icon className="w-full h-full text-white" />
                </div>
                <h3 className="text-xl font-semibold mb-4">{feature.title}</h3>
                <p className="text-gray-600">{feature.description}</p>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const Benefits = () => {
  return (
    <section className="py-20 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-gray-900">لماذا تختارنا؟</h2>
          <p className="mt-4 text-xl text-gray-600">مزايا تجعل نظامنا الخيار الأمثل لمؤسستك</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {[
            "تحسين كفاءة عمليات الموارد البشرية",
            "تقليل الوقت المستغرق في المعاملات الروتينية",
            "تحسين تجربة الموظفين",
            "تقليل الأخطاء البشرية",
            "توفير البيانات والتقارير بشكل فوري",
            "تحسين عملية اتخاذ القرار"
          ].map((benefit, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, x: index % 2 === 0 ? -20 : 20 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              className="flex items-center gap-4 bg-white p-6 rounded-xl shadow-sm"
            >
              <CheckCircle className="w-6 h-6 text-primary-500 flex-shrink-0" />
              <span className="text-gray-700">{benefit}</span>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const Statistics = () => {
  const [isHovered, setIsHovered] = useState<number | null>(null);
  
  return (
    <section className="py-20 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {statistics.map((stat, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, scale: 0.5 }}
              whileInView={{ opacity: 1, scale: 1 }}
              viewport={{ once: true }}
              onHoverStart={() => setIsHovered(index)}
              onHoverEnd={() => setIsHovered(null)}
              className="text-center"
            >
              <motion.div
                animate={{
                  scale: isHovered === index ? 1.1 : 1,
                }}
                className="mb-4"
              >
                <span className="text-4xl font-bold bg-gradient-to-r from-primary-400 to-purple-400 bg-clip-text text-transparent">
                  {stat.number}
                </span>
                <span className="text-2xl font-bold text-primary-400">{stat.suffix}</span>
              </motion.div>
              <p className="text-gray-300">{stat.label}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const Testimonials = () => {
  return (
    <section className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-gray-900">ماذا يقول عملاؤنا</h2>
          <p className="mt-4 text-xl text-gray-600">تجارب حقيقية لعملائنا مع النظام</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {testimonials.map((testimonial, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className="bg-gray-50 rounded-2xl p-8 border border-gray-100"
            >
              <p className="text-gray-700 mb-6">{testimonial.content}</p>
              <div className="flex items-center gap-4">
                <img
                  src={testimonial.imageUrl}
                  alt={testimonial.author}
                  className="w-16 h-16 rounded-full"
                />
                <div>
                  <h4 className="font-semibold text-gray-900">{testimonial.author}</h4>
                  <p className="text-gray-600">{testimonial.position}</p>
                  <p className="text-gray-500 text-sm">{testimonial.company}</p>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const CallToAction = () => {
  const navigate = useNavigate();
  
  return (
    <section className="py-20 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="relative bg-gradient-to-r from-primary-500 to-purple-500 rounded-3xl overflow-hidden"
        >
          <div className="relative z-10 px-8 py-16 text-center text-white">
            <h2 className="text-3xl md:text-4xl font-bold mb-6">
              جاهز لتحسين إدارة الموارد البشرية في مؤسستك؟
            </h2>
            <p className="text-xl mb-8 text-white/90 max-w-2xl mx-auto">
              ابدأ اليوم واكتشف كيف يمكن لمساعدنا الذكي أن يساعدك في تحسين كفاءة عمليات الموارد البشرية
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => navigate('/chat')}
                className="bg-white text-primary-600 px-8 py-4 rounded-full font-medium hover:shadow-lg transition-shadow inline-flex items-center gap-2 justify-center"
              >
                ابدأ المحادثة
                <MessageCircle className="w-5 h-5" />
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => navigate('/login')}
                className="bg-transparent border-2 border-white text-white px-8 py-4 rounded-full font-medium hover:bg-white/10 transition-colors inline-flex items-center gap-2 justify-center"
              >
                معرفة المزيد
                <ChevronLeft className="w-5 h-5" />
              </motion.button>
            </div>
          </div>
          
          {/* Decorative background elements */}
          <div className="absolute top-0 left-0 right-0 bottom-0 opacity-10">
            <div className="absolute -left-20 -top-20 w-60 h-60 rounded-full bg-white" />
            <div className="absolute -right-20 -bottom-20 w-60 h-60 rounded-full bg-white" />
          </div>
        </motion.div>

        {/* Additional Features List */}
        <div className="mt-20 grid grid-cols-1 md:grid-cols-3 gap-8">
          {[
            {
              title: "دعم فني متميز",
              description: "فريق دعم متخصص جاهز لمساعدتك في أي وقت",
              icon: MessageCircle,
            },
            {
              title: "تحديثات مستمرة",
              description: "نظام يتطور باستمرار لتلبية احتياجاتك المتغيرة",
              icon: Zap,
            },
            {
              title: "أمان عالي",
              description: "حماية قصوى لبياناتك ومعلومات موظفيك",
              icon: Shield,
            },
          ].map((feature, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className="text-center"
            >
              <div className="inline-block p-3 bg-primary-100 rounded-full mb-4">
                <feature.icon className="w-6 h-6 text-primary-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {feature.title}
              </h3>
              <p className="text-gray-600">{feature.description}</p>
            </motion.div>
          ))}
        </div>

        {/* FAQ Section */}
        <div className="mt-20">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900">الأسئلة الشائعة</h2>
            <p className="mt-4 text-xl text-gray-600">إجابات على أكثر الأسئلة شيوعاً</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {[
              {
                question: "كيف يمكنني البدء باستخدام النظام؟",
                answer: "يمكنك البدء مباشرة بالتسجيل وإنشاء حساب جديد. بعد ذلك، سيقوم فريقنا بالتواصل معك لإكمال عملية الإعداد."
              },
              {
                question: "هل النظام آمن لحفظ بيانات الموظفين؟",
                answer: "نعم، نستخدم أحدث تقنيات التشفير وأنظمة الحماية لضمان أمان بياناتك ومعلومات موظفيك."
              },
              {
                question: "هل يمكن تخصيص النظام حسب احتياجاتنا؟",
                answer: "نعم، يمكن تخصيص النظام بالكامل ليتناسب مع احتياجات مؤسستك وسياساتها الخاصة."
              },
              {
                question: "كيف يمكنني الحصول على الدعم الفني؟",
                answer: "نوفر دعماً فنياً على مدار الساعة عبر المحادثة المباشرة والبريد الإلكتروني والهاتف."
              }
            ].map((faq, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                className="bg-white p-6 rounded-xl shadow-sm"
              >
                <h4 className="font-semibold text-gray-900 mb-2">{faq.question}</h4>
                <p className="text-gray-600">{faq.answer}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default LandingPage;
</file>

<file path="src\pages\LoginPage.tsx">
// src/pages/LoginPage.tsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { Eye, EyeOff, User, Lock, AlertCircle } from 'lucide-react';
import Layout from '../components/common/Layout';
import { useAuth } from '../context/AuthContext';

interface FormErrors {
  username?: string;
  password?: string;
  submit?: string;
}

const LoginPage = () => {
  const navigate = useNavigate();
  const { login, isAuthenticated } = useAuth();
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState<FormErrors>({});
  const [isLoading, setIsLoading] = useState(false);

  // Check if user is already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/chat');
    }
  }, [isAuthenticated, navigate]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    // Clear error when user starts typing
    if (errors[name as keyof FormErrors]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};
    if (!formData.username.trim()) {
      newErrors.username = 'اسم المستخدم مطلوب';
    }
    if (!formData.password) {
      newErrors.password = 'كلمة المرور مطلوبة';
    } else if (formData.password.length < 6) {
      newErrors.password = 'كلمة المرور يجب أن تكون 6 أحرف على الأقل';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
  
    setIsLoading(true);
    try {
      await login(formData.username, formData.password);
      navigate('/chat');
    } catch (error: any) {
      setErrors({
        submit: error.message || 'فشل تسجيل الدخول. يرجى التحقق من اسم المستخدم وكلمة المرور.',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout>
      <div className="min-h-screen pt-16 pb-12 flex flex-col bg-gradient-to-br from-primary-50 via-white to-purple-50">
        <div className="flex-grow flex items-center justify-center px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="max-w-md w-full"
          >
            <div className="bg-white/80 backdrop-blur-lg rounded-2xl shadow-xl p-8 border border-gray-100">
              <div className="text-center mb-8">
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="h-20 w-20 bg-gradient-to-r from-primary-500 to-purple-500 rounded-full mx-auto mb-4 flex items-center justify-center"
                >
                  <User className="h-10 w-10 text-white" />
                </motion.div>
                <h2 className="text-2xl font-bold text-gray-900">مرحباً بعودتك</h2>
                <p className="text-gray-600 mt-2">سجل دخولك للوصول إلى لوحة التحكم</p>
              </div>

              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Username Field */}
                <div>
                  <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-1">
                    اسم المستخدم
                  </label>
                  <div className="relative">
                    <input
                      id="username"
                      name="username"
                      type="text"
                      value={formData.username}
                      onChange={handleChange}
                      className={`block w-full px-4 py-3 rounded-lg bg-gray-50 border ${
                        errors.username ? 'border-red-500' : 'border-gray-200'
                      } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:bg-white transition-colors`}
                      dir="rtl"
                    />
                    {errors.username && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="mt-1 text-red-500 text-sm flex items-center gap-1"
                      >
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.username}</span>
                      </motion.div>
                    )}
                  </div>
                </div>

                {/* Password Field */}
                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                    كلمة المرور
                  </label>
                  <div className="relative">
                    <input
                      id="password"
                      name="password"
                      type={showPassword ? 'text' : 'password'}
                      value={formData.password}
                      onChange={handleChange}
                      className={`block w-full px-4 py-3 rounded-lg bg-gray-50 border ${
                        errors.password ? 'border-red-500' : 'border-gray-200'
                      } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:bg-white transition-colors`}
                      dir="rtl"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
                    >
                      {showPassword ? (
                        <EyeOff className="w-5 h-5" />
                      ) : (
                        <Eye className="w-5 h-5" />
                      )}
                    </button>
                    {errors.password && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="mt-1 text-red-500 text-sm flex items-center gap-1"
                      >
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.password}</span>
                      </motion.div>
                    )}
                  </div>
                </div>

                {errors.submit && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="text-red-500 text-sm text-center"
                  >
                    {errors.submit}
                  </motion.div>
                )}

                {/* Submit Button */}
                <motion.button
                  whileHover={{ scale: 1.01 }}
                  whileTap={{ scale: 0.99 }}
                  type="submit"
                  disabled={isLoading}
                  className="w-full py-3 px-4 rounded-lg bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium hover:shadow-lg transition-shadow disabled:opacity-70 disabled:cursor-not-allowed"
                >
                  {isLoading ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="w-5 h-5 border-2 border-white border-t-transparent rounded-full mx-auto"
                    />
                  ) : (
                    'تسجيل الدخول'
                  )}
                </motion.button>
              </form>
            </div>
          </motion.div>
        </div>
      </div>
    </Layout>
  );
};

export default LoginPage;
</file>

<file path="src\pages\VacationPage.tsx">
// src/pages/VacationPage.tsx

import React from 'react';
import Layout from '../components/common/Layout';
import VacationBalance from '../components/vacation/VacationBalance';
import VacationRequest from '../components/vacation/VacationRequest';
import { motion } from 'framer-motion';

const VacationPage: React.FC = () => {
  return (
    <Layout>
      <div className="container mx-auto p-4">
        <motion.h1
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-2xl font-bold mb-4"
        >
          إدارة الإجازات
        </motion.h1>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <motion.h2
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="text-xl font-semibold mb-2"
            >
              رصيد الإجازات
            </motion.h2>
            <VacationBalance />
          </div>
          <div>
            <motion.h2
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className="text-xl font-semibold mb-2"
            >
              طلب إجازة جديد
            </motion.h2>
            <VacationRequest />
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default VacationPage;
</file>

<file path="src\services\api.ts">
// src/services/api.ts
import axios, { AxiosInstance, AxiosError, AxiosResponse } from 'axios';

// Types
export interface ApiError {
  message: string;
  status?: number;
  details?: any;
}

export interface ApiResponse<T = any> {
  data: T;
  error?: ApiError;
}

class ApiService {
  private api: AxiosInstance;

  constructor() {
    this.api = axios.create({
      baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    // Response interceptor
    this.api.interceptors.response.use(
      (response: AxiosResponse) => response,
      (error: AxiosError) => {
        const apiError: ApiError = {
          message: 'حدث خطأ في الاتصال',
          status: error.response?.status,
        };

        if (error.response) {
          // Server responded with error
          const data = error.response.data as any;
          apiError.message = data.error || data.message || 'حدث خطأ في الخادم';
          apiError.details = data;
        } else if (error.request) {
          // Request made but no response
          apiError.message = 'لا يمكن الوصول إلى الخادم';
        }

        return Promise.reject(apiError);
      }
    );
  }

  // Generic GET request
  async get<T>(url: string, params?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.get<T>(url, { params });
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic POST request
  async post<T>(url: string, data?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.post<T>(url, data);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic PUT request
  async put<T>(url: string, data?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.put<T>(url, data);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic DELETE request
  async delete<T>(url: string): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.delete<T>(url);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Error handler
  private handleError(error: any): ApiError {
    if (error.status === 401) {
      // Handle unauthorized access
      // You might want to redirect to login or refresh token
      console.log('Unauthorized access');
    }
    return error;
  }

  // Get the underlying axios instance
  getInstance(): AxiosInstance {
    return this.api;
  }
}

// Export a singleton instance
export const apiService = new ApiService();
export default apiService;
</file>

<file path="src\services\auth.ts">
// src/services/auth.ts
import apiService from './api';
import { User } from '../types/api';

export interface LoginResponse {
  status: string;
  user: User;
}

export interface LoginCredentials {
  username: string;
  password: string;
}

class AuthService {
  async login(credentials: LoginCredentials): Promise<LoginResponse> {
    const response = await apiService.post<LoginResponse>('/api/auth/login', credentials);
    return response.data;
  }

  logout(): void {
    // Clear any stored auth data
    localStorage.removeItem('user');
  }
}

export const authService = new AuthService();
export default authService;
</file>

<file path="src\services\chat.ts">
// src/services/chat.ts

import apiService from './api';
import { ChatMessage, ChatResponse, MessageType } from '../types/chat';
import { API_ENDPOINTS } from '../constants';

class ChatService {
  async sendMessage(
    content: string,
    type: MessageType = 'text',
    metadata?: any,
    employee_id?: string
  ): Promise<ChatResponse> {
    const response = await apiService.post<ChatResponse>(API_ENDPOINTS.CHAT, {
      message: content,
      type,
      metadata,
      employee_id
    });
    return response.data;
  }

  async getChatHistory(employee_id: string): Promise<ChatMessage[]> {
    const response = await apiService.get<{ history: ChatMessage[] }>(
      `${API_ENDPOINTS.CHAT}/history/${employee_id}`
    );
    return response.data.history.map(msg => ({
      ...msg,
      timestamp: new Date(msg.timestamp)
    }));
  }

  async requestVacationBalance(employee_id: string): Promise<ChatResponse> {
    return this.sendMessage(
      'عرض رصيد الإجازات',
      'vacation_balance',
      { employee_id }
    );
  }

  async initiateVacationRequest(employee_id: string): Promise<ChatResponse> {
    return this.sendMessage(
      'تقديم طلب إجازة',
      'vacation_request',
      { employee_id }
    );
  }
}

export const chatService = new ChatService();
export default chatService;
</file>

<file path="src\services\documents.ts">
// src/services/documents.ts
import apiService from './api';
import { 
  DocumentMetadata,
  DocumentListResponse,
  DocumentUploadResponse,
  AllowedFileType 
} from '../types/documents';
import { API_ENDPOINTS } from '../constants';

class DocumentService {
  /**
   * Get list of documents
   */
  async getDocuments(): Promise<DocumentListResponse> {
    try {
      const response = await apiService.get<DocumentListResponse>(
        API_ENDPOINTS.DOCUMENTS
      );
      return response.data;
    } catch (error) {
      throw new Error( error instanceof Error ? error.message : 'حدث خطأ في جلب المستندات');
    }
  }

  /**
   * Upload a document
   */
  async uploadDocument(file: File): Promise<DocumentUploadResponse> {
    try {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('fileType', file.name.split('.').pop()?.toLowerCase() || '');

        // Use the raw axios instance to handle FormData
        const instance = apiService.getInstance();
        const response = await instance.post<DocumentUploadResponse>(
          API_ENDPOINTS.UPLOAD_DOCUMENT,
          formData,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
            }
          }
        );

        return response.data;

    } catch (error: any) {
        if (error.response && error.response.status === 400) {
            // Assuming backend sends error message in JSON format like { error: '...', message: '...' }
            const errorMessage = error.response.data.message || error.response.data.error || 'حدث خطأ أثناء رفع الملف';
            throw new Error(errorMessage);
          } else {
            throw new Error( error instanceof Error ? error.message : 'حدث خطأ في رفع المستند');
          }
    }
}

  /**
   * Download a document
   */
  async downloadDocument(documentId: string): Promise<Blob> {
      const response = await apiService.getInstance().get(
        `${API_ENDPOINTS.DOCUMENTS}/${documentId}/download`,
        {
          responseType: 'blob'
        }
      );
      return response.data;
  }

  /**
   * Delete a document
   */
  async deleteDocument(documentId: string): Promise<void> {
      await apiService.delete(`${API_ENDPOINTS.DOCUMENTS}/${documentId}`);
  }

  /**
   * Get download URL for a document
   */
  getDownloadUrl(documentId: string): string {
    return `${apiService.getInstance().defaults.baseURL}${API_ENDPOINTS.DOCUMENTS}/${documentId}/download`;
  }

  /**
   * Get preview URL for a document (PDF only)
   */
  getPreviewUrl(documentId: string): string {
    return `${apiService.getInstance().defaults.baseURL}${API_ENDPOINTS.DOCUMENTS}/${documentId}/preview`;
  }
}

export const documentService = new DocumentService();
export default documentService;
</file>

<file path="src\services\vacation.ts">
// src/services/vacation.ts

import apiService from './api';
import { 
  VacationBalance, 
  VacationRequest, 
  CreateVacationRequestPayload,
  VacationBalanceResponse,
  VacationRequestResponse,
  VacationRequestListResponse
} from '../types/vacation';
import { API_ENDPOINTS } from '../constants';

class VacationService {
  /**
   * Get vacation balance for an employee
   */
  async getBalance(employeeId: string): Promise<VacationBalanceResponse> {
    try {
      const response = await apiService.get<VacationBalanceResponse>(
        `${API_ENDPOINTS.VACATION_BALANCE}/${employeeId}`
      );
      return response.data;
    } catch (error) {
      throw new Error(error instanceof Error ? error.message : 'حدث خطأ في جلب رصيد الإجازات');
    }
  }

  /**
   * Submit a new vacation request
   */
  async submitRequest(request: CreateVacationRequestPayload): Promise<VacationRequestResponse> {
    try {
      const response = await apiService.post<VacationRequestResponse>(
        API_ENDPOINTS.VACATION_REQUEST,
        request
      );
      return response.data;
    } catch (error) {
        console.log('submitRequest error:', error); // added for debugging
      throw new Error(error instanceof Error ? error.message : 'حدث خطأ في تقديم طلب الإجازة');
    }
  }

  /**
   * Get list of vacation requests for an employee
   */
  async getRequests(employeeId: string): Promise<VacationRequestListResponse> {
    try {
      const response = await apiService.get<VacationRequestListResponse>(
        `${API_ENDPOINTS.VACATION_REQUEST}s/${employeeId}`
      );
      return response.data;
    } catch (error) {
      throw new Error(error instanceof Error ? error.message : 'حدث خطأ في جلب طلبات الإجازة');
    }
  }

  /**
   * Cancel a vacation request
   */
  async cancelRequest(requestId: string): Promise<VacationRequestResponse> {
    try {
      const response = await apiService.post<VacationRequestResponse>(
        `${API_ENDPOINTS.VACATION_REQUEST}/${requestId}/cancel`
      );
      return response.data;
    } catch (error) {
      throw new Error(error instanceof Error ? error.message : 'حدث خطأ في إلغاء طلب الإجازة');
    }
  }
}

export const vacationService = new VacationService();
export default vacationService;
</file>

<file path="src\types\api.ts">
// src/types/api.ts
export interface ApiResponse<T = any> {
    data: T;
    error?: ApiError;
  }
  
  export interface ApiError {
    message: string;
    status?: number;
    details?: any;
  }
  
  // Chat Types
  export interface ChatMessage {
    id: string;
    content: string;
    type: 'user' | 'bot';
    timestamp: Date;
    status: 'sending' | 'sent' | 'error';
  }
  
  export interface ChatResponse {
    response: string;
    timestamp: string;
  }
  
  // Vacation Types
  export interface VacationBalance {
    status: string;
    employee_id: string;
    name: string;
    annual_balance: number;
    used_days: number;
    remaining_balance: number;
    last_updated: string;
  }
  
  export interface VacationRequest {
    employee_id: string;
    start_date: string;
    end_date: string;
    request_type: string;
    notes?: string;
  }
  
  export interface VacationRequestResponse {
    status: string;
    message: string;
    ticket_id: string;
  }
  
  // Document Types
  export interface Document {
    name: string;
    size: number;
    uploaded: string;
  }
  
  export interface UploadResponse {
    message: string;
    filename: string;
  }
  
  // User Types
  export interface User {
    id: string;
    name: string;
    role: string;
    employee_id?: string;
  }
  
  // Auth Types
  export interface LoginCredentials {
    username: string;
    password: string;
  }
  
  export interface AuthResponse {
    user: User;
    token: string;
  }
</file>

<file path="src\types\chat.ts">
// src/types/chat.ts

import { VacationRequest, VacationBalance } from './vacation';
import { DocumentMetadata } from './documents';



export type MessageType = 
  | 'text'
  | 'vacation_request'
  | 'vacation_balance'
  | 'document_upload'
  | 'document_shared';

  export interface MessageBase {
    id: string;  // Ensure this exists
    type: MessageType;
    content: string;
    timestamp: Date;
    status: 'sending' | 'sent' | 'error';
  }

export interface TextMessage extends MessageBase {
  type: 'text';
}

export interface VacationRequestMessage extends MessageBase {
  type: 'vacation_request';
  metadata: {
    request: VacationRequest;
  };
}

export interface VacationBalanceMessage extends MessageBase {
  type: 'vacation_balance';
  metadata: {
    balance: VacationBalance;
  };
}

export interface VacationStatusMessage extends MessageBase {
  type: 'vacation_status';
  metadata: {
    requestId: string;
    status: string;
  };
}

export type ChatMessage = 
  | TextMessage 
  | VacationRequestMessage 
  | VacationBalanceMessage 
  | VacationStatusMessage;

export interface ChatResponse {
  response: string;
  type: MessageType;
  metadata?: any;
  timestamp: string;
}

export interface DocumentMessage extends MessageBase {
    type: 'document_upload' | 'document_shared';
    metadata: {
      document: DocumentMetadata;
    };
  }
</file>

<file path="src\types\documents.ts">
// src/types/documents.ts

/**
 * Document statuses
 */
export type DocumentStatus = 'processing' | 'active' | 'error';

/**
 * Allowed file types
 */
export type AllowedFileType = 'pdf' | 'docx' | 'doc' | 'txt';

/**
 * Document metadata
 */
export interface DocumentMetadata {
  id: string;
  title: string;
  fileType: AllowedFileType;
  size: number;
  uploadedBy: string;
  uploadedAt: string;
  status: DocumentStatus;
  lastModified?: string;
}

/**
 * Document list response
 */
export interface DocumentListResponse {
  documents: DocumentMetadata[];
  totalCount: number;
}

/**
 * Document upload response
 */
export interface DocumentUploadResponse {
  document: DocumentMetadata;
  message: string;
}

/**
 * Document service errors
 */
export interface DocumentError {
  code: string;
  message: string;
  details?: any;
}
</file>

<file path="src\types\vacation.ts">
// src/types/vacation.ts

/**
 * Vacation request status types
 */
export type VacationRequestStatus = 'pending' | 'approved' | 'rejected' | 'cancelled';

/**
 * Vacation request types
 */
export type VacationRequestType = 'annual' | 'sick' | 'emergency';

/**
 * Vacation balance information
 */
export interface VacationBalance {
  employee_id: string;
  name: string;
  annual_balance: number;
  used_days: number;
  remaining_balance: number;
  last_updated: string;
}

/**
 * Vacation request form data
 */
export interface VacationRequestFormData {
  startDate: string;
  endDate: string;
  requestType: VacationRequestType;
  notes?: string;
}

/**
 * Vacation request data
 */
export interface VacationRequest {
  id: string;
  employee_id: string;
  start_date: string;
  end_date: string;
  request_type: VacationRequestType;
  status: VacationRequestStatus;
  notes?: string;
  created_at: string;
  updated_at: string;
}

/**
 * Vacation request creation payload
 */
export interface CreateVacationRequestPayload {
  employee_id: string;
  start_date: string;
  end_date: string;
  request_type: VacationRequestType;
  notes?: string;
}

/**
 * Vacation service responses
 */
export interface VacationBalanceResponse {
  status: string;
  data: VacationBalance;
}

export interface VacationRequestResponse {
  status: string;
  data: VacationRequest;
}

export interface VacationRequestListResponse {
  status: string;
  data: VacationRequest[];
}
</file>

<file path="src\utils\data.ts">
// src/utils/date.ts
export const formatDate = (date: string | Date): string => {
  const d = new Date(date);
  return d.toLocaleDateString('ar-SA', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

export const formatTime = (date: string | Date): string => {
  const d = new Date(date);
  return d.toLocaleTimeString('ar-SA', {
    hour: '2-digit',
    minute: '2-digit',
  });
};

export const calculateDaysBetween = (startDate: string, endDate: string): number => {
  const start = new Date(startDate);
  const end = new Date(endDate);

  // Ignore time and set start date to beginning of the day
  start.setHours(0, 0, 0, 0);
  end.setHours(0, 0, 0, 0);

  const diffTime = Math.abs(end.getTime() - start.getTime());
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};
</file>

<file path="src\utils\errors.ts">
// src/utils/errors.ts
import { ApiError } from '../types/api';

export const getErrorMessage = (error: ApiError | unknown): string => {
  if (typeof error === 'string') {
    return error;
  }

  if ((error as ApiError)?.message) {
    return (error as ApiError).message;
  }

  return 'حدث خطأ غير متوقع';
};

export const isApiError = (error: any): error is ApiError => {
  return error && typeof error === 'object' && 'message' in error;
};

// src/utils/storage.ts
export const storage = {
  getToken: (): string | null => {
    return localStorage.getItem('token');
  },

  setToken: (token: string): void => {
    localStorage.setItem('token', token);
  },

  removeToken: (): void => {
    localStorage.removeItem('token');
  },

  getUser: (): any | null => {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  },

  setUser: (user: any): void => {
    localStorage.setItem('user', JSON.stringify(user));
  },

  removeUser: (): void => {
    localStorage.removeItem('user');
  },

  clear: (): void => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
};
</file>

<file path="src\utils\storage.ts">
// src/utils/storage.ts
export const storage = {
  getUser: (): any | null => {
    const user = localStorage.getItem('user');
    if (!user) return null;
    
    try {
      const parsed = JSON.parse(user);
      if (parsed.messages) {
        parsed.messages = parsed.messages.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        }));
      }
      return parsed;
    } catch (e) {
      console.error('Error parsing user data:', e);
      return null;
    }
  },

  setUser: (user: any): void => {
    localStorage.setItem('user', JSON.stringify(user));
  },

  removeUser: (): void => {
    localStorage.removeItem('user');
  },

  clear: (): void => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
};
</file>

<file path="src\utils\validation.ts">
// src/utils/validation.ts
export interface ValidationError {
  [key: string]: string;
}

export const validateVacationRequest = (
  startDate: string,
  endDate: string,
  balance: number
): ValidationError => {
  const errors: ValidationError = {};
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const start = new Date(startDate);
  const end = new Date(endDate);

  if (start < today) {
    errors.startDate = 'لا يمكن اختيار تاريخ في الماضي';
  }

  if (end < start) {
    errors.endDate = 'تاريخ النهاية يجب أن يكون بعد تاريخ البداية';
  }

  const days = calculateDaysBetween(startDate, endDate);
  if (days > balance) {
    errors.general = 'عدد الأيام المطلوبة يتجاوز الرصيد المتاح';
  }

  return errors;
};

export const validateLoginCredentials = (
  username: string,
  password: string
): ValidationError => {
  const errors: ValidationError = {};

  if (!username.trim()) {
    errors.username = 'اسم المستخدم مطلوب';
  }

  if (!password) {
    errors.password = 'كلمة المرور مطلوبة';
  } else if (password.length < 6) {
    errors.password = 'كلمة المرور يجب أن تكون 6 أحرف على الأقل';
  }

  return errors;
};
</file>

</repository_files>
