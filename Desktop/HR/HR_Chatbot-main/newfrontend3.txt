<summary>

<header>
RepopackPy Output File
This file was generated by RepopackPy on: 2025-01-30T19:33:06.016838
</header>

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository structure
3. Repository files, each consisting of:
    - File path as an attribute
    - Full contents of the file
</file_format>

<usage_guidelines>
1. This file should be treated as read-only. Any changes should be made to the
    original repository files, not this packed version.
2. When processing this file, use the file path attributes to distinguish
    between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
    the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation.
</notes>

<additional_info>
For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py
</additional_info>

</summary>

<repository_structure>
README.md
eslint.config.js
index.html
package.json
postcss.config.js
src\App.css
src\App.tsx
src\assets\background.webp
src\assets\أخصائية مشتريات وعقود مرام الحميد .png
src\assets\أخصائية مشتريات وعقود مرام الحميد_.png
src\assets\حاسبة المشتريات
src\assets\نماذج التأهيل مستوى 1-2-3 (1).xlsx
src\assets\نماذج التأهيل مستوى 1-2-3.xlsx
src\components\chat\DocumentMessage.tsx
src\components\chat\VacationMessage.tsx
src\components\chat\a
src\components\common\ContentSkeleton.tsx
src\components\common\ErrorBoundary.tsx
src\components\common\ErrorDisplay.tsx
src\components\common\Layout.tsx
src\components\common\LoadingSpinner.tsx
src\components\common\PageLoader.tsx
src\components\common\ProtectedRoute.tsx
src\components\documents\DocumentList.tsx
src\components\documents\DocumentUpload.tsx
src\components\landing\FeatureCard.tsx
src\components\landing\Features.tsx
src\components\landing\Hero.tsx
src\components\vacation\VacationBalance.tsx
src\components\vacation\VacationRequest.tsx
src\constants\index.ts
src\context\AuthContext.tsx
src\context\ChatContext.tsx
src\context\DocumentContext.tsx
src\context\TicketContext.tsx
src\context\VacationContext.tsx
src\hooks\useAuth.ts
src\hooks\useChat.ts
src\hooks\useDocuments.ts
src\hooks\useTickets.ts
src\hooks\useVacation.ts
src\index.css
src\main.tsx
src\pages\ChatPage.tsx
src\pages\DocumentPage.tsx
src\pages\LandingPage.tsx
src\pages\LoginPage.tsx
src\pages\TicketsPage.tsx
src\pages\VacationPage.tsx
src\services\api.ts
src\services\auth.ts
src\services\chat.ts
src\services\documents.ts
src\services\tickets.ts
src\services\vacation.ts
src\types\api.ts
src\types\chat.ts
src\types\documents.ts
src\types\tickets.ts
src\types\vacation.ts
src\utils\data.ts
src\utils\errors.ts
src\utils\storage.ts
src\utils\validation.ts
src\vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</repository_structure>

<repository_files>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc --noEmit && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.9",
    "framer-motion": "^11.15.0",
    "lucide-react": "^0.468.0",
    "postcss": "^8.4.49",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.1",
    "tailwindcss": "^3.4.16"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/axios": "^0.9.36",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@types/react-router-dom": "^5.3.3",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.15.0",
    "vite": "^6.0.1"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```
</file>

<file path="tailwind.config.js">
// tailwind.config.js
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
        },
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  // "compilerOptions": {
  //   "target": "esnext",
  //   "module": "esnext",
  //   "jsx": "react-jsx",
  //   "strict": true,
  //   "esModuleInterop": true,
  //   "skipLibCheck": true,
  //   "moduleResolution": "node",
  //   "allowSyntheticDefaultImports": true
  // }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  
})
</file>

<file path="src\App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src\App.tsx">
// src/App.tsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import { ChatProvider } from './context/ChatContext';
import { VacationProvider } from './context/VacationContext';
import { DocumentProvider } from './context/DocumentContext';
import { TicketProvider } from './context/TicketContext';

import LandingPage from './pages/LandingPage';
import LoginPage from './pages/LoginPage';
import ChatPage from './pages/ChatPage';
import ProtectedRoute from './components/common/ProtectedRoute';
import ErrorBoundary from './components/common/ErrorBoundary';
import DocumentPage from './pages/DocumentPage';
import VacationPage from './pages/VacationPage';
import TicketsPage from './pages/TicketsPage';

const App = () => {
  return (
    <Router>
      <ErrorBoundary>
        <AuthProvider>
          <ChatProvider>
            <VacationProvider>
              <DocumentProvider>
                <TicketProvider>
                  <Routes>
                    <Route path="/" element={<LandingPage />} />
                    <Route path="/login" element={<LoginPage />} />
                    <Route
                      path="/documents"
                      element={
                        <ProtectedRoute requiredRole="admin">
                          <DocumentPage />
                        </ProtectedRoute>
                      }
                    />
                    <Route path="/vacation" element={<VacationPage />} />
                    <Route
                      path="/tickets"
                      element={
                        <ProtectedRoute requiredRole="admin">
                          <TicketsPage />
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/chat"
                      element={
                        <ProtectedRoute>
                          <ErrorBoundary>
                            <ChatPage />
                          </ErrorBoundary>
                        </ProtectedRoute>
                      }
                    />
                  </Routes>
                </TicketProvider>
              </DocumentProvider>
            </VacationProvider>
          </ChatProvider>
        </AuthProvider>
      </ErrorBoundary>
    </Router>
  );
};

export default App;
</file>

<file path="src\index.css">
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gray-50 text-gray-900;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-lg font-medium transition-colors;
  }
  
  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-700;
  }
}

.rtl {
  direction: rtl;
  text-align: right;
}

.rtl select {
  background-position: left 0.5rem center;
  padding-right: 0.75rem;
  padding-left: 2rem;
}

.rtl .select-wrapper {
  position: relative;
}

.rtl .select-wrapper::after {
  left: 0.75rem;
  right: auto;
}

@media (max-width: 768px) {
  .container {
    padding-bottom: 60px;
  }
}
</file>

<file path="src\main.tsx">
// src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

// Set the HTML dir attribute to RTL
document.documentElement.dir = 'rtl'
document.documentElement.lang = 'ar'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
</file>

<file path="src\vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="src\components\chat\a">
import React from 'react';
import { motion } from 'framer-motion';
import { Calendar, ArrowRight, Clock, FileText } from 'lucide-react';
import { VacationAction } from '../types/chat';

interface VacationActionButtonProps {
  action: VacationAction;
  onClick: () => void;
  className?: string;
}

const VacationActionButton = ({ action, onClick, className = '' }: VacationActionButtonProps) => {
  const getIcon = () => {
    switch (action) {
      case 'view_balance':
        return Clock;
      case 'request_vacation':
        return Calendar;
      case 'view_requests':
        return FileText;
      case 'goto_vacation_page':
        return ArrowRight;
      default:
        return Calendar;
    }
  };

  const getLabel = () => {
    switch (action) {
      case 'view_balance':
        return 'عرض الرصيد';
      case 'request_vacation':
        return 'طلب إجازة';
      case 'view_requests':
        return 'الطلبات السابقة';
      case 'goto_vacation_page':
        return 'صفحة الإجازات';
      default:
        return '';
    }
  };

  const Icon = getIcon();

  return (
    <motion.button
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      onClick={onClick}
      className={`inline-flex items-center gap-2 px-4 py-2 bg-primary-50 text-primary-600 
                 rounded-lg hover:bg-primary-100 transition-colors ${className}`}
    >
      <Icon className="w-4 h-4" />
      {getLabel()}
    </motion.button>
  );
};

export default VacationActionButton;
</file>

<file path="src\components\chat\DocumentMessage.tsx">
// src/components/chat/DocumentMessage.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { FileText, Download, Eye } from 'lucide-react';
import { DocumentMessage } from '../../types/chat';
import { formatDate } from '../../utils/data';

interface DocumentChatMessageProps {
  message: DocumentMessage;
  onPreview?: (documentId: string) => void;
  onDownload?: (documentId: string) => void;
}

export const DocumentChatMessage: React.FC<DocumentChatMessageProps> = ({
  message,
  onPreview,
  onDownload
}) => {
  const { document } = message.metadata;
  const fileSize = (document.size / 1024 / 1024).toFixed(2);

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden max-w-sm"
    >
      <div className="p-4">
        <div className="flex items-start gap-3">
          <div className="p-2 bg-primary-50 rounded-lg">
            <FileText className="w-6 h-6 text-primary-600" />
          </div>
          <div className="flex-1 min-w-0">
            <p className="font-medium text-gray-900 truncate">{document.title}</p>
            <p className="text-sm text-gray-500">
              {fileSize} MB · {document.fileType.toUpperCase()}
            </p>
          </div>
        </div>
        
        <div className="mt-4 flex items-center justify-between">
          <span className="text-xs text-gray-500">
            {formatDate(document.uploadedAt)}
          </span>
          <div className="flex gap-2">
            {document.fileType === 'pdf' && (
              <button
                onClick={() => onPreview?.(document.id)}
                className="p-1 text-gray-400 hover:text-primary-600 transition-colors"
                title="معاينة"
              >
                <Eye className="w-5 h-5" />
              </button>
            )}
            <button
              onClick={() => onDownload?.(document.id)}
              className="p-1 text-gray-400 hover:text-primary-600 transition-colors"
              title="تحميل"
            >
              <Download className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default DocumentChatMessage;
</file>

<file path="src\components\chat\VacationMessage.tsx">
// src/components/chat/VacationMessage.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { Calendar, Clock, CheckCircle, XCircle } from 'lucide-react';
import { VacationRequestMessage, VacationBalanceMessage, VacationStatusMessage } from '../../types/chat';
import { formatDate } from '../../utils/data';

interface VacationMessageProps {
  message: VacationRequestMessage | VacationBalanceMessage | VacationStatusMessage;
  onAction?: (action: string) => void;
}

export const VacationMessage: React.FC<VacationMessageProps> = ({ message, onAction }) => {
  switch (message.type) {
    case 'vacation_balance':
      return (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-lg shadow-sm p-4 max-w-sm"
        >
          <div className="text-lg font-semibold mb-2">رصيد الإجازات</div>
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-gray-600">الرصيد السنوي:</span>
              <span className="font-medium">{message.metadata.balance.annual_balance} يوم</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">المستخدم:</span>
              <span className="font-medium">{message.metadata.balance.used_days} يوم</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">المتبقي:</span>
              <span className="font-medium text-primary-600">
                {message.metadata.balance.remaining_balance} يوم
              </span>
            </div>
          </div>
          <button
            onClick={() => onAction?.('request_vacation')}
            className="mt-4 w-full py-2 px-4 bg-primary-50 text-primary-600 rounded-lg hover:bg-primary-100 transition-colors"
          >
            تقديم طلب إجازة
          </button>
        </motion.div>
      );

    case 'vacation_request':
      const request = message.metadata.request;
      return (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-lg shadow-sm p-4 max-w-sm"
        >
          <div className="text-lg font-semibold mb-2">طلب إجازة</div>
          <div className="space-y-2">
            <div className="flex items-center gap-2 text-gray-600">
              <Calendar className="w-4 h-4" />
              <span>
                {formatDate(request.start_date)} - {formatDate(request.end_date)}
              </span>
            </div>
            <div className="flex items-center gap-2 text-gray-600">
              <Clock className="w-4 h-4" />
              <span>نوع الإجازة: {request.request_type}</span>
            </div>
          </div>
          <div className="mt-4 flex gap-2">
            <button
              onClick={() => onAction?.('confirm_request')}
              className="flex-1 py-2 px-4 bg-primary-50 text-primary-600 rounded-lg hover:bg-primary-100 transition-colors"
            >
              تأكيد
            </button>
            <button
              onClick={() => onAction?.('cancel_request')}
              className="flex-1 py-2 px-4 bg-gray-50 text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
            >
              إلغاء
            </button>
          </div>
        </motion.div>
      );

    case 'vacation_status':
      return (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className={`rounded-lg p-4 ${
            message.metadata.status === 'approved' 
              ? 'bg-green-50 text-green-700'
              : 'bg-red-50 text-red-700'
          }`}
        >
          <div className="flex items-center gap-2">
            {message.metadata.status === 'approved' ? (
              <CheckCircle className="w-5 h-5" />
            ) : (
              <XCircle className="w-5 h-5" />
            )}
            <span>{message.content}</span>
          </div>
        </motion.div>
      );

    default:
      return null;
  }
};

export default VacationMessage;
</file>

<file path="src\components\common\ContentSkeleton.tsx">
// src/components/common/ContentSkeleton.tsx
import React from 'react';
import { motion } from 'framer-motion';

interface SkeletonProps {
  className?: string;
}

const Skeleton: React.FC<SkeletonProps> = ({ className = '' }) => (
  <motion.div
    initial={{ opacity: 0.5 }}
    animate={{ opacity: 1 }}
    transition={{
      repeat: Infinity,
      repeatType: "reverse",
      duration: 1
    }}
    className={`bg-gray-200 rounded ${className}`}
  />
);

interface ContentSkeletonProps {
  type?: 'message' | 'card' | 'list';
  count?: number;
}

export const ContentSkeleton: React.FC<ContentSkeletonProps> = ({ 
  type = 'message',
  count = 1 
}) => {
  const renderMessageSkeleton = () => (
    <div className="flex gap-3 w-full">
      <Skeleton className="w-8 h-8 rounded-full flex-shrink-0" />
      <div className="flex-1 space-y-2">
        <Skeleton className="h-4 w-3/4" />
        <Skeleton className="h-4 w-1/2" />
      </div>
    </div>
  );

  const renderCardSkeleton = () => (
    <div className="p-4 border rounded-lg space-y-4">
      <Skeleton className="h-6 w-3/4" />
      <div className="space-y-2">
        <Skeleton className="h-4 w-full" />
        <Skeleton className="h-4 w-5/6" />
        <Skeleton className="h-4 w-4/6" />
      </div>
    </div>
  );

  const renderListSkeleton = () => (
    <div className="space-y-2">
      <Skeleton className="h-4 w-full" />
      <Skeleton className="h-4 w-5/6" />
      <Skeleton className="h-4 w-4/6" />
    </div>
  );

  const renderSkeleton = () => {
    switch (type) {
      case 'card':
        return renderCardSkeleton();
      case 'list':
        return renderListSkeleton();
      default:
        return renderMessageSkeleton();
    }
  };

  return (
    <div className="space-y-4">
      {Array.from({ length: count }).map((_, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1 }}
        >
          {renderSkeleton()}
        </motion.div>
      ))}
    </div>
  );
};

export default ContentSkeleton;
</file>

<file path="src\components\common\ErrorBoundary.tsx">
// src/components/common/ErrorBoundary.tsx
import React, { Component, ErrorInfo } from 'react';
import ErrorDisplay from './ErrorDisplay';

interface Props {
  children: React.ReactNode;
  fallback?: React.ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null
    };
  }

  static getDerivedStateFromError(error: Error): State {
    return {
      hasError: true,
      error
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
    this.props.onError?.(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return <ErrorDisplay error={this.state.error} onReset={() => this.setState({ hasError: false, error: null })} />;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
</file>

<file path="src\components\common\ErrorDisplay.tsx">
// src/components/common/ErrorDisplay.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { AlertCircle, RefreshCcw, Home } from 'lucide-react';
import { useNavigate, useLocation } from 'react-router-dom';

interface ErrorDisplayProps {
  error: Error | null;
  onReset?: () => void;
  fullPage?: boolean;
}

const ErrorDisplay: React.FC<ErrorDisplayProps> = ({ error, onReset, fullPage = false }) => {
  const navigate = useNavigate();
  const location = useLocation();

  const handleReset = () => {
    onReset?.();
  };

  const getErrorMessage = (error: Error | null): string => {
    if (!error) return 'حدث خطأ غير متوقع';

    if (error.message.includes('Network Error')) {
      return 'تعذر الاتصال بالخادم. يرجى التحقق من اتصال الإنترنت الخاص بك.';
    }

    if (error.message.includes('401')) {
      return 'انتهت صلاحية الجلسة. يرجى تسجيل الدخول مرة أخرى.';
    }

    return error.message || 'حدث خطأ غير متوقع';
  };

  const content = (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`bg-white rounded-lg shadow-lg p-6 ${fullPage ? 'max-w-lg mx-auto' : ''}`}
    >
      <div className="flex items-center justify-center w-12 h-12 mx-auto mb-4 bg-red-100 rounded-full">
        <AlertCircle className="w-6 h-6 text-red-600" />
      </div>

      <h3 className="mb-2 text-lg font-semibold text-center text-gray-900">
        عذراً! حدث خطأ
      </h3>

      <p className="text-center text-gray-600 mb-6">
        {getErrorMessage(error)}
      </p>

      <div className="flex flex-col sm:flex-row gap-3 justify-center">
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={handleReset}
          className="inline-flex items-center justify-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors gap-2"
        >
          <RefreshCcw className="w-4 h-4" />
          إعادة المحاولة
        </motion.button>

        {/* Only show "Home" button if within Router context */}
        {location && (
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => navigate('/')}
            className="inline-flex items-center justify-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors gap-2"
          >
            <Home className="w-4 h-4" />
            العودة للرئيسية
          </motion.button>
        )}
      </div>
    </motion.div>
  );

  if (fullPage) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">
        {content}
      </div>
    );
  }

  return content;
};

export default ErrorDisplay;
</file>

<file path="src\components\common\Layout.tsx">
import React, { useState, useEffect } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion'; // Added AnimatePresence import
import { 
  Menu, 
  X, 
  User, 
  LogOut,
  MessageSquare,
  Bot,
  FileText,
  Ticket
} from 'lucide-react';
import { useAuth } from '../../hooks/useAuth';

const Layout = ({ children }: { children: React.ReactNode }) => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const location = useLocation();
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const isAdmin = user?.role === 'admin';
  const isOnChatPage = location.pathname === '/chat';

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const navigateToChat = () => {
    if (!isOnChatPage) {
      navigate('/chat');
    }
  };

  // Navigation items based on user role
  const getNavigationItems = () => {
    const items = [
      { href: '/', label: 'الرئيسية', isActive: location.pathname === '/' }
    ];

    if (isAdmin) {
      items.push(
        { 
          href: '/documents', 
          label: 'المستندات', 
          isActive: location.pathname === '/documents' 
        },
        { 
          href: '/tickets', 
          label: 'التذاكر', 
          isActive: location.pathname === '/tickets' 
        }
      );
    }

    return items;
  };

  const navigationItems = getNavigationItems();

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <motion.nav
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        className={`fixed w-full z-50 transition-all duration-300 ${
          isScrolled ? 'bg-white/80 backdrop-blur-md shadow-lg' : 'bg-transparent'
        }`}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            {/* Logo */}
            <motion.div
              className="flex-shrink-0"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Link to="/" className="flex items-center space-x-2 space-x-reverse">
                <div className="w-10 h-10 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 flex items-center justify-center">
                  <span className="text-white text-xl font-bold">HR</span>
                </div>
                <span className="text-2xl font-bold bg-gradient-to-r from-primary-600 to-purple-600 bg-clip-text text-transparent">
                  روبوت الموارد البشرية
                </span>
              </Link>
            </motion.div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8 space-x-reverse">
              {navigationItems.map((item) => (
                <NavLink 
                  key={item.href}
                  href={item.href}
                  isActive={item.isActive}
                >
                  {item.label}
                </NavLink>
              ))}
              
              {/* Chat Button */}
              {user && !isOnChatPage && (
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={navigateToChat}
                  className="flex items-center gap-2 px-4 py-2 bg-primary-500 text-white rounded-full hover:bg-primary-600 transition-colors shadow-md hover:shadow-lg"
                >
                  <Bot className="w-5 h-5" />
                  <span>المساعد الافتراضي</span>
                </motion.button>
              )}

              {/* Login/Logout Button */}
              {user ? (
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={logout}
                  className="px-6 py-3 rounded-full border-2 border-primary-500 text-primary-600 font-medium hover:bg-primary-50 transition-colors flex items-center gap-2"
                >
                  <LogOut className="w-5 h-5" />
                  تسجيل الخروج
                </motion.button>
              ) : (
                <motion.div
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Link
                    to="/login"
                    className="px-6 py-3 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium hover:shadow-lg transition-shadow"
                  >
                    <User className="w-5 h-5 inline-block mr-2" />
                    تسجيل الدخول
                  </Link>
                </motion.div>
              )}
            </div>

            {/* Mobile Menu Button */}
            <div className="md:hidden">
              <button
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                className="text-gray-600 hover:text-gray-900"
              >
                {isMobileMenuOpen ? (
                  <X className="h-6 w-6" />
                ) : (
                  <Menu className="h-6 w-6" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Mobile Menu */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="md:hidden bg-white border-t"
            >
              <div className="px-4 py-2 space-y-1">
                {navigationItems.map((item) => (
                  <MobileNavLink
                    key={item.href}
                    href={item.href}
                    isActive={item.isActive}
                  >
                    {item.label}
                  </MobileNavLink>
                ))}
                
                {/* Mobile Chat Button */}
                {user && !isOnChatPage && (
                  <button
                    onClick={navigateToChat}
                    className="w-full flex items-center gap-2 px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors"
                  >
                    <Bot className="w-5 h-5" />
                    المساعد الافتراضي
                  </button>
                )}

                {/* Mobile Login/Logout Button */}
                {user ? (
                  <button
                    onClick={logout}
                    className="w-full flex items-center gap-2 px-4 py-2 border-2 border-primary-500 text-primary-600 rounded-lg hover:bg-primary-50 transition-colors"
                  >
                    <LogOut className="w-5 h-5" />
                    تسجيل الخروج
                  </button>
                ) : (
                  <Link
                    to="/login"
                    className="block w-full text-center px-4 py-2 bg-gradient-to-r from-primary-500 to-purple-500 text-white rounded-lg"
                  >
                    <User className="w-5 h-5 inline-block mr-2" />
                    تسجيل الدخول
                  </Link>
                )}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.nav>

      <main className="pt-20">{children}</main>
    </div>
  );
};

// Navigation Link Components
const NavLink = ({ href, children, isActive }: { href: string; children: React.ReactNode; isActive: boolean }) => (
  <Link
    to={href}
    className={`relative text-lg font-medium transition-colors ${
      isActive ? 'text-primary-600' : 'text-gray-600 hover:text-gray-900'
    }`}
  >
    {children}
    {isActive && (
      <motion.div
        layoutId="underline"
        className="absolute right-0 left-0 bottom-0 h-0.5 bg-primary-600"
      />
    )}
  </Link>
);

const MobileNavLink = ({ href, children, isActive }: { href: string; children: React.ReactNode; isActive: boolean }) => (
  <Link
    to={href}
    className={`block px-4 py-2 rounded-lg transition-colors ${
      isActive ? 'bg-primary-50 text-primary-600' : 'text-gray-600 hover:bg-gray-50'
    }`}
  >
    {children}
  </Link>
);

export default Layout;
</file>

<file path="src\components\common\LoadingSpinner.tsx">
// src/components/common/LoadingSpinner.tsx
import React from 'react';
import { motion } from 'framer-motion';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  color?: 'primary' | 'white' | 'gray';
  className?: string;
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ 
  size = 'md', 
  color = 'primary',
  className = ''
}) => {
  const sizeClasses = {
    sm: 'w-4 h-4 border-2',
    md: 'w-8 h-8 border-3',
    lg: 'w-12 h-12 border-4'
  };

  const colorClasses = {
    primary: 'border-primary-200 border-t-primary-600',
    white: 'border-white/30 border-t-white',
    gray: 'border-gray-200 border-t-gray-600'
  };

  return (
    <motion.div
      animate={{ rotate: 360 }}
      transition={{
        duration: 1,
        repeat: Infinity,
        ease: "linear"
      }}
      className={`
        rounded-full
        ${sizeClasses[size]}
        ${colorClasses[color]}
        ${className}
      `}
    />
  );
};

export default LoadingSpinner;
</file>

<file path="src\components\common\PageLoader.tsx">
// src/components/common/PageLoader.tsx
import React from 'react';
import { motion } from 'framer-motion';
import LoadingSpinner from './LoadingSpinner';

interface PageLoaderProps {
  message?: string;
  overlay?: boolean;
}

export const PageLoader: React.FC<PageLoaderProps> = ({ 
  message = 'جاري التحميل...',
  overlay = false 
}) => {
  const content = (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="flex flex-col items-center justify-center gap-4 p-4"
    >
      <LoadingSpinner size="lg" />
      {message && (
        <motion.p
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-gray-600 text-lg"
        >
          {message}
        </motion.p>
      )}
    </motion.div>
  );

  if (overlay) {
    return (
      <div className="fixed inset-0 bg-white/80 backdrop-blur-sm z-50 flex items-center justify-center">
        {content}
      </div>
    );
  }

  return (
    <div className="min-h-[400px] flex items-center justify-center">
      {content}
    </div>
  );
};

export default PageLoader;
</file>

<file path="src\components\common\ProtectedRoute.tsx">
// src/components/common/ProtectedRoute.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: string;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children, requiredRole }) => {
  const { isAuthenticated, isLoading, user } = useAuth();

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  if (requiredRole && user?.role !== requiredRole) {
    return <Navigate to="/" replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;
</file>

<file path="src\components\documents\DocumentList.tsx">
// DocumentList.tsx
import React, { useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  FileText, 
  Trash2, 
  Download, 
  AlertCircle
} from 'lucide-react';
import { useDocuments } from '../../hooks/useDocuments';
import { DocumentMetadata } from '../../types/documents';
import { formatDate } from '../../utils/data';
import ContentSkeleton from '../common/ContentSkeleton';

const DocumentList: React.FC = () => {
  const { state, fetchDocuments, deleteDocument } = useDocuments();

  useEffect(() => {
    fetchDocuments();
  }, []); // Fetch on component mount

  const handleDelete = async (documentId: string) => {
    try {
      await deleteDocument(documentId);
      // Refetch documents after successful deletion
      await fetchDocuments();
    } catch (error) {
      // Error is handled by the context
    }
  };

  // Show loading state while fetching
  if (state.isLoading && !state.documents.length) {
    return <ContentSkeleton type="list" count={5} />;
  }

  return (
    <div className="space-y-4">
      {/* Documents List */}
      {state.documents.length > 0 ? (
        <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
          {/* Table Header */}
          <div className="grid grid-cols-3 gap-4 px-4 py-3 bg-gray-50 border-b text-sm font-medium text-gray-500">
            <div>اسم الملف</div>
            <div>النوع</div>
            <div>إجراءات</div>
          </div>

          {/* Document Items */}
          {state.documents.map((doc) => (
            <motion.div
              key={doc.id}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="grid grid-cols-3 gap-4 px-4 py-3 border-b last:border-0 items-center hover:bg-gray-50"
            >
              {/* File Name */}
              <div className="flex items-center gap-3">
                <div className="p-2 bg-gray-100 rounded">
                  <FileText className="w-5 h-5" />
                </div>
                <div className="truncate">
                  <p className="font-medium text-gray-900 truncate">{doc.title}</p>
                  <p className="text-sm text-gray-500">
                    {(doc.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
              </div>

              {/* File Type */}
              <div>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
                  {doc.fileType ? doc.fileType.toUpperCase() : ''}
                </span>
              </div>

              {/* Actions */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => window.open(`/api/documents/${doc.id}/download`)}
                  className="p-1 text-gray-400 hover:text-gray-500"
                  title="تحميل"
                >
                  <Download className="w-5 h-5" />
                </button>

                <button
                  onClick={() => handleDelete(doc.id)}
                  className="p-1 text-gray-400 hover:text-red-500"
                  title="حذف"
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              </div>
            </motion.div>
          ))}
        </div>
      ) : (
        <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
          <div className="w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center">
            <FileText className="w-8 h-8 text-gray-400" />
          </div>
          <h3 className="mt-4 text-lg font-medium text-gray-900">لا توجد مستندات</h3>
          <p className="mt-2 text-gray-500">
            ابدأ برفع مستنداتك
          </p>
        </div>
      )}

      {/* Error Message */}
      {state.error && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          className="bg-red-50 text-red-600 p-4 rounded-lg flex items-center gap-2"
        >
          <AlertCircle className="w-5 h-5 flex-shrink-0" />
          <span>{state.error}</span>
        </motion.div>
      )}
    </div>
  );
};

export default DocumentList;
</file>

<file path="src\components\documents\DocumentUpload.tsx">
// src/components/documents/DocumentUpload.tsx
import React, { useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Upload, File, X, AlertCircle, CheckCircle, Loader2 } from 'lucide-react';
import { useDocuments } from '../../hooks/useDocuments';
import { AllowedFileType } from '../../types/documents';

const ALLOWED_TYPES: AllowedFileType[] = ['pdf', 'docx', 'doc', 'txt'];
const MAX_SIZE = 10 * 1024 * 1024; // 10MB

export const DocumentUpload: React.FC = () => {
  const { uploadDocument } = useDocuments();
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const validateFile = (file: File): string | null => {
    const fileType = file.name.split('.').pop()?.toLowerCase() as AllowedFileType;

    if (!ALLOWED_TYPES.includes(fileType)) {
      return 'نوع الملف غير مدعوم. الأنواع المدعومة هي: PDF، DOCX، DOC، TXT';
    }

    if (file.size > MAX_SIZE) {
      return 'حجم الملف يتجاوز الحد المسموح به (10 ميجابايت)';
    }

    return null;
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) {
      setUploadError('لم يتم اختيار ملف');
      return;
    }

    // Reset states
    setUploadError(null);
    setUploadSuccess(false);
    setSelectedFile(file);

    const error = validateFile(file);
    if (error) {
      setUploadError(error);
      setSelectedFile(null);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      setUploadError('لم يتم اختيار ملف');
      return;
    }

    setIsUploading(true);
    setUploadError(null);
    setUploadSuccess(false); // Reset success message

    try {
      await uploadDocument(selectedFile);
      setUploadSuccess(true); 
      setSelectedFile(null); // Clear the selected file
      if (fileInputRef.current) {
        fileInputRef.current.value = ''; // Reset file input
      }
    } catch (error: any) {
      let errorMessage = 'حدث خطأ في رفع الملف'; // Default error message

      // Check for specific error messages from the backend
      if (error.message.includes('نوع الملف غير مسموح به')) {
        errorMessage = 'نوع الملف غير مسموح به. الأنواع المدعومة هي: PDF، DOCX، DOC، TXT';
      } else if (error.message.includes('حجم الملف كبير جداً')) {
        errorMessage = 'حجم الملف يتجاوز الحد المسموح به (10 ميجابايت)';
      } else if (error.message.includes('لم يتم توفير ملف') || error.message.includes('لم يتم اختيار ملف')){
        errorMessage = 'الرجاء اختيار ملف صحيح';
      }

      setUploadError(errorMessage);
    } finally {
      setIsUploading(false);
    }
};

  const handleReset = () => {
    setSelectedFile(null);
    setUploadError(null);
    setUploadSuccess(false);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="space-y-4">
      {/* Upload Area */}
      <motion.div
        className={`
          relative border-2 border-dashed rounded-lg p-8
          transition-colors duration-200 ease-in-out
          border-gray-300
        `}
      >
        <input
          ref={fileInputRef}
          type="file"
          accept=".pdf,.docx,.doc,.txt"
          onChange={handleFileSelect}
          className="hidden"
        />

        <div className="flex flex-col items-center justify-center space-y-4">
          <div className="p-3 bg-primary-50 rounded-full">
            <Upload className="w-6 h-6 text-primary-600" />
          </div>
          <div className="text-center">
            <p className="text-gray-700 font-medium">قم بسحب وإفلات الملف هنا</p>
            <p className="text-gray-500 text-sm mt-1">أو</p>
            <button
              type="button"
              onClick={() => fileInputRef.current?.click()}
              className="mt-2 text-primary-600 hover:text-primary-700 font-medium"
            >
              اختر ملف
            </button>
          </div>
          <p className="text-sm text-gray-500">
            PDF, DOCX, DOC, TXT حتى 10 ميجابايت
          </p>
        </div>
      </motion.div>

      {/* Selected File */}
      <AnimatePresence>
        {selectedFile && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="bg-white border rounded-lg p-4"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3 space-x-reverse">
                <File className="w-5 h-5 text-gray-500" />
                <div>
                  <p className="font-medium text-gray-900">{selectedFile.name}</p>
                  <p className="text-sm text-gray-500">
                    {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
              </div>
              <button
                onClick={handleReset}
                className="text-gray-400 hover:text-gray-500"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Upload Button */}
            <motion.button
              whileHover={{ scale: 1.01 }}
              whileTap={{ scale: 0.99 }}
              onClick={handleUpload}
              disabled={isUploading}
              className="mt-4 w-full py-2 px-4 rounded-lg bg-primary-600 text-white 
                         hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed
                         flex items-center justify-center gap-2"
            >
              {isUploading ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  جاري الرفع...
                </>
              ) : (
                <>
                  <Upload className="w-5 h-5" />
                  رفع الملف
                </>
              )}
            </motion.button>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Error Message */}
      <AnimatePresence>
        {uploadError && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="bg-red-50 text-red-600 p-4 rounded-lg flex items-center gap-2"
          >
            <AlertCircle className="w-5 h-5 flex-shrink-0" />
            <span>{uploadError}</span>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Success Message */}
      <AnimatePresence>
        {uploadSuccess && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="bg-green-50 text-green-600 p-4 rounded-lg flex items-center gap-2"
          >
            <CheckCircle className="w-5 h-5 flex-shrink-0" />
            <span>تم رفع الملف بنجاح</span>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default DocumentUpload;
</file>

<file path="src\components\vacation\VacationBalance.tsx">
// src/components/vacation/VacationBalance.tsx
import React, { useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Calendar,
  Clock,
  RefreshCcw,
  AlertCircle,
  CheckCircle,
  XCircle,
  Clock3,
} from "lucide-react";
import { useVacation } from "../../hooks/useVacation";
import { useAuth } from "../../hooks/useAuth";
import { VacationRequest } from "../../types/vacation";
import { formatDate } from "../../utils/data";
import ContentSkeleton from "../common/ContentSkeleton";

export const VacationBalance: React.FC = () => {
  const { user } = useAuth();
  const { state, fetchBalance, fetchRequests } = useVacation();

  useEffect(() => {
    if (user?.id) {
      fetchBalance();
      fetchRequests();
    }
  }, [user, fetchBalance, fetchRequests]);

  const renderStatusBadge = (status: VacationRequest["status"]) => {
    const statusConfig = {
      pending: {
        icon: Clock3,
        class: "bg-yellow-100 text-yellow-800",
        text: "قيد المراجعة",
      },
      approved: {
        icon: CheckCircle,
        class: "bg-green-100 text-green-800",
        text: "تمت الموافقة",
      },
      rejected: {
        icon: XCircle,
        class: "bg-red-100 text-red-800",
        text: "مرفوض",
      },
      cancelled: {
        icon: XCircle,
        class: "bg-gray-100 text-gray-800",
        text: "ملغي",
      },
    };

    const config = statusConfig[status];
    const Icon = config.icon;

    return (
      <span
        className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-sm font-medium ${config.class}`}
      >
        <Icon className="w-4 h-4" />
        {config.text}
      </span>
    );
  };

  if (state.isLoading) {
    return <ContentSkeleton type="card" />;
  }

  return (
    <div className="space-y-6">
      {/* Balance Card */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-xl shadow-lg overflow-hidden"
      >
        <div className="p-6">
          <div className="flex justify-between items-start">
            <h2 className="text-2xl font-bold text-gray-900">رصيد الإجازات</h2>
            <button
              onClick={() => fetchBalance()}
              className="text-gray-500 hover:text-gray-700"
              title="تحديث"
            >
              <RefreshCcw className="w-5 h-5" />
            </button>
          </div>

          {state.balance ? (
            <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-primary-50 rounded-lg p-4">
                <div className="text-primary-600 text-sm font-medium">
                  الرصيد السنوي
                </div>
                <div className="mt-2 text-3xl font-bold text-primary-700">
                  {state.balance.annual_balance} يوم
                </div>
              </div>

              <div className="bg-purple-50 rounded-lg p-4">
                <div className="text-purple-600 text-sm font-medium">
                  الإجازات المستخدمة
                </div>
                <div className="mt-2 text-3xl font-bold text-purple-700">
                  {state.balance.used_days} يوم
                </div>
              </div>

              <div className="bg-green-50 rounded-lg p-4">
                <div className="text-green-600 text-sm font-medium">
                  الرصيد المتبقي
                </div>
                <div className="mt-2 text-3xl font-bold text-green-700">
                  {state.balance.remaining_balance} يوم
                </div>
              </div>
            </div>
          ) : (
            <div className="mt-4 text-gray-500">
              لا يوجد معلومات متوفرة عن الرصيد
            </div>
          )}

          {state.balance && (
            <div className="mt-4 text-sm text-gray-500 flex items-center gap-1">
              <Clock className="w-4 h-4" />
              آخر تحديث: {formatDate(state.balance.last_updated)}
            </div>
          )}
        </div>

        {/* Progress Bar */}
        {state.balance && (
          <div className="px-6 pb-6">
            <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
              <motion.div
                initial={{ width: 0 }}
                animate={{
                  width: `${
                    (state.balance.used_days / state.balance.annual_balance) *
                    100
                  }%`,
                }}
                transition={{ duration: 1, ease: "easeOut" }}
                className="h-full bg-primary-500"
              />
            </div>
          </div>
        )}
      </motion.div>

      {/* Recent Requests */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="bg-white rounded-xl shadow-lg p-6"
      >
        <h2 className="text-xl font-bold text-gray-900 mb-6">
          طلبات الإجازة السابقة
        </h2>

        {/* Use isLoading state to show skeleton or requests */}
        {state.isLoading ? (
          <ContentSkeleton type="list" count={3} /> // Adjust count as needed
        ) : state.requests && state.requests.length > 0 ? (
          <div className="space-y-4">
            {state.requests.map((request) => (
              // Add a check for request and request.id
              request && request.id && (
                <motion.div
                  key={request.id} // Use the id as the key
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="border border-gray-100 rounded-lg p-4 hover:bg-gray-50 transition-colors"
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <div className="font-medium text-gray-900 mb-1">
                        {request?.start_date
                          ? formatDate(request.start_date)
                          : ""}{" "}
                        -{" "}
                        {request?.end_date ? formatDate(request.end_date) : ""}
                      </div>
                      <div className="text-sm text-gray-500">
                        نوع الإجازة:{" "}
                        {request?.request_type
                          ? request.request_type === "annual"
                            ? "سنوية"
                            : request.request_type === "sick"
                            ? "مرضية"
                            : "طارئة"
                          : ""}
                      </div>
                    </div>
                    {request?.status && renderStatusBadge(request.status)}
                  </div>
                  {request?.notes && (
                    <div className="mt-2 text-sm text-gray-600">
                      {request.notes}
                    </div>
                  )}
                </motion.div>
              )
            ))}
          </div>
        ) : (
          <div className="text-center text-gray-500 py-8">
            لا توجد طلبات إجازة سابقة
          </div>
        )}
      </motion.div>

      {/* Error Display */}
      <AnimatePresence>
        {state.error && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            className="bg-red-50 text-red-600 p-4 rounded-lg flex items-center gap-2"
          >
            <AlertCircle className="w-5 h-5 flex-shrink-0" />
            <span>{state.error}</span>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default VacationBalance;
</file>

<file path="src\components\vacation\VacationRequest.tsx">
// src/components/vacation/VacationRequest.tsx
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Calendar, Clock, AlertCircle, Loader2, Check } from 'lucide-react';
import { useVacation } from '../../hooks/useVacation';
import { useAuth } from '../../hooks/useAuth';
import { 
  VacationRequestType,
  VacationRequestFormData,
  CreateVacationRequestPayload 
} from '../../types/vacation';
import { calculateDaysBetween } from '../../utils/data';

const VACATION_TYPES: { value: VacationRequestType; label: string }[] = [
  { value: 'annual', label: 'إجازة سنوية' },
  { value: 'sick', label: 'إجازة مرضية' },
  { value: 'emergency', label: 'إجازة طارئة' }
];

const initialFormData: VacationRequestFormData = {
  startDate: '',
  endDate: '',
  requestType: 'annual',
  notes: ''
};

export const VacationRequest: React.FC = () => {
  const { user } = useAuth();
  const { state, submitRequest, fetchBalance } = useVacation();
  const [formData, setFormData] = useState<VacationRequestFormData>(initialFormData);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formErrors, setFormErrors] = useState<Partial<Record<keyof VacationRequestFormData, string>>>({});

  useEffect(() => {
    if (user?.id) {
      fetchBalance();
    }
  }, [user, fetchBalance]);

  const validateForm = (): boolean => {
    const errors: Partial<Record<keyof VacationRequestFormData, string>> = {};
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const startDate = new Date(formData.startDate);
    const endDate = new Date(formData.endDate);

    // Validate start date
    if (!formData.startDate) {
      errors.startDate = 'تاريخ البداية مطلوب';
    } else if (startDate < today) {
      errors.startDate = 'لا يمكن اختيار تاريخ في الماضي';
    }

    // Validate end date
    if (!formData.endDate) {
      errors.endDate = 'تاريخ النهاية مطلوب';
    } else if (endDate < startDate) {
      errors.endDate = 'تاريخ النهاية يجب أن يكون بعد تاريخ البداية';
    }

    // Validate request type
    if (!formData.requestType) {
      errors.requestType = 'نوع الإجازة مطلوب';
    }

    // Check against balance if it's an annual leave
    if (formData.requestType === 'annual' && 
        state.balance && 
        formData.startDate && 
        formData.endDate) {
      const daysRequested = calculateDaysBetween(formData.startDate, formData.endDate);
      if (daysRequested > state.balance.remaining_balance) {
        errors.endDate = 'عدد أيام الإجازة يتجاوز الرصيد المتبقي';
      }
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!user?.id || !validateForm()) return;

    setIsSubmitting(true);
    try {
      const request: CreateVacationRequestPayload = {
        employee_id: user.id,
        start_date: formData.startDate,
        end_date: formData.endDate,
        request_type: formData.requestType,
        notes: formData.notes
      };

      await submitRequest(request);
      setFormData(initialFormData);
      
      // Show success message (could be enhanced with a toast notification)
    } catch (error) {
      // Error is handled by the context
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when field is modified
    if (formErrors[name as keyof VacationRequestFormData]) {
      setFormErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-xl shadow-lg p-6 max-w-2xl mx-auto"
    >
      {/* Header Section */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">تقديم طلب إجازة</h2>
        {state.balance && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-gray-50 rounded-lg p-4 mt-4"
          >
            <div className="flex justify-between items-center">
              <span className="text-gray-600">الرصيد المتبقي:</span>
              <span className="font-semibold text-xl text-primary-600">
                {state.balance.remaining_balance} يوم
              </span>
            </div>
          </motion.div>
        )}
      </div>

      {/* Form */}
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Vacation Type */}
        <div>
          <label htmlFor="requestType" className="block text-sm font-medium text-gray-700 mb-1">
            نوع الإجازة
          </label>
          <select
            id="requestType"
            name="requestType"
            value={formData.requestType}
            onChange={handleChange}
            className={`w-full rounded-lg border ${
              formErrors.requestType ? 'border-red-500' : 'border-gray-300'
            } p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent`}
          >
            {VACATION_TYPES.map(type => (
              <option key={type.value} value={type.value}>
                {type.label}
              </option>
            ))}
          </select>
          {formErrors.requestType && (
            <p className="mt-1 text-sm text-red-500 flex items-center gap-1">
              <AlertCircle className="w-4 h-4" />
              {formErrors.requestType}
            </p>
          )}
        </div>

        {/* Date Selection */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Start Date */}
          <div>
            <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">
              تاريخ البداية
            </label>
            <div className="relative">
              <input
                type="date"
                id="startDate"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className={`w-full rounded-lg border ${
                  formErrors.startDate ? 'border-red-500' : 'border-gray-300'
                } p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent`}
              />
              <Calendar className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            </div>
            {formErrors.startDate && (
              <p className="mt-1 text-sm text-red-500 flex items-center gap-1">
                <AlertCircle className="w-4 h-4" />
                {formErrors.startDate}
              </p>
            )}
          </div>

          {/* End Date */}
          <div>
            <label htmlFor="endDate" className="block text-sm font-medium text-gray-700 mb-1">
              تاريخ النهاية
            </label>
            <div className="relative">
              <input
                type="date"
                id="endDate"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className={`w-full rounded-lg border ${
                  formErrors.endDate ? 'border-red-500' : 'border-gray-300'
                } p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent`}
              />
              <Calendar className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            </div>
            {formErrors.endDate && (
              <p className="mt-1 text-sm text-red-500 flex items-center gap-1">
                <AlertCircle className="w-4 h-4" />
                {formErrors.endDate}
              </p>
            )}
          </div>
        </div>

        {/* Notes */}
        <div>
          <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-1">
            ملاحظات
          </label>
          <textarea
            id="notes"
            name="notes"
            value={formData.notes}
            onChange={handleChange}
            rows={3}
            className="w-full rounded-lg border border-gray-300 p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            placeholder="أضف أي ملاحظات إضافية هنا..."
          />
        </div>

        {/* Submit Button */}
        <motion.button
          whileHover={{ scale: 1.01 }}
          whileTap={{ scale: 0.99 }}
          type="submit"
          disabled={isSubmitting || state.isLoading}
          className="w-full py-3 px-4 rounded-lg bg-primary-600 text-white font-medium hover:bg-primary-700 
                     focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500
                     disabled:opacity-50 disabled:cursor-not-allowed
                     flex items-center justify-center gap-2"
        >
          {isSubmitting ? (
            <>
              <Loader2 className="w-5 h-5 animate-spin" />
              جاري التقديم...
            </>
          ) : (
            <>
              <Check className="w-5 h-5" />
              تقديم الطلب
            </>
          )}
        </motion.button>

        {/* Error Display */}
        <AnimatePresence>
          {state.error && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="bg-red-50 text-red-600 p-3 rounded-lg flex items-center gap-2"
            >
              <AlertCircle className="w-5 h-5 flex-shrink-0" />
              <span>{state.error}</span>
            </motion.div>
          )}
        </AnimatePresence>
      </form>
    </motion.div>
  );
};

export default VacationRequest;
</file>

<file path="src\constants\index.ts">
// src/constants/index.ts
export const API_ENDPOINTS = {
    LOGIN: '/api/auth/login',
    CHAT: '/api/chat',
    VACATION_BALANCE: '/api/employee/vacation-balance',
    VACATION_REQUEST: '/api/employee/vacation-request',
    DOCUMENTS: '/api/admin/documents',
    UPLOAD_DOCUMENT: '/api/admin/upload',
    ADMIN_TICKETS: '/api/admin/tickets'

  };
  
  export const VACATION_TYPES = {
    ANNUAL: 'annual',
    SICK: 'sick',
    EMERGENCY: 'emergency'
  } as const;
  
  export const MESSAGE_STATUS = {
    SENDING: 'sending',
    SENT: 'sent',
    ERROR: 'error'
  } as const;
  
  export const ERROR_MESSAGES = {
    NETWORK_ERROR: 'حدث خطأ في الاتصال بالخادم',
    UNAUTHORIZED: 'جلسة العمل منتهية. يرجى تسجيل الدخول مرة أخرى',
    INVALID_CREDENTIALS: 'اسم المستخدم أو كلمة المرور غير صحيحة',
    GENERAL_ERROR: 'حدث خطأ غير متوقع'
  };
  
  export const ROUTES = {
    HOME: '/',
    LOGIN: '/login',
    CHAT: '/chat',
    PROFILE: '/profile',
    ADMIN: '/admin'
  } as const;
</file>

<file path="src\context\AuthContext.tsx">
// src/context/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { User } from '../types/api';
import { authService } from '../services/auth';
import { storage } from '../utils/storage';
import { useNavigate } from 'react-router-dom';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const checkAuth = useCallback(async () => {
    const storedUser = storage.getUser();
    if (storedUser) {
      setUser(storedUser);
    }
    setIsLoading(false);
  }, []);

  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  const login = async (username: string, password: string) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await authService.login({ username, password });
      const userData = response.user;

      setUser(userData);
      storage.setUser(userData);
    } catch (error: any) {
      setError(error.message || 'فشل تسجيل الدخول');
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    storage.clear();
    navigate('/');
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        isLoading,
        error,
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

// Export useAuth
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
</file>

<file path="src\context\ChatContext.tsx">
// src/context/ChatContext.tsx
import React, { createContext, useContext, useReducer, useEffect } from 'react';
import { useAuth } from './AuthContext';
import { chatService } from '../services/chat';
import { Message } from '../types/api';

interface ChatState {
  messages: Message[];
  isLoading: boolean;
  error: string | null;
}

type ChatAction =
  | { type: 'SET_MESSAGES'; payload: Message[] }
  | { type: 'ADD_MESSAGE'; payload: Message }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'UPDATE_MESSAGE_STATUS'; payload: { id: string; status: Message['status'] } };

const chatReducer = (state: ChatState, action: ChatAction): ChatState => {
  switch (action.type) {
    case 'SET_MESSAGES':
      return {
        ...state,
        messages: action.payload
      };
    case 'ADD_MESSAGE':
      return {
        ...state,
        messages: [...state.messages, action.payload]
      };
    case 'SET_LOADING':
      return {
        ...state,
        isLoading: action.payload
      };
    case 'SET_ERROR':
      return {
        ...state,
        error: action.payload
      };
    case 'UPDATE_MESSAGE_STATUS':
      return {
        ...state,
        messages: state.messages.map(msg =>
          msg.id === action.payload.id
            ? { ...msg, status: action.payload.status }
            : msg
        )
      };
    default:
      return state;
  }
};

interface ChatContextType {
  state: ChatState;
  sendMessage: (content: string) => Promise<void>;
  clearError: () => void;
}

export const ChatContext = createContext<ChatContextType | undefined>(undefined);

const initialState: ChatState = {
  messages: [],
  isLoading: false,
  error: null
};

export const ChatProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  const [state, dispatch] = useReducer(chatReducer, initialState);

  useEffect(() => {
    const loadChatHistory = async () => {
      if (user?.employee_id) {
        dispatch({ type: 'SET_LOADING', payload: true });
        try {
          const history = await chatService.getChatHistory(user.employee_id);
          const historyWithDates = history.map(msg => ({
            ...msg,
            timestamp: new Date(msg.timestamp)
          }));
          dispatch({ type: 'SET_MESSAGES', payload: historyWithDates });
        } catch (error) {
          dispatch({ 
            type: 'SET_ERROR', 
            payload: 'فشل في تحميل سجل المحادثات' 
          });
        } finally {
          dispatch({ type: 'SET_LOADING', payload: false });
        }
      }
    };

    loadChatHistory();
  }, [user]);

  const sendMessage = async (content: string) => {
    const currentUser = user; // Store user in variable to avoid closure issues
    
    if (!currentUser?.employee_id) {
      dispatch({ 
        type: 'SET_ERROR', 
        payload: 'يجب تسجيل الدخول لإرسال الرسائل' 
      });
      return;
    }

    const messageId = Date.now().toString();
    
    dispatch({
      type: 'ADD_MESSAGE',
      payload: {
        id: messageId,
        content,
        type: 'user',
        timestamp: new Date(),
        status: 'sending'
      }
    });

    dispatch({ type: 'SET_LOADING', payload: true });

    try {
      const response = await chatService.sendMessage(content, currentUser.employee_id);
      
      dispatch({
        type: 'UPDATE_MESSAGE_STATUS',
        payload: { id: messageId, status: 'sent' }
      });

      dispatch({
        type: 'ADD_MESSAGE',
        payload: {
          id: Date.now().toString(),
          content: response.response,
          type: 'bot',
          timestamp: new Date(response.timestamp),
          status: 'sent'
        }
      });
    } catch (error) {
      dispatch({
        type: 'UPDATE_MESSAGE_STATUS',
        payload: { id: messageId, status: 'error' }
      });
      dispatch({
        type: 'SET_ERROR',
        payload: 'فشل في إرسال الرسالة. يرجى المحاولة مرة أخرى.'
      });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const clearError = () => {
    dispatch({ type: 'SET_ERROR', payload: null });
  };

  return (
    <ChatContext.Provider
      value={{
        state,
        sendMessage,
        clearError
      }}
    >
      {children}
    </ChatContext.Provider>
  );
};

export const useChat = () => {
  const context = useContext(ChatContext);
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};
</file>

<file path="src\context\DocumentContext.tsx">
// src/context/DocumentContext.tsx
import React, { createContext, useContext, useReducer, useCallback } from 'react';
import { documentService } from '../services/documents';
import { DocumentMetadata } from '../types/documents';

interface DocumentState {
  documents: DocumentMetadata[];
  isLoading: boolean;
  error: string | null;
  status: 'idle' | 'loading' | 'failed';
}

type DocumentAction =
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_DOCUMENTS'; payload: DocumentMetadata[] }
  | { type: 'ADD_DOCUMENT'; payload: DocumentMetadata }
  | { type: 'REMOVE_DOCUMENT'; payload: string }
  | { type: 'SET_ERROR'; payload: string | null };

interface DocumentContextType {
  state: DocumentState;
  fetchDocuments: () => Promise<void>;
  uploadDocument: (file: File) => Promise<void>;
  deleteDocument: (documentId: string) => Promise<void>;
  clearError: () => void;
}

// Create and export the context
export const DocumentContext = createContext<DocumentContextType | undefined>(undefined);

const initialState: DocumentState = {
  documents: [],
  isLoading: false,
  error: null
};



const documentReducer = (state: DocumentState, action: DocumentAction): DocumentState => {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, isLoading: action.payload, error: null };
    case 'SET_DOCUMENTS':
      return { ...state, documents: action.payload };
    case 'ADD_DOCUMENT':
      return { ...state, documents: [...state.documents, action.payload] };
    case 'REMOVE_DOCUMENT':
      return {
        ...state,
        documents: state.documents.filter(doc => doc.id !== action.payload)
      };
    case 'SET_ERROR':
      return { ...state, error: action.payload, isLoading: false };
    default:
      return state;
  }
};

export const DocumentProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(documentReducer, initialState);

  const fetchDocuments = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await documentService.getDocuments();
      dispatch({ type: 'SET_DOCUMENTS', payload: response.documents });
    } catch (error) {
      dispatch({ 
        type: 'SET_ERROR', 
        payload: error instanceof Error ? error.message : 'حدث خطأ في جلب المستندات'
      });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, []);

  const uploadDocument = useCallback(async (file: File) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await documentService.uploadDocument(file);
      dispatch({
        type: 'ADD_DOCUMENT',
        payload: { ...response.document, status: 'success' } // Assuming backend sets the status
      });
      return response;
    } catch (error) {
      dispatch({
        type: 'SET_ERROR',
        payload: error instanceof Error ? error.message : 'حدث خطأ في رفع المستند'
      });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, []);

  const deleteDocument = useCallback(async (documentId: string) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      await documentService.deleteDocument(documentId);
      dispatch({ type: 'REMOVE_DOCUMENT', payload: documentId });
    } catch (error) {
      dispatch({
        type: 'SET_ERROR',
        payload: error instanceof Error ? error.message : 'حدث خطأ في حذف المستند'
      });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, []);

  const clearError = () => {
    dispatch({ type: 'SET_ERROR', payload: null });
  };

  return (
    <DocumentContext.Provider
      value={{
        state,
        fetchDocuments,
        uploadDocument,
        deleteDocument,
        clearError
      }}
    >
      {children}
    </DocumentContext.Provider>
  );
};
</file>

<file path="src\context\TicketContext.tsx">
// src/context/TicketContext.tsx
import React, { createContext, useContext, useReducer, useCallback } from 'react';
import { Ticket } from '../types/tickets';
import { ticketService } from '../services/tickets';

interface TicketState {
  tickets: Ticket[];
  isLoading: boolean;
  error: string | null;
}

type TicketAction =
  | { type: 'FETCH_TICKETS_START' }
  | { type: 'FETCH_TICKETS_SUCCESS'; payload: Ticket[] }
  | { type: 'FETCH_TICKETS_FAILURE'; payload: string };

const initialState: TicketState = {
  tickets: [],
  isLoading: false,
  error: null,
};

const ticketReducer = (state: TicketState, action: TicketAction): TicketState => {
  switch (action.type) {
    case 'FETCH_TICKETS_START':
      return { ...state, isLoading: true, error: null };
    case 'FETCH_TICKETS_SUCCESS':
      return { ...state, isLoading: false, tickets: action.payload };
    case 'FETCH_TICKETS_FAILURE':
      return { ...state, isLoading: false, error: action.payload };
    default:
      return state;
  }
};

interface TicketContextType {
  state: TicketState;
  fetchTickets: () => Promise<void>;
}

const TicketContext = createContext<TicketContextType | undefined>(undefined);

const TicketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(ticketReducer, initialState);

  const fetchTickets = useCallback(async () => {
    dispatch({ type: 'FETCH_TICKETS_START' });
    try {
      const tickets = await ticketService.getAllTickets();
      // Add console log here to verify fetched data
      console.log("Tickets fetched in context:", tickets); 
      dispatch({ type: 'FETCH_TICKETS_SUCCESS', payload: tickets });
    } catch (error) {
      console.error("Error fetching tickets (in context):", error);
      dispatch({
        type: 'FETCH_TICKETS_FAILURE',
        payload: error instanceof Error ? error.message : 'Failed to fetch tickets',
      });
    }
  }, []);

  return (
    <TicketContext.Provider value={{ state, fetchTickets }}>
      {children}
    </TicketContext.Provider>
  );
};

export { TicketContext, TicketProvider };

// Make useTickets available for import
export const useTickets = () => {
    const context = useContext(TicketContext);
    if (!context) {
        throw new Error('useTickets must be used within a TicketProvider');
    }
    return context;
};
</file>

<file path="src\context\VacationContext.tsx">
// src/context/VacationContext.tsx

import React, { createContext, useContext, useReducer, useCallback } from 'react';
import { useAuth } from './AuthContext';
import { vacationService } from '../services/vacation';
import { 
  VacationBalance, 
  VacationRequest,
  CreateVacationRequestPayload 
} from '../types/vacation';

interface VacationState {
  balance: VacationBalance | null;
  requests: VacationRequest[];
  isLoading: boolean;
  error: string | null;
}

type VacationAction =
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_BALANCE'; payload: VacationBalance }
  | { type: 'SET_REQUESTS'; payload: VacationRequest[] }
  | { type: 'ADD_REQUEST'; payload: VacationRequest }
  | { type: 'UPDATE_REQUEST'; payload: VacationRequest }
  | { type: 'SET_ERROR'; payload: string | null };

const initialState: VacationState = {
  balance: null,
  requests: [],
  isLoading: false,
  error: null
};

const vacationReducer = (state: VacationState, action: VacationAction): VacationState => {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, isLoading: action.payload, error: null };
    case 'SET_BALANCE':
      return { ...state, balance: action.payload };
    case 'SET_REQUESTS':
      return { ...state, requests: action.payload };
    case 'ADD_REQUEST':
      return { ...state, requests: [...state.requests, action.payload] };
    case 'UPDATE_REQUEST':
      return {
        ...state,
        requests: state.requests.map(req =>
          req.id === action.payload.id ? action.payload : req
        )
      };
    case 'SET_ERROR':
      return { ...state, error: action.payload, isLoading: false };
    default:
      return state;
  }
};

interface VacationContextType {
  state: VacationState;
  fetchBalance: () => Promise<void>;
  fetchRequests: () => Promise<void>;
  submitRequest: (request: CreateVacationRequestPayload) => Promise<void>;
  cancelRequest: (requestId: string) => Promise<void>;
  clearError: () => void;
}

// Correct: Named export
export const VacationContext = createContext<VacationContextType | undefined>(undefined);

export const VacationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(vacationReducer, initialState);
  const { user } = useAuth();

  const fetchBalance = useCallback(async () => {
    if (!user?.id) return;

    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await vacationService.getBalance(user.id);
      dispatch({ type: 'SET_BALANCE', payload: response.data });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error instanceof Error ? error.message : 'حدث خطأ في جلب رصيد الإجازات' });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, [user]);

  const fetchRequests = useCallback(async () => {
    if (!user?.id) return;

    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await vacationService.getRequests(user.id);
      dispatch({ type: 'SET_REQUESTS', payload: response.data });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error instanceof Error ? error.message : 'حدث خطأ في جلب طلبات الإجازة' });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, [user]);

  const submitRequest = async (request: CreateVacationRequestPayload) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      // add this line to check if the backend is reciving a valid employee_id
      console.log('Submitting request:', request); 
      const response = await vacationService.submitRequest(request);
      // add this line to check the response from the backend
      console.log('Vacation request response:', response); 
      dispatch({ type: 'ADD_REQUEST', payload: response.data });
      await fetchBalance(); // Refresh balance after successful request
    } catch (error) {
      console.error('Error submitting vacation request:', error);
      dispatch({ type: 'SET_ERROR', payload: error instanceof Error ? error.message : 'حدث خطأ في تقديم طلب الإجازة' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const cancelRequest = async (requestId: string) => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const response = await vacationService.cancelRequest(requestId);
      dispatch({ type: 'UPDATE_REQUEST', payload: response.data });
      await fetchBalance(); // Refresh balance after cancellation
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: error instanceof Error ? error.message : 'حدث خطأ في إلغاء طلب الإجازة' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const clearError = () => {
    dispatch({ type: 'SET_ERROR', payload: null });
  };

  return (
    <VacationContext.Provider
      value={{
        state,
        fetchBalance,
        fetchRequests,
        submitRequest,
        cancelRequest,
        clearError
      }}
    >
      {children}
    </VacationContext.Provider>
  );
};

// No default export
</file>

<file path="src\hooks\useAuth.ts">
// src/hooks/useAuth.ts
import { useContext } from 'react';
import { AuthContext } from '../context/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Make sure to export both the context and the provider
export { AuthContext };
</file>

<file path="src\hooks\useChat.ts">
// src/hooks/useChat.ts
import { useContext } from 'react';
import { ChatContext } from '../context/ChatContext';

export const useChat = () => {
  const context = useContext(ChatContext);
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};

// Make sure to export both the context and the provider
</file>

<file path="src\hooks\useDocuments.ts">
// src/hooks/useDocuments.ts
import { useContext } from 'react';
import { DocumentContext } from '../context/DocumentContext';

export const useDocuments = () => {
  const context = useContext(DocumentContext);
  if (context === undefined) {
    throw new Error('useDocuments must be used within a DocumentProvider');
  }
  return context;
};
</file>

<file path="src\hooks\useTickets.ts">
// src/hooks/useTickets.ts
import { useContext } from 'react';
import { TicketContext } from '../context/TicketContext';

export const useTickets = () => {
  const context = useContext(TicketContext);
  if (context === undefined) {
    throw new Error('useTickets must be used within a TicketProvider');
  }
  return context;
};
</file>

<file path="src\hooks\useVacation.ts">
// src/hooks/useVacation.ts
import { useContext } from 'react';
import { VacationContext } from '../context/VacationContext';


export const useVacation = () => {
  const context = useContext(VacationContext);
  if (context === undefined) {
    throw new Error('useVacation must be used within a VacationProvider');
  }
  return context;
};
</file>

<file path="src\pages\ChatPage.tsx">
import React, { useRef, useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Send, 
  Bot, 
  User,
  Calendar,
  AlertCircle,
  X,
  ChevronDown,
  HelpCircle,
  AlignJustify
} from 'lucide-react';
import Layout from '../components/common/Layout';
import { useChat } from '../hooks/useChat';
import { useAuth } from '../hooks/useAuth';
import { ChatMessage } from '../types/chat';
import LoadingSpinner from '../components/common/LoadingSpinner';
import PageLoader from '../components/common/PageLoader';

const ChatPage = () => {
  const { user } = useAuth();
  const { state, sendMessage } = useChat();
  const [inputMessage, setInputMessage] = useState('');
  const [sendingMessage, setSendingMessage] = useState(false);
  const [showActions, setShowActions] = useState(false);
  const [isScrolledToBottom, setIsScrolledToBottom] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  // Common questions/actions for quick access
  const quickActions = [
    {
      id: 'vacation-balance',
      text: 'ما هو رصيد إجازاتي؟',
      icon: Calendar,
      category: 'إجازات'
    },
    {
      id: 'vacation-request',
      text: 'كيف أقدم طلب إجازة؟',
      icon: Calendar,
      category: 'إجازات'
    },
    {
      id: 'hr-policies',
      text: 'ما هي سياسات الموارد البشرية؟',
      icon: AlignJustify,
      category: 'سياسات'
    },
    {
      id: 'help',
      text: 'احتاج مساعدة',
      icon: HelpCircle,
      category: 'مساعدة'
    }
  ];

  useEffect(() => {
    if (isScrolledToBottom) {
      scrollToBottom();
    }
  }, [state.messages]);

  useEffect(() => {
    const handleScroll = () => {
      if (chatContainerRef.current) {
        const { scrollHeight, scrollTop, clientHeight } = chatContainerRef.current;
        const isBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 50;
        setIsScrolledToBottom(isBottom);
      }
    };

    chatContainerRef.current?.addEventListener('scroll', handleScroll);
    return () => chatContainerRef.current?.removeEventListener('scroll', handleScroll);
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async (content: string) => {
    if (!content.trim() || sendingMessage) return;

    setSendingMessage(true);
    setInputMessage('');
    setShowActions(false);
    
    try {
      await sendMessage(content);
      setIsScrolledToBottom(true);
    } finally {
      setSendingMessage(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(inputMessage);
    }
  };

  if (state.isLoading && !state.messages.length) {
    return (
      <Layout>
        <PageLoader message="جاري تحميل المحادثة..." />
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="h-screen flex flex-col">
        {/* Chat Header */}
        <div className="bg-white border-b px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 flex items-center justify-center">
              <Bot className="w-5 h-5 text-white" />
            </div>
            <div>
              <h1 className="font-semibold text-gray-900">المساعد الافتراضي</h1>
              <p className="text-sm text-gray-500">متصل</p>
            </div>
          </div>
        </div>

        {/* Chat Messages */}
        <div 
          ref={chatContainerRef}
          className="flex-1 overflow-y-auto bg-gradient-to-b from-gray-50 to-white"
        >
          <div className="max-w-4xl mx-auto px-4 py-6 space-y-6">
            {/* Welcome Message */}
            {state.messages.length === 0 && (
              <div className="text-center space-y-6">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="space-y-4"
                >
                  <div className="w-20 h-20 mx-auto rounded-full bg-gradient-to-r from-primary-500 to-purple-500 flex items-center justify-center">
                    <Bot className="w-10 h-10 text-white" />
                  </div>
                  <h2 className="text-2xl font-semibold">مرحباً {user?.name}</h2>
                  <p className="text-gray-600">كيف يمكنني مساعدتك اليوم؟</p>
                </motion.div>

                {/* Quick Actions Grid */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                  className="grid grid-cols-1 sm:grid-cols-2 gap-4 max-w-2xl mx-auto"
                >
                  {quickActions.map((action) => (
                    <motion.button
                      key={action.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => handleSendMessage(action.text)}
                      className="bg-white p-4 rounded-xl border border-gray-200 hover:border-primary-500 
                               hover:shadow-md transition-all flex items-center gap-3 text-right"
                    >
                      <div className="p-2 rounded-lg bg-primary-50">
                        <action.icon className="w-5 h-5 text-primary-600" />
                      </div>
                      <div className="flex-1">
                        <p className="font-medium text-gray-900">{action.text}</p>
                        <p className="text-sm text-gray-500">{action.category}</p>
                      </div>
                    </motion.button>
                  ))}
                </motion.div>
              </div>
            )}

            {/* Message List */}
            <AnimatePresence>
              {state.messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`flex ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start gap-3 max-w-[85%]`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 
                      ${message.type === 'user' ? 'bg-primary-500' : 'bg-gradient-to-r from-primary-500 to-purple-500'}`}
                    >
                      {message.type === 'user' ? (
                        <User className="w-4 h-4 text-white" />
                      ) : (
                        <Bot className="w-4 h-4 text-white" />
                      )}
                    </div>
                    <div className={`flex flex-col ${message.type === 'user' ? 'items-end' : 'items-start'}`}>
                      <div className={`rounded-2xl px-4 py-2.5 ${
                        message.type === 'user' 
                          ? 'bg-primary-500 text-white' 
                          : 'bg-white border border-gray-200 shadow-sm'
                      }`}>
                        <div className="whitespace-pre-wrap text-[15px]">{message.content}</div>
                      </div>
                      <div className="flex items-center gap-2 mt-1">
                        <span className="text-xs text-gray-500">
                          {new Date(message.timestamp).toLocaleTimeString('ar-SA', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </span>
                        {message.status === 'error' && (
                          <span className="text-red-500 text-xs flex items-center gap-1">
                            <AlertCircle className="w-3 h-3" />
                            فشل الإرسال
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>

            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Scroll to Bottom Button */}
        <AnimatePresence>
          {!isScrolledToBottom && state.messages.length > 0 && (
            <motion.button
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              onClick={scrollToBottom}
              className="absolute bottom-24 right-8 bg-gray-900 text-white rounded-full p-2 shadow-lg hover:bg-gray-800"
            >
              <ChevronDown className="w-5 h-5" />
            </motion.button>
          )}
        </AnimatePresence>

        {/* Input Area */}
        <div className="bg-white border-t px-4 py-3">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-end gap-2">
              <div className="relative flex-1">
                <textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="اكتب رسالتك هنا..."
                  className="w-full bg-gray-50 rounded-2xl border-0 px-4 py-3 max-h-32 focus:ring-1 focus:ring-primary-500 resize-none"
                  rows={1}
                  dir="rtl"
                  disabled={sendingMessage}
                />
              </div>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => handleSendMessage(inputMessage)}
                disabled={!inputMessage.trim() || sendingMessage}
                className="p-3 rounded-xl bg-primary-500 text-white hover:bg-primary-600 
                         disabled:opacity-50 disabled:cursor-not-allowed flex-shrink-0
                         shadow-lg shadow-primary-500/25"
              >
                {sendingMessage ? (
                  <LoadingSpinner size="sm" color="white" />
                ) : (
                  <Send className="w-5 h-5" />
                )}
              </motion.button>
            </div>

            {/* Typing Indicator */}
            <AnimatePresence>
              {sendingMessage && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0 }}
                  className="absolute left-4 bottom-20 bg-white rounded-lg shadow-lg border px-4 py-2 flex items-center gap-2"
                >
                  <LoadingSpinner size="sm" color="primary" />
                  <span className="text-sm text-gray-600">المساعد يكتب...</span>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>

        {/* Error Messages */}
        <AnimatePresence>
          {state.error && (
            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 50 }}
              className="fixed bottom-24 left-1/2 transform -translate-x-1/2 bg-red-50 text-red-600 px-4 py-2 rounded-lg shadow-lg border border-red-100 flex items-center gap-2"
            >
              <AlertCircle className="w-5 h-5" />
              <span>{state.error}</span>
              <button
                onClick={() => state.clearError?.()}
                className="ml-2 text-red-400 hover:text-red-600"
              >
                <X className="w-4 h-4" />
              </button>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </Layout>
  );
};

export default ChatPage;
</file>

<file path="src\pages\DocumentPage.tsx">
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FileText, 
  Upload, 
  Trash2, 
  Download, 
  Search,
  Filter,
  Plus,
  X,
  AlertCircle,
  CheckCircle,
  SortAsc,
  Calendar,
  FileType,
  ArrowUpDown
} from 'lucide-react';
import Layout from '../components/common/Layout';
import DocumentUpload from '../components/documents/DocumentUpload';
import { useDocuments } from '../hooks/useDocuments';
import { DocumentMetadata } from '../types/documents';
import { formatDate } from '../utils/data';

const DocumentsPage = () => {
  const { state, fetchDocuments, deleteDocument } = useDocuments();
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'date' | 'name' | 'type'>('date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [selectedDocument, setSelectedDocument] = useState<DocumentMetadata | null>(null);

  // Filter documents based on search term and type
  const filteredDocuments = state.documents.filter(doc => {
    const matchesSearch = doc.title.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = filterType === 'all' || doc.fileType === filterType;
    return matchesSearch && matchesType;
  });

  // Sort documents
  const sortedDocuments = [...filteredDocuments].sort((a, b) => {
    let comparison = 0;
    switch (sortBy) {
      case 'date':
        comparison = new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime();
        break;
      case 'name':
        comparison = a.title.localeCompare(b.title);
        break;
      case 'type':
        comparison = a.fileType.localeCompare(b.fileType);
        break;
    }
    return sortOrder === 'asc' ? comparison : -comparison;
  });

  // Get unique file types for filter
  const fileTypes = Array.from(new Set(state.documents.map(doc => doc.fileType)));

  const handleDelete = async (documentId: string) => {
    try {
      await deleteDocument(documentId);
    } catch (error) {
      // Error is handled by the context
    }
  };

  const getFileTypeIcon = (type: string) => {
    return <FileText className="w-5 h-5" />;
  };

  const toggleSort = (field: 'date' | 'name' | 'type') => {
    if (sortBy === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortOrder('desc');
    }
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Header Section */}
          <div className="mb-8">
            <div className="flex justify-between items-start">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">إدارة المستندات</h1>
                <p className="mt-1 text-sm text-gray-500">
                  {state.documents.length} مستند متاح
                </p>
              </div>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => setShowUploadModal(true)}
                className="flex items-center gap-2 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
              >
                <Plus className="w-5 h-5" />
                رفع مستند جديد
              </motion.button>
            </div>

            {/* Search and Filter Bar */}
            <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* Search Input */}
              <div className="relative">
                <Search className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="البحث عن مستند..."
                  className="w-full pl-4 pr-10 py-2 bg-white border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                />
              </div>

              {/* File Type Filter */}
              <div className="relative">
                <Filter className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  className="w-full pl-4 pr-10 py-2 bg-white border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent appearance-none"
                >
                  <option value="all">جميع الأنواع</option>
                  {fileTypes.map((type) => (
                    <option key={type} value={type}>
                      {type.toUpperCase()}
                    </option>
                  ))}
                </select>
              </div>

              {/* Sort Options */}
              <div className="flex gap-2">
                <button
                  onClick={() => toggleSort('date')}
                  className={`flex items-center gap-1 px-3 py-2 rounded-lg border ${
                    sortBy === 'date' ? 'bg-primary-50 border-primary-500 text-primary-700' : 'border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <Calendar className="w-4 h-4" />
                  التاريخ
                  {sortBy === 'date' && (
                    <ArrowUpDown className="w-4 h-4" />
                  )}
                </button>
                <button
                  onClick={() => toggleSort('name')}
                  className={`flex items-center gap-1 px-3 py-2 rounded-lg border ${
                    sortBy === 'name' ? 'bg-primary-50 border-primary-500 text-primary-700' : 'border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <SortAsc className="w-4 h-4" />
                  الاسم
                  {sortBy === 'name' && (
                    <ArrowUpDown className="w-4 h-4" />
                  )}
                </button>
                <button
                  onClick={() => toggleSort('type')}
                  className={`flex items-center gap-1 px-3 py-2 rounded-lg border ${
                    sortBy === 'type' ? 'bg-primary-50 border-primary-500 text-primary-700' : 'border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <FileType className="w-4 h-4" />
                  النوع
                  {sortBy === 'type' && (
                    <ArrowUpDown className="w-4 h-4" />
                  )}
                </button>
              </div>
            </div>
          </div>

          {/* Documents Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {sortedDocuments.map((doc) => (
              <motion.div
                key={doc.id}
                layout
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.95 }}
                className="bg-white rounded-xl border border-gray-200 overflow-hidden hover:shadow-lg transition-shadow"
              >
                {/* Document Preview */}
                <div className="p-6 border-b border-gray-100">
                  <div className="flex items-start gap-4">
                    <div className="p-3 bg-primary-50 rounded-lg">
                      {getFileTypeIcon(doc.fileType)}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h3 className="font-medium text-gray-900 truncate">
                        {doc.title}
                      </h3>
                      <p className="text-sm text-gray-500">
                        {(doc.size / 1024 / 1024).toFixed(2)} MB · {doc.fileType.toUpperCase()}
                      </p>
                      <p className="text-sm text-gray-500 mt-1">
                        {formatDate(doc.uploadedAt)}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Actions */}
                <div className="px-6 py-4 bg-gray-50 flex justify-between items-center">
                  <button
                    onClick={() => window.open(`/api/documents/${doc.id}/download`)}
                    className="text-gray-600 hover:text-primary-600 flex items-center gap-1"
                  >
                    <Download className="w-4 h-4" />
                    <span className="text-sm">تحميل</span>
                  </button>
                  <button
                    onClick={() => setSelectedDocument(doc)}
                    className="text-red-600 hover:text-red-700 flex items-center gap-1"
                  >
                    <Trash2 className="w-4 h-4" />
                    <span className="text-sm">حذف</span>
                  </button>
                </div>
              </motion.div>
            ))}
          </div>

          {/* Empty State */}
          {sortedDocuments.length === 0 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="text-center py-12"
            >
              <div className="w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4">
                <FileText className="w-8 h-8 text-gray-400" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                لا توجد مستندات
              </h3>
              <p className="text-gray-500 mb-6">
                {searchTerm ? 'لا توجد نتائج مطابقة للبحث' : 'ابدأ برفع مستنداتك'}
              </p>
              {!searchTerm && (
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setShowUploadModal(true)}
                  className="inline-flex items-center gap-2 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
                >
                  <Upload className="w-5 h-5" />
                  رفع مستند
                </motion.button>
              )}
            </motion.div>
          )}

          {/* Upload Modal */}
          <AnimatePresence>
            {showUploadModal && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
              >
                <motion.div
                  initial={{ opacity: 0, scale: 0.95 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.95 }}
                  className="bg-white rounded-xl shadow-xl max-w-lg w-full"
                >
                  <div className="flex justify-between items-center p-6 border-b">
                    <h2 className="text-xl font-semibold">رفع مستند جديد</h2>
                    <button
                      onClick={() => setShowUploadModal(false)}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </div>
                  <div className="p-6">
                    <DocumentUpload />
                  </div>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Delete Confirmation Modal */}
          <AnimatePresence>
            {selectedDocument && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
              >
                <motion.div
                  initial={{ opacity: 0, scale: 0.95 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.95 }}
                  className="bg-white rounded-xl shadow-xl max-w-md w-full p-6"
                >
                  <div className="text-center">
                    <div className="w-12 h-12 mx-auto bg-red-100 rounded-full flex items-center justify-center mb-4">
                      <AlertCircle className="w-6 h-6 text-red-600" />
                    </div>
                    <h3 className="text-lg font-semibold mb-2">
                      تأكيد الحذف
                    </h3>
                    <p className="text-gray-500 mb-6">
                      هل أنت متأكد من حذف المستند "{selectedDocument.title}"؟
                      لا يمكن التراجع عن هذا الإجراء.
                    </p>
                    <div className="flex gap-3">
                      <button
                        onClick={() => setSelectedDocument(null)}
                        className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
                      >
                        إلغاء
                      </button>
                      <button
                        onClick={() => {
                          handleDelete(selectedDocument.id);
                          setSelectedDocument(null);
                        }}
                        className="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
                      >
                        حذف
                      </button>
                    </div>
                  </div>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Error Messages */}
          <AnimatePresence>
            {state.error && (
              <motion.div
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 50 }}
                className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-red-50 text-red-600 px-4 py-3 rounded-lg shadow-lg border border-red-100 flex items-center gap-2"
              >
                <AlertCircle className="w-5 h-5" />
                <span>{state.error}</span>
                <button
                  onClick={() => state.clearError?.()}
                  className="ml-2 text-red-400 hover:text-red-600"
                >
                  <X className="w-4 h-4" />
                </button>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Upload Success Message */}
          <AnimatePresence>
            {state.uploadSuccess && (
              <motion.div
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 50 }}
                className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-green-50 text-green-600 px-4 py-3 rounded-lg shadow-lg border border-green-100 flex items-center gap-2"
              >
                <CheckCircle className="w-5 h-5" />
                <span>تم رفع المستند بنجاح</span>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </Layout>
  );
};

export default DocumentsPage;
</file>

<file path="src\pages\LandingPage.tsx">
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { 
  MessageSquare, 
  Bot,
  Calendar, 
  FileText,
  Shield, 
  Zap,
  User,
  CheckCircle,
  ArrowLeft,
  Lightbulb,
  Target,
  TrendingUp,
  Clock,
  Settings
} from 'lucide-react';
import Layout from '../components/common/Layout';

const features = [
  {
    title: "مساعد ذكي 24/7",
    description: "احصل على إجابات فورية لجميع استفساراتك المتعلقة بالموارد البشرية في أي وقت",
    icon: Bot,
    gradient: "from-blue-500 to-cyan-500",
    benefits: [
      "دعم على مدار الساعة",
      "إجابات دقيقة وفورية",
      "تعلم مستمر وتحسين"
    ]
  },
  {
    title: "إدارة الإجازات الذكية",
    description: "تقديم وتتبع طلبات الإجازة بسهولة مع التحديثات المباشرة والموافقات التلقائية",
    icon: Calendar,
    gradient: "from-purple-500 to-pink-500",
    benefits: [
      "تقديم طلبات بنقرة واحدة",
      "تتبع الرصيد تلقائياً",
      "تنبيهات مباشرة"
    ]
  },
  {
    title: "إدارة المستندات السحابية",
    description: "تخزين ومشاركة وإدارة جميع مستندات الموارد البشرية في مكان واحد آمن",
    icon: FileText,
    gradient: "from-primary-500 to-yellow-500",
    benefits: [
      "تخزين آمن",
      "مشاركة سهلة",
      "بحث متقدم"
    ]
  },
  {
    title: "تحليلات وتقارير متقدمة",
    description: "رؤى تحليلية عميقة وتقارير تفصيلية لاتخاذ قرارات أفضل",
    icon: TrendingUp,
    gradient: "from-green-500 to-teal-500",
    benefits: [
      "لوحات تحكم تفاعلية",
      "تقارير مخصصة",
      "تنبؤات مستقبلية"
    ]
  }
];

const stats = [
  { number: "98%", label: "رضا المستخدمين" },
  { number: "60%", label: "توفير في الوقت" },
  { number: "24/7", label: "دعم متواصل" },
  { number: "500+", label: "شركة تستخدم النظام" }
];

const LandingPage = () => {
  return (
    <Layout>
      <HeroSection />
      <FeaturesSection />
      <DemoSection />
      <StatsSection />
      <TestimonialsSection />
      <CallToAction />
    </Layout>
  );
};

const HeroSection = () => {
  const navigate = useNavigate();
  const [isHovered, setIsHovered] = useState(false);

  return (
    <section className="relative min-h-screen flex items-center py-20 overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0 overflow-hidden">
        <motion.div
          animate={{
            scale: [1, 1.2, 1],
            rotate: [0, 90, 0],
          }}
          transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
          className="absolute -right-1/4 -top-1/4 w-1/2 h-1/2 bg-primary-100/30 rounded-full blur-3xl"
        />
        <motion.div
          animate={{
            scale: [1, 1.3, 1],
            rotate: [0, -90, 0],
          }}
          transition={{ duration: 25, repeat: Infinity, ease: "linear" }}
          className="absolute -left-1/4 -bottom-1/4 w-1/2 h-1/2 bg-purple-100/30 rounded-full blur-3xl"
        />
      </div>

      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          {/* Text Content */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center lg:text-right"
          >
           <motion.h1
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ delay: 0.2 }}
  className="text-5xl lg:text-6xl font-bold leading-normal" // Use leading-normal for better spacing
>
  <span className="block text-transparent bg-clip-text bg-gradient-to-r from-primary-600 to-purple-600">
    مستقبل إدارة
  </span>
  <span className="block text-gray-900">
    الموارد البشرية
  </span>
</motion.h1>

            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="mt-6 text-xl text-gray-600 max-w-2xl mx-auto lg:mx-0"
            >
              نظام ذكي يجمع بين قوة الذكاء الاصطناعي وخبرة الموارد البشرية لتقديم تجربة فريدة وفعالة
            </motion.p>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.6 }}
              className="mt-10 flex flex-col sm:flex-row gap-4 justify-center lg:justify-start"
            >
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onHoverStart={() => setIsHovered(true)}
                onHoverEnd={() => setIsHovered(false)}
                onClick={() => navigate('/chat')}
                className="px-8 py-4 bg-gradient-to-r from-primary-500 to-primary-700 text-white rounded-xl font-medium 
                         hover:shadow-lg hover:shadow-primary-500/25 transition-all relative overflow-hidden group"
              >
                <span className="relative z-10 flex items-center justify-center gap-2">
                  <Bot className="w-5 h-5" />
                  جرب المساعد الذكي
                </span>
                <motion.div
                  className="absolute inset-0 bg-gradient-to-r from-primary-600 to-purple-600"
                  initial={{ x: '-100%' }}
                  animate={{ x: isHovered ? '0%' : '-100%' }}
                  transition={{ duration: 0.3 }}
                />
              </motion.button>

              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => navigate('/login')}
                className="px-8 py-4 border-2 border-primary-500 text-primary-700 rounded-xl font-medium
                         hover:bg-primary-50 transition-all flex items-center justify-center gap-2"
              >
                <ArrowLeft className="w-5 h-5" />
                ابدأ الآن
              </motion.button>
            </motion.div>
          </motion.div>

          {/* Hero Image/Animation */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.4, duration: 0.8 }}
            className="relative"
          >
            <div className="relative w-full h-[600px] bg-gradient-to-br from-primary-100 to-purple-100 rounded-2xl overflow-hidden">
              {/* Animated Elements */}
              <motion.div
                animate={{
                  y: [0, -20, 0],
                }}
                transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
                className="absolute top-1/4 left-1/4 w-32 h-32 bg-white rounded-2xl shadow-xl p-6"
              >
                <Bot className="w-full h-full text-primary-500" />
              </motion.div>

              <motion.div
                animate={{
                  y: [0, 20, 0],
                }}
                transition={{ duration: 5, repeat: Infinity, ease: "easeInOut" }}
                className="absolute bottom-1/4 right-1/4 w-24 h-24 bg-white rounded-2xl shadow-xl p-4"
              >
                <Calendar className="w-full h-full text-purple-500" />
              </motion.div>

              {/* Add more animated elements as needed */}
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  );
};

const FeaturesSection = () => {
  return (
    <section className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center max-w-3xl mx-auto mb-16"
        >
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            ميزات متقدمة لتحسين إدارة الموارد البشرية
          </h2>
          <p className="text-xl text-gray-600">
            نظام متكامل يجمع بين أحدث التقنيات وأفضل الممارسات لتقديم تجربة فريدة
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={feature.title}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              whileHover={{ y: -5 }}
              className="relative group"
            >
              <div className="bg-white rounded-2xl shadow-lg p-8 transition-shadow hover:shadow-xl border border-gray-100">
                <div className={`w-14 h-14 rounded-xl bg-gradient-to-r ${feature.gradient} p-3 mb-6`}>
                  <feature.icon className="w-full h-full text-white" />
                </div>
                <h3 className="text-xl font-semibold mb-4">{feature.title}</h3>
                <p className="text-gray-600 mb-6">{feature.description}</p>
                <ul className="space-y-2">
                  {feature.benefits.map((benefit, i) => (
                    <li key={i} className="flex items-center gap-2 text-gray-600">
                      <CheckCircle className="w-5 h-5 text-primary-500" />
                      <span>{benefit}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

// I'll continue with the rest of the sections in the next response due to length...

const DemoSection = () => {
  const [activeTab, setActiveTab] = useState('chat');
  const navigate = useNavigate();

  const demoFeatures = {
    chat: {
      title: "المساعد الذكي",
      description: "احصل على إجابات فورية لجميع استفساراتك",
      icon: Bot,
      preview: (
        <div className="bg-white rounded-xl shadow-lg p-6 space-y-4">
          <div className="flex items-start gap-3">
            <div className="w-8 h-8 rounded-full bg-primary-500 flex items-center justify-center">
              <Bot className="w-4 h-4 text-white" />
            </div>
            <div className="flex-1 bg-gray-50 rounded-xl p-4">
              <p className="text-gray-800">كيف يمكنني المساعدة اليوم؟</p>
            </div>
          </div>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="flex items-start gap-3"
          >
            <div className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center">
              <User className="w-4 h-4 text-gray-600" />
            </div>
            <div className="flex-1 bg-primary-50 rounded-xl p-4">
              <p className="text-primary-900">أريد معرفة رصيد إجازاتي</p>
            </div>
          </motion.div>
        </div>
      )
    },
    vacation: {
      title: "إدارة الإجازات",
      description: "قدم وتتبع طلبات الإجازة بسهولة",
      icon: Calendar,
      preview: (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <h4 className="font-medium">رصيد الإجازات</h4>
              <span className="text-primary-600 font-bold">21 يوم</span>
            </div>
            <div className="h-2 bg-gray-100 rounded-full overflow-hidden">
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: "60%" }}
                className="h-full bg-primary-500"
                transition={{ duration: 1, ease: "easeOut" }}
              />
            </div>
          </div>
        </div>
      )
    },
    documents: {
      title: "إدارة المستندات",
      description: "احفظ وشارك المستندات بأمان",
      icon: FileText,
      preview: (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="grid grid-cols-2 gap-4">
            {[1, 2, 3, 4].map((i) => (
              <motion.div
                key={i}
                whileHover={{ scale: 1.05 }}
                className="p-4 border rounded-lg flex items-center gap-2"
              >
                <FileText className="w-5 h-5 text-primary-500" />
                <span className="text-sm">مستند {i}</span>
              </motion.div>
            ))}
          </div>
        </div>
      )
    }
  };

  return (
    <section className="py-20 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center max-w-3xl mx-auto mb-16"
        >
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            جرب النظام بنفسك
          </h2>
          <p className="text-xl text-gray-600">
            استكشف ميزات النظام الرئيسية من خلال العرض التفاعلي
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          {/* Feature Tabs */}
          <div className="space-y-6">
            {Object.entries(demoFeatures).map(([key, feature]) => (
              <motion.button
                key={key}
                onClick={() => setActiveTab(key)}
                className={`w-full text-right p-6 rounded-xl transition-all ${
                  activeTab === key
                    ? 'bg-white shadow-lg border-primary-500 border-2'
                    : 'bg-white/50 hover:bg-white'
                }`}
                whileHover={{ x: activeTab === key ? 0 : 5 }}
              >
                <div className="flex items-start gap-4">
                  <div className={`p-3 rounded-lg ${
                    activeTab === key
                      ? 'bg-primary-50 text-primary-600'
                      : 'bg-gray-100 text-gray-600'
                  }`}>
                    <feature.icon className="w-6 h-6" />
                  </div>
                  <div>
                    <h3 className={`font-semibold mb-1 ${
                      activeTab === key ? 'text-primary-900' : 'text-gray-900'
                    }`}>
                      {feature.title}
                    </h3>
                    <p className="text-gray-600">
                      {feature.description}
                    </p>
                  </div>
                </div>
              </motion.button>
            ))}
          </div>

          {/* Preview Area */}
          <div className="bg-gray-100 rounded-2xl p-8">
            <AnimatePresence mode="wait">
              <motion.div
                key={activeTab}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
              >
                {demoFeatures[activeTab as keyof typeof demoFeatures].preview}
              </motion.div>
            </AnimatePresence>
          </div>
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mt-12"
        >
          <button
            onClick={() => navigate('/chat')}
            className="px-8 py-4 bg-primary-600 text-white rounded-xl hover:bg-primary-700 transition-colors"
          >
            جرب النظام مجاناً
          </button>
        </motion.div>
      </div>
    </section>
  );
};

const StatsSection = () => {
  return (
    <section className="py-20 bg-gradient-to-br from-primary-900 via-primary-800 to-purple-900 text-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl font-bold mb-4 text-white">
            أرقام تتحدث عن نجاحنا
          </h2>
          <p className="text-xl text-gray-100">
            نتائج ملموسة تؤكد فعالية نظامنا
          </p>
        </motion.div>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          {stats.map((stat, index) => (
            <motion.div
              key={stat.label}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className="text-center"
            >
              <motion.div
                initial={{ scale: 0 }}
                whileInView={{ scale: 1 }}
                viewport={{ once: true }}
                transition={{
                  type: "spring",
                  delay: index * 0.2 + 0.3,
                  duration: 0.8
                }}
                className="mb-4"
              >
                <span className="text-4xl lg:text-5xl font-bold bg-gradient-to-r from-white to-primary-200 bg-clip-text text-transparent">
                  {stat.number}
                </span>
              </motion.div>
              <p className="text-gray-100">{stat.label}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const TestimonialsSection = () => {
  const testimonials = [
    {
      content: "النظام ساعدنا في تحسين كفاءة إدارة الموارد البشرية بشكل كبير. توفير الوقت والجهد كان ملحوظاً.",
      author: "سارة العمري",
      position: "مدير الموارد البشرية",
      company: "شركة التقنية المتقدمة"
    },
    {
      content: "المساعد الذكي يقدم إجابات دقيقة وسريعة لاستفسارات الموظفين. لم نعد نحتاج للرد على الأسئلة المتكررة.",
      author: "محمد الأحمد",
      position: "مدير التطوير التنظيمي",
      company: "مجموعة الابتكار"
    },
    {
      content: "نظام إدارة الإجازات أصبح أكثر سلاسة وفعالية. الموظفون سعداء بالتجربة الجديدة.",
      author: "نورة السالم",
      position: "مدير عمليات الموارد البشرية",
      company: "شركة التطوير العقاري"
    }
  ];

  return (
    <section className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            ماذا يقول عملاؤنا
          </h2>
          <p className="text-xl text-gray-600">
            قصص نجاح حقيقية من عملائنا
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {testimonials.map((testimonial, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className="bg-gray-50 rounded-2xl p-8 relative"
            >
              <div className="absolute top-0 right-0 transform -translate-y-1/2 translate-x-1/2">
                <div className="w-12 h-12 rounded-full bg-primary-500 flex items-center justify-center">
                  <MessageSquare className="w-6 h-6 text-white" />
                </div>
              </div>
              
              <p className="text-gray-600 mb-6">{testimonial.content}</p>
              
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 flex items-center justify-center">
                  <span className="text-lg font-bold text-white">
                    {testimonial.author[0]}
                  </span>
                </div>
                <div>
                  <h4 className="font-semibold text-gray-900">
                    {testimonial.author}
                  </h4>
                  <p className="text-sm text-gray-500">
                    {testimonial.position}
                  </p>
                  <p className="text-sm text-primary-600">
                    {testimonial.company}
                  </p>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const CallToAction = () => {
  const navigate = useNavigate();
  
  return (
    <section className="py-20 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="relative bg-gradient-to-r from-primary-500 to-purple-500 rounded-3xl overflow-hidden"
        >
          <div className="relative z-10 px-8 py-16 text-center text-white">
            <motion.h2
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              className="text-3xl md:text-4xl font-bold mb-6"
            >
              جاهز لتجربة مستقبل الموارد البشرية؟
            </motion.h2>
            
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: 0.2 }}
              className="text-xl mb-8 text-white/90 max-w-2xl mx-auto"
            >
              ابدأ اليوم واكتشف كيف يمكن لمساعدنا الذكي تحسين كفاءة إدارة الموارد البشرية
            </motion.p>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: 0.4 }}
              className="flex flex-col sm:flex-row gap-4 justify-center"
            >
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => navigate('/chat')}
                className="px-8 py-4 bg-white text-primary-600 rounded-xl font-medium 
                         hover:bg-gray-50 transition-all flex items-center justify-center gap-2"
              >
                <Bot className="w-5 h-5" />
                جرب المساعد الذكي
              </motion.button>

              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => navigate('/login')}
                className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-xl 
                         font-medium hover:bg-white/10 transition-all flex items-center justify-center gap-2"
              >
                <ArrowLeft className="w-5 h-5" />
                سجل الآن
              </motion.button>
            </motion.div>
          </div>

          {/* Decorative Elements */}
          <motion.div
            animate={{
              rotate: 360,
              scale: [1, 1.2, 1],
            }}
            transition={{
              duration: 20,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute -left-20 -top-20 w-60 h-60 bg-white/10 rounded-full blur-2xl"
          />
          <motion.div
            animate={{
              rotate: -360,
              scale: [1, 1.3, 1],
            }}
            transition={{
              duration: 25,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute -right-20 -bottom-20 w-60 h-60 bg-white/10 rounded-full blur-2xl"
          />
        </motion.div>

        {/* Bottom Feature Cards */}
        <div className="mt-20 grid grid-cols-1 md:grid-cols-3 gap-8">
          {[
            {
              title: "دعم فني متميز",
              description: "فريق دعم متخصص جاهز لمساعدتك",
              icon: Settings,
              color: "text-primary-500"
            },
            {
              title: "تحديثات مستمرة",
              description: "تطوير مستمر لتلبية احتياجاتك",
              icon: Zap,
              color: "text-purple-500"
            },
            {
              title: "أمان عالي",
              description: "حماية متقدمة لبياناتك",
              icon: Shield,
              color: "text-green-500"
            }
          ].map((feature, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className="text-center"
            >
              <div className="inline-block p-3 bg-gray-100 rounded-xl mb-4">
                <feature.icon className={`w-6 h-6 ${feature.color}`} />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {feature.title}
              </h3>
              <p className="text-gray-600">{feature.description}</p>
            </motion.div>
          ))}
        </div>

        {/* FAQ Section */}
        <div className="mt-20">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-center mb-12"
          >
            <h2 className="text-3xl font-bold text-gray-900 mb-4">الأسئلة الشائعة</h2>
            <p className="text-xl text-gray-600">إجابات على الأسئلة الأكثر شيوعاً</p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {[
              {
                question: "كيف يمكنني البدء باستخدام النظام؟",
                answer: "يمكنك البدء مباشرة بالتسجيل وإنشاء حساب جديد. بعد ذلك، ستتمكن من استخدام جميع ميزات النظام."
              },
              {
                question: "هل النظام آمن لحفظ البيانات؟",
                answer: "نعم، نستخدم أحدث تقنيات التشفير وأنظمة الحماية لضمان أمان بياناتك."
              },
              {
                question: "هل يمكن تخصيص النظام لاحتياجاتنا؟",
                answer: "نعم، يمكن تخصيص النظام بالكامل ليتناسب مع احتياجات مؤسستك."
              },
              {
                question: "كيف يمكنني الحصول على الدعم الفني؟",
                answer: "نوفر دعماً فنياً على مدار الساعة عبر المحادثة المباشرة والبريد الإلكتروني."
              }
            ].map((faq, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ delay: index * 0.1 }}
                className="bg-white p-6 rounded-xl shadow-sm"
              >
                <h4 className="font-semibold text-gray-900 mb-2">{faq.question}</h4>
                <p className="text-gray-600">{faq.answer}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default LandingPage;
</file>

<file path="src\pages\LoginPage.tsx">
// src/pages/LoginPage.tsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { Eye, EyeOff, User, Lock, AlertCircle } from 'lucide-react';
import Layout from '../components/common/Layout';
import { useAuth } from '../context/AuthContext';

interface FormErrors {
  username?: string;
  password?: string;
  submit?: string;
}

const LoginPage = () => {
  const navigate = useNavigate();
  const { login, isAuthenticated } = useAuth();
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState<FormErrors>({});
  const [isLoading, setIsLoading] = useState(false);

  // Check if user is already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/chat');
    }
  }, [isAuthenticated, navigate]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    // Clear error when user starts typing
    if (errors[name as keyof FormErrors]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};
    if (!formData.username.trim()) {
      newErrors.username = 'اسم المستخدم مطلوب';
    }
    if (!formData.password) {
      newErrors.password = 'كلمة المرور مطلوبة';
    } else if (formData.password.length < 6) {
      newErrors.password = 'كلمة المرور يجب أن تكون 6 أحرف على الأقل';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
  
    setIsLoading(true);
    try {
      await login(formData.username, formData.password);
      navigate('/chat');
    } catch (error: any) {
      setErrors({
        submit: error.message || 'فشل تسجيل الدخول. يرجى التحقق من اسم المستخدم وكلمة المرور.',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout>
      <div className="min-h-screen pt-16 pb-12 flex flex-col bg-gradient-to-br from-primary-50 via-white to-purple-50">
        <div className="flex-grow flex items-center justify-center px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="max-w-md w-full"
          >
            <div className="bg-white/80 backdrop-blur-lg rounded-2xl shadow-xl p-8 border border-gray-100">
              <div className="text-center mb-8">
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="h-20 w-20 bg-gradient-to-r from-primary-500 to-purple-500 rounded-full mx-auto mb-4 flex items-center justify-center"
                >
                  <User className="h-10 w-10 text-white" />
                </motion.div>
                <h2 className="text-2xl font-bold text-gray-900">مرحباً بعودتك</h2>
                <p className="text-gray-600 mt-2">سجل دخولك للوصول إلى لوحة التحكم</p>
              </div>

              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Username Field */}
                <div>
                  <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-1">
                    اسم المستخدم
                  </label>
                  <div className="relative">
                    <input
                      id="username"
                      name="username"
                      type="text"
                      value={formData.username}
                      onChange={handleChange}
                      className={`block w-full px-4 py-3 rounded-lg bg-gray-50 border ${
                        errors.username ? 'border-red-500' : 'border-gray-200'
                      } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:bg-white transition-colors`}
                      dir="rtl"
                    />
                    {errors.username && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="mt-1 text-red-500 text-sm flex items-center gap-1"
                      >
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.username}</span>
                      </motion.div>
                    )}
                  </div>
                </div>

                {/* Password Field */}
                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                    كلمة المرور
                  </label>
                  <div className="relative">
                    <input
                      id="password"
                      name="password"
                      type={showPassword ? 'text' : 'password'}
                      value={formData.password}
                      onChange={handleChange}
                      className={`block w-full px-4 py-3 rounded-lg bg-gray-50 border ${
                        errors.password ? 'border-red-500' : 'border-gray-200'
                      } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:bg-white transition-colors`}
                      dir="rtl"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
                    >
                      {showPassword ? (
                        <EyeOff className="w-5 h-5" />
                      ) : (
                        <Eye className="w-5 h-5" />
                      )}
                    </button>
                    {errors.password && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="mt-1 text-red-500 text-sm flex items-center gap-1"
                      >
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.password}</span>
                      </motion.div>
                    )}
                  </div>
                </div>

                {errors.submit && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="text-red-500 text-sm text-center"
                  >
                    {errors.submit}
                  </motion.div>
                )}

                {/* Submit Button */}
                <motion.button
                  whileHover={{ scale: 1.01 }}
                  whileTap={{ scale: 0.99 }}
                  type="submit"
                  disabled={isLoading}
                  className="w-full py-3 px-4 rounded-lg bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium hover:shadow-lg transition-shadow disabled:opacity-70 disabled:cursor-not-allowed"
                >
                  {isLoading ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="w-5 h-5 border-2 border-white border-t-transparent rounded-full mx-auto"
                    />
                  ) : (
                    'تسجيل الدخول'
                  )}
                </motion.button>
              </form>
            </div>
          </motion.div>
        </div>
      </div>
    </Layout>
  );
};

export default LoginPage;
</file>

<file path="src\pages\TicketsPage.tsx">
import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Clock, 
  CheckCircle, 
  XCircle, 
  Search, 
  Filter,
  ChevronDown,
  ChevronUp,
  Calendar,
  AlertCircle,
  MessageCircle,
  User,
  FileText,
  BarChart3
} from 'lucide-react';
import Layout from '../components/common/Layout';
import { useTickets } from '../hooks/useTickets';
import ContentSkeleton from '../components/common/ContentSkeleton';
import { formatDate } from '../utils/data';

const TicketsPage = () => {
  const { state, fetchTickets } = useTickets();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [typeFilter, setTypeFilter] = useState('all');
  const [expandedTickets, setExpandedTickets] = useState<string[]>([]);

  useEffect(() => {
    fetchTickets();
  }, [fetchTickets]);

  // Filter tickets based on search and filters
  const filteredTickets = state.tickets.filter(ticket => {
    const matchesSearch = 
      ticket.ticket_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      ticket.employee_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      ticket.summary?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      ticket.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      false;
    
    const matchesStatus = statusFilter === 'all' || ticket.status === statusFilter;
    const matchesType = typeFilter === 'all' || 
                       (ticket.ticket_id?.startsWith('VT-') ? 'vacation' : 'support') === typeFilter;
    
    return matchesSearch && matchesStatus && matchesType;
  });

  // Calculate stats
  const stats = {
    total: state.tickets.length,
    vacation: state.tickets.filter(t => t.ticket_id?.startsWith('VT-')).length,
    support: state.tickets.filter(t => t.ticket_id?.startsWith('ST-')).length,
    open: state.tickets.filter(t => t.status === 'open').length,
    pending: state.tickets.filter(t => t.status === 'pending').length,
    approved: state.tickets.filter(t => t.status === 'approved').length,
    rejected: state.tickets.filter(t => t.status === 'rejected').length
  };

  const toggleTicketExpansion = (ticketId: string) => {
    setExpandedTickets(prev => 
      prev.includes(ticketId) 
        ? prev.filter(id => id !== ticketId)
        : [...prev, ticketId]
    );
  };

  const StatusBadge = ({ status }: { status: string }) => {
    const config = {
      open: {
        icon: Clock,
        class: 'bg-blue-100 text-blue-800',
        text: 'مفتوح'
      },
      pending: {
        icon: Clock,
        class: 'bg-yellow-100 text-yellow-800',
        text: 'قيد المراجعة'
      },
      approved: {
        icon: CheckCircle,
        class: 'bg-green-100 text-green-800',
        text: 'تمت الموافقة'
      },
      rejected: {
        icon: XCircle,
        class: 'bg-red-100 text-red-800',
        text: 'مرفوض'
      }
    }[status] || {
      icon: Clock,
      class: 'bg-gray-100 text-gray-800',
      text: status
    };

    const Icon = config.icon;

    return (
      <span className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-xs font-medium ${config.class}`}>
        <Icon className="w-4 h-4" />
        {config.text}
      </span>
    );
  };

  return (
    <Layout>
      <div className="container mx-auto p-4">
        {/* Header Section */}
        <div className="text-right mb-8">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">إدارة التذاكر والطلبات</h1>
          <p className="text-gray-600">عرض وإدارة جميع طلبات وتذاكر الموظفين</p>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          {/* Total Tickets */}
          <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-200">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-100 rounded-lg">
                <FileText className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <p className="text-sm text-gray-500">إجمالي التذاكر</p>
                <p className="text-2xl font-bold text-blue-600">{stats.total}</p>
              </div>
            </div>
          </div>

          {/* Open/Pending */}
          <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-200">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <Clock className="w-6 h-6 text-yellow-600" />
              </div>
              <div>
                <p className="text-sm text-gray-500">قيد المعالجة</p>
                <p className="text-2xl font-bold text-yellow-600">
                  {stats.open + stats.pending}
                </p>
              </div>
            </div>
          </div>

          {/* Vacation Requests */}
          <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-200">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-green-100 rounded-lg">
                <Calendar className="w-6 h-6 text-green-600" />
              </div>
              <div>
                <p className="text-sm text-gray-500">طلبات الإجازات</p>
                <p className="text-2xl font-bold text-green-600">{stats.vacation}</p>
              </div>
            </div>
          </div>

          {/* Support Tickets */}
          <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-200">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-purple-100 rounded-lg">
                <MessageCircle className="w-6 h-6 text-purple-600" />
              </div>
              <div>
                <p className="text-sm text-gray-500">تذاكر الدعم</p>
                <p className="text-2xl font-bold text-purple-600">{stats.support}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Filters Section */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Search */}
            <div className="relative">
              <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="بحث في التذاكر..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pr-10 pl-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500"
                dir="rtl"
              />
            </div>

            {/* Status Filter */}
            <div className="relative">
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="w-full px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 appearance-none"
                dir="rtl"
              >
                <option value="all">جميع الحالات</option>
                <option value="open">مفتوح</option>
                <option value="pending">قيد المراجعة</option>
                <option value="approved">تمت الموافقة</option>
                <option value="rejected">مرفوض</option>
              </select>
              <Filter className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            </div>

            {/* Type Filter */}
            <div className="relative">
              <select
                value={typeFilter}
                onChange={(e) => setTypeFilter(e.target.value)}
                className="w-full px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 appearance-none"
                dir="rtl"
              >
                <option value="all">جميع الأنواع</option>
                <option value="vacation">طلبات الإجازات</option>
                <option value="support">تذاكر الدعم</option>
              </select>
              <Filter className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            </div>
          </div>
        </div>

        {/* Tickets List */}
        <div className="space-y-4">
          {state.isLoading ? (
            <ContentSkeleton type="list" count={5} />
          ) : filteredTickets.map((ticket) => (
            <motion.div
              key={ticket.ticket_id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden"
            >
              {/* Ticket Header */}
              <div 
                className="p-4 flex items-center justify-between cursor-pointer hover:bg-gray-50"
                onClick={() => toggleTicketExpansion(ticket.ticket_id)}
              >
                <div className="flex items-center gap-4 flex-grow">
                  {ticket.ticket_id?.startsWith('VT-') ? (
                    <Calendar className="w-5 h-5 text-green-500" />
                  ) : (
                    <MessageCircle className="w-5 h-5 text-purple-500" />
                  )}
                  <div className="min-w-0 flex-1">
                    <div className="flex justify-between items-start">
                      <div>
                        <div className="font-medium text-gray-900">{ticket.ticket_id}</div>
                        <div className="text-sm text-gray-500">{ticket.summary || 'بدون عنوان'}</div>
                      </div>
                      <StatusBadge status={ticket.status} />
                    </div>
                  </div>
                  <ChevronDown className={`w-5 h-5 text-gray-400 transform transition-transform ${
                    expandedTickets.includes(ticket.ticket_id) ? 'rotate-180' : ''
                  }`} />
                </div>
              </div>

              {/* Ticket Details */}
              <AnimatePresence>
                {expandedTickets.includes(ticket.ticket_id) && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: "auto", opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    className="border-t border-gray-200"
                  >
                    <div className="p-4 bg-gray-50">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        {/* Request Info */}
                        <div className="rtl">
                          <h3 className="text-sm font-medium text-gray-500 mb-2">معلومات الطلب</h3>
                          <div className="bg-white rounded-lg p-3 space-y-2">
                            <div className="flex items-center gap-2">
                              <User className="w-4 h-4 text-gray-400" />
                              <span className="text-sm text-gray-600">
                                معرف الموظف: {ticket.employee_id}
                              </span>
                            </div>
                            {ticket.request_date && (
                              <div className="flex items-center gap-2">
                                <Calendar className="w-4 h-4 text-gray-400" />
                                <span className="text-sm text-gray-600">
                                  تاريخ الطلب: {formatDate(ticket.request_date)}
                                </span>
                              </div>
                            )}
                            {ticket.start_date && ticket.end_date && (
                              <div className="text-sm text-gray-600">
                                فترة الإجازة: {formatDate(ticket.start_date)} - {formatDate(ticket.end_date)}
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Description */}
                        {ticket.description && (
                          <div className="rtl">
                            <h3 className="text-sm font-medium text-gray-500 mb-2">تفاصيل الطلب</h3>
                            <div className="bg-white rounded-lg p-3">
                              <p className="text-sm text-gray-600">{ticket.description}</p>
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Notes */}
                      {ticket.notes && (
                        <div className="bg-yellow-50 rounded-lg p-3 mt-4 rtl">
                          <h3 className="text-sm font-medium text-yellow-800 mb-1">ملاحظات</h3>
                          <p className="text-sm text-yellow-600">{ticket.notes}</p>
                        </div>
                      )}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          ))}

          {filteredTickets.length === 0 && !state.isLoading && (
            <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-gray-100 rounded-full mb-4">
                <AlertCircle className="h-8 w-8 text-gray-400" />
                </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">لا توجد نتائج</h3>
              <p className="text-gray-500">
                لم يتم العثور على تذاكر تطابق معايير البحث الخاصة بك
              </p>
              {searchTerm || statusFilter !== 'all' || typeFilter !== 'all' ? (
                <button
                  onClick={() => {
                    setSearchTerm('');
                    setStatusFilter('all');
                    setTypeFilter('all');
                  }}
                  className="mt-4 text-primary-600 hover:text-primary-700 font-medium inline-flex items-center gap-1"
                >
                  <XCircle className="w-4 h-4" />
                  إزالة عوامل التصفية
                </button>
              ) : null}
            </div>
          )}
        </div>

        {/* Mobile Stats Summary (Fixed Bottom) */}
        <div className="md:hidden fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg p-2">
          <div className="grid grid-cols-4 gap-2 text-center">
            <div>
              <div className="text-xs text-gray-500">الكل</div>
              <div className="font-bold text-gray-900">{stats.total}</div>
            </div>
            <div>
              <div className="text-xs text-gray-500">مفتوح</div>
              <div className="font-bold text-yellow-600">{stats.open + stats.pending}</div>
            </div>
            <div>
              <div className="text-xs text-gray-500">إجازات</div>
              <div className="font-bold text-green-600">{stats.vacation}</div>
            </div>
            <div>
              <div className="text-xs text-gray-500">دعم</div>
              <div className="font-bold text-purple-600">{stats.support}</div>
            </div>
          </div>
        </div>
      </div>

      {/* Add necessary CSS to index.css */}
      <style>{`
        .rtl {
          direction: rtl;
          text-align: right;
        }

        @media (max-width: 768px) {
          .container {
            padding-bottom: 60px; /* Space for fixed stats bar */
          }
        }
      `}</style>
    </Layout>
  );
};

export default TicketsPage;
</file>

<file path="src\pages\VacationPage.tsx">
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Calendar, Clock, CheckCircle, AlertCircle, X, Loader2 } from 'lucide-react';
import { useAuth } from '../hooks/useAuth';

const API_BASE_URL = 'http://localhost:5000';

const VACATION_TYPES = [
  { value: 'annual', label: 'إجازة سنوية' },
  { value: 'sick', label: 'إجازة مرضية' },
  { value: 'emergency', label: 'إجازة طارئة' }
];

const VacationPage = () => {
  const { user } = useAuth();
  const [balance, setBalance] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  const [formData, setFormData] = useState({
    request_type: 'annual',
    start_date: '',
    end_date: '',
    notes: ''
  });
  const [formErrors, setFormErrors] = useState({});

  // Fetch balance data
  const fetchBalance = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/employee/vacation-balance/${user?.id}`);
      const data = await response.json();

      if (!response.ok) throw new Error(data.message || 'Failed to fetch balance');
      
      if (data.status === 'success') {
        setBalance({
          annual_balance: data.annual_balance || 0,
          used_days: data.used_days || 0,
          remaining_balance: data.remaining_balance || 0,
          name: data.name,
          employee_id: data.employee_id,
          last_updated: data.last_updated
        });
      }
    } catch (err) {
      console.error('Balance fetch error:', err);
      setError(err.message || 'Failed to fetch balance');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (user?.id) {
      fetchBalance();
    }
  }, [user?.id]);

  // Form validation
  const validateForm = () => {
    const errors = {};
    const today = new Date();
    const startDate = new Date(formData.start_date);
    const endDate = new Date(formData.end_date);

    if (!formData.start_date) {
      errors.start_date = 'تاريخ البداية مطلوب';
    } else if (startDate < today) {
      errors.start_date = 'لا يمكن اختيار تاريخ في الماضي';
    }

    if (!formData.end_date) {
      errors.end_date = 'تاريخ النهاية مطلوب';
    } else if (endDate < startDate) {
      errors.end_date = 'تاريخ النهاية يجب أن يكون بعد تاريخ البداية';
    }

    if (formData.notes && formData.notes.length > 500) {
      errors.notes = 'الملاحظات يجب أن لا تتجاوز 500 حرف';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setSuccessMessage(null);

    if (!validateForm()) return;

    setIsSubmitting(true);
    try {
      const response = await fetch(`${API_BASE_URL}/api/employee/vacation-request`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user?.token}` // Add if you're using token authentication
        },
        body: JSON.stringify({
          employee_id: user?.id,
          ...formData
        })
      });

      const data = await response.json();

      if (!response.ok) throw new Error(data.message || 'Failed to submit request');

      if (data.status === 'success') {
        setSuccessMessage('تم تقديم طلب الإجازة بنجاح');
        setFormData({
          request_type: 'annual',
          start_date: '',
          end_date: '',
          notes: ''
        });
        fetchBalance();
      }
    } catch (err) {
      setError(err.message || 'Failed to submit request');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Balance display component
  const BalanceDisplay = () => (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden">
      <div className="p-6">
        <h2 className="text-xl font-bold mb-6">رصيد الإجازات</h2>
        {isLoading ? (
          <div className="flex items-center justify-center py-8">
            <Loader2 className="w-8 h-8 animate-spin text-blue-500" />
          </div>
        ) : balance ? (
          <div>
            <div className="grid grid-cols-3 gap-4 mb-6">
              <div className="bg-blue-50 rounded-lg p-4">
                <div className="text-blue-600 text-sm font-medium mb-1">الرصيد السنوي</div>
                <div className="text-3xl font-bold text-blue-700">
                  {balance.annual_balance}
                </div>
                <div className="text-sm text-blue-500 mt-1">يوم</div>
              </div>

              <div className="bg-amber-50 rounded-lg p-4">
                <div className="text-amber-600 text-sm font-medium mb-1">المستخدم</div>
                <div className="text-3xl font-bold text-amber-700">
                  {balance.used_days}
                </div>
                <div className="text-sm text-amber-500 mt-1">يوم</div>
              </div>

              <div className="bg-green-50 rounded-lg p-4">
                <div className="text-green-600 text-sm font-medium mb-1">المتبقي</div>
                <div className="text-3xl font-bold text-green-700">
                  {balance.remaining_balance}
                </div>
                <div className="text-sm text-green-500 mt-1">يوم</div>
              </div>
            </div>

            {balance.last_updated && (
              <div className="flex items-center gap-2 text-gray-500 text-sm">
                <Clock className="w-4 h-4" />
                آخر تحديث: {new Date(balance.last_updated).toLocaleDateString('ar-SA')}
              </div>
            )}

            <div className="mt-4 p-4 bg-blue-50 rounded-lg">
              <div className="font-medium text-blue-800 mb-1">معلومات الموظف</div>
              <div className="text-blue-600">{balance.name}</div>
              <div className="text-sm text-blue-500">رقم الموظف: {balance.employee_id}</div>
            </div>
          </div>
        ) : (
          <div className="text-center text-gray-500 py-8">
            لا يوجد معلومات متوفرة عن الرصيد
          </div>
        )}
      </div>
    </div>
  );

  // Request form component
  const RequestForm = () => (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden">
      <div className="p-6">
        <h2 className="text-xl font-bold mb-6">طلب إجازة جديد</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              نوع الإجازة
            </label>
            <select
              value={formData.request_type}
              onChange={(e) => setFormData({ ...formData, request_type: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              {VACATION_TYPES.map(type => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                تاريخ البداية
              </label>
              <input
                type="date"
                value={formData.start_date}
                onChange={(e) => {
                  setFormData({ ...formData, start_date: e.target.value });
                  setFormErrors({ ...formErrors, start_date: null });
                }}
                className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
                  formErrors.start_date ? 'border-red-500' : 'border-gray-300'
                }`}
                min={new Date().toISOString().split('T')[0]}
                required
              />
              {formErrors.start_date && (
                <p className="mt-1 text-sm text-red-500">{formErrors.start_date}</p>
              )}
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                تاريخ النهاية
              </label>
              <input
                type="date"
                value={formData.end_date}
                onChange={(e) => {
                  setFormData({ ...formData, end_date: e.target.value });
                  setFormErrors({ ...formErrors, end_date: null });
                }}
                className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
                  formErrors.end_date ? 'border-red-500' : 'border-gray-300'
                }`}
                min={formData.start_date || new Date().toISOString().split('T')[0]}
                required
              />
              {formErrors.end_date && (
                <p className="mt-1 text-sm text-red-500">{formErrors.end_date}</p>
              )}
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ملاحظات
            </label>
            <textarea
              value={formData.notes}
              onChange={(e) => {
                setFormData({ ...formData, notes: e.target.value });
                setFormErrors({ ...formErrors, notes: null });
              }}
              className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 resize-none ${
                formErrors.notes ? 'border-red-500' : 'border-gray-300'
              }`}
              rows={3}
              placeholder="أضف أي ملاحظات إضافية هنا..."
            />
            {formErrors.notes && (
              <p className="mt-1 text-sm text-red-500">{formErrors.notes}</p>
            )}
          </div>

          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            {isSubmitting && <Loader2 className="w-4 h-4 animate-spin" />}
            {isSubmitting ? 'جاري التقديم...' : 'تقديم الطلب'}
          </button>
        </form>

        <AnimatePresence>
          {successMessage && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0 }}
              className="mt-4 p-3 bg-green-50 text-green-600 rounded-lg flex items-center gap-2"
            >
              <CheckCircle className="w-5 h-5" />
              {successMessage}
              <button
                onClick={() => setSuccessMessage(null)}
                className="mr-auto hover:bg-green-100 p-1 rounded-full"
              >
                <X className="w-4 h-4" />
              </button>
            </motion.div>
          )}

          {error && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0 }}
              className="mt-4 p-3 bg-red-50 text-red-600 rounded-lg flex items-center gap-2"
            >
              <AlertCircle className="w-5 h-4" />
              {error}
              <button
                onClick={() => setError(null)}
                className="mr-auto hover:bg-red-100 p-1 rounded-full"
              >
                <X className="w-4 h-4" />
              </button>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-8">إدارة الإجازات</h1>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <BalanceDisplay />
        <RequestForm />
      </div>
    </div>
  );
};

export default VacationPage;
</file>

<file path="src\services\api.ts">
// src/services/api.ts
import axios, { AxiosInstance, AxiosError, AxiosResponse } from 'axios';

// Types
export interface ApiError {
  message: string;
  status?: number;
  details?: any;
}

export interface ApiResponse<T = any> {
  data: T;
  error?: ApiError;
}

class ApiService {
  private api: AxiosInstance;

  constructor() {
    this.api = axios.create({
      baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    // Response interceptor
    this.api.interceptors.response.use(
      (response: AxiosResponse) => response,
      (error: AxiosError) => {
        const apiError: ApiError = {
          message: 'حدث خطأ في الاتصال',
          status: error.response?.status,
        };

        if (error.response) {
          // Server responded with error
          const data = error.response.data as any;
          apiError.message = data.error || data.message || 'حدث خطأ في الخادم';
          apiError.details = data;
        } else if (error.request) {
          // Request made but no response
          apiError.message = 'لا يمكن الوصول إلى الخادم';
        }

        return Promise.reject(apiError);
      }
    );
  }

  // Generic GET request
  async get<T>(url: string, params?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.get<T>(url, { params });
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic POST request
  async post<T>(url: string, data?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.post<T>(url, data);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic PUT request
  async put<T>(url: string, data?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.put<T>(url, data);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic DELETE request
  async delete<T>(url: string): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.delete<T>(url);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Error handler
  private handleError(error: any): ApiError {
    if (error.status === 401) {
      // Handle unauthorized access
      // You might want to redirect to login or refresh token
      console.log('Unauthorized access');
    }
    return error;
  }

  // Get the underlying axios instance
  getInstance(): AxiosInstance {
    return this.api;
  }
}

// Export a singleton instance
export const apiService = new ApiService();
export default apiService;
</file>

<file path="src\services\auth.ts">
// src/services/auth.ts
import apiService from './api';
import { User } from '../types/api';

export interface LoginResponse {
  status: string;
  user: User;
}

export interface LoginCredentials {
  username: string;
  password: string;
}

class AuthService {
  async login(credentials: LoginCredentials): Promise<LoginResponse> {
    const response = await apiService.post<LoginResponse>('/api/auth/login', credentials);
    return response.data;
  }

  logout(): void {
    // Clear any stored auth data
    localStorage.removeItem('user');
  }
}

export const authService = new AuthService();
export default authService;
</file>

<file path="src\services\chat.ts">
// src/services/chat.ts

import apiService from './api';
import { ChatMessage, ChatResponse, MessageType } from '../types/chat';
import { API_ENDPOINTS } from '../constants';

class ChatService {
  async sendMessage(
    content: string,
    type: MessageType = 'text',
    metadata?: any,
    employee_id?: string
  ): Promise<ChatResponse> {
    const response = await apiService.post<ChatResponse>(API_ENDPOINTS.CHAT, {
      message: content,
      type,
      metadata,
      employee_id
    });
    return response.data;
  }

  async getChatHistory(employee_id: string): Promise<ChatMessage[]> {
    const response = await apiService.get<{ history: ChatMessage[] }>(
      `${API_ENDPOINTS.CHAT}/history/${employee_id}`
    );
    return response.data.history.map(msg => ({
      ...msg,
      timestamp: new Date(msg.timestamp)
    }));
  }

  async requestVacationBalance(employee_id: string): Promise<ChatResponse> {
    return this.sendMessage(
      'عرض رصيد الإجازات',
      'vacation_balance',
      { employee_id }
    );
  }

  async initiateVacationRequest(employee_id: string): Promise<ChatResponse> {
    return this.sendMessage(
      'تقديم طلب إجازة',
      'vacation_request',
      { employee_id }
    );
  }
}

export const chatService = new ChatService();
export default chatService;
</file>

<file path="src\services\documents.ts">
// src/services/documents.ts
import apiService from './api';
import { 
  DocumentMetadata,
  DocumentListResponse,
  DocumentUploadResponse,
  AllowedFileType 
} from '../types/documents';
import { API_ENDPOINTS } from '../constants';

class DocumentService {
  /**
   * Get list of documents
   */
  async getDocuments(): Promise<DocumentListResponse> {
    try {
      const response = await apiService.get<DocumentListResponse>(
        API_ENDPOINTS.DOCUMENTS
      );
      return response.data;
    } catch (error) {
      throw new Error( error instanceof Error ? error.message : 'حدث خطأ في جلب المستندات');
    }
  }

  /**
   * Upload a document
   */
  async uploadDocument(file: File): Promise<DocumentUploadResponse> {
    try {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('fileType', file.name.split('.').pop()?.toLowerCase() || '');

        // Use the raw axios instance to handle FormData
        const instance = apiService.getInstance();
        const response = await instance.post<DocumentUploadResponse>(
          API_ENDPOINTS.UPLOAD_DOCUMENT,
          formData,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
            }
          }
        );

        return response.data;

    } catch (error: any) {
        if (error.response && error.response.status === 400) {
            // Assuming backend sends error message in JSON format like { error: '...', message: '...' }
            const errorMessage = error.response.data.message || error.response.data.error || 'حدث خطأ أثناء رفع الملف';
            throw new Error(errorMessage);
          } else {
            throw new Error( error instanceof Error ? error.message : 'حدث خطأ في رفع المستند');
          }
    }
}

  /**
   * Download a document
   */
  async downloadDocument(documentId: string): Promise<Blob> {
      const response = await apiService.getInstance().get(
        `${API_ENDPOINTS.DOCUMENTS}/${documentId}/download`,
        {
          responseType: 'blob'
        }
      );
      return response.data;
  }

  /**
   * Delete a document
   */
  async deleteDocument(documentId: string): Promise<void> {
      await apiService.delete(`${API_ENDPOINTS.DOCUMENTS}/${documentId}`);
  }

  /**
   * Get download URL for a document
   */
  getDownloadUrl(documentId: string): string {
    return `${apiService.getInstance().defaults.baseURL}${API_ENDPOINTS.DOCUMENTS}/${documentId}/download`;
  }

  /**
   * Get preview URL for a document (PDF only)
   */
  getPreviewUrl(documentId: string): string {
    return `${apiService.getInstance().defaults.baseURL}${API_ENDPOINTS.DOCUMENTS}/${documentId}/preview`;
  }
}

export const documentService = new DocumentService();
export default documentService;
</file>

<file path="src\services\tickets.ts">
// src/services/tickets.ts
import apiService from './api';
import { Ticket } from '../types/tickets';
import { API_ENDPOINTS } from '../constants';

class TicketService {
  async getAllTickets(): Promise<Ticket[]> {
    try {
      const response = await apiService.get(API_ENDPOINTS.ADMIN_TICKETS);
      console.log("Raw API Response:", response);

      if (response.data.status !== 'success') {
        throw new Error('Failed to fetch tickets');
      }

      // The response.data.tickets is already parsed JSON
      const tickets = response.data.tickets.map((ticket: any) => ({
        ...ticket,
        // Convert any null or undefined dates to null for consistency
        start_date: ticket.start_date || null,
        end_date: ticket.end_date || null,
        request_date: ticket.request_date || null,
        response_date: ticket.response_date || null,
        created_at: ticket.created_at || null,
        updated_at: ticket.updated_at || null,
        // Ensure numbers are properly parsed
        days_count: ticket.days_count ? Number(ticket.days_count) : null
      }));

      return tickets;
    } catch (error) {
      console.error("Error in getAllTickets:", error);
      throw new Error('Failed to fetch tickets');
    }
  }
}

export const ticketService = new TicketService();
</file>

<file path="src\services\vacation.ts">
// src/services/vacation.ts

import apiService from './api';
import { 
  VacationBalance, 
  VacationRequest, 
  CreateVacationRequestPayload,
  VacationBalanceResponse,
  VacationRequestResponse,
  VacationRequestListResponse
} from '../types/vacation';
import { API_ENDPOINTS } from '../constants';

class VacationService {
  /**
   * Get vacation balance for an employee
   */
  async getBalance(employeeId: string): Promise<VacationBalanceResponse> {
    try {
      const response = await apiService.get<VacationBalanceResponse>(
        `${API_ENDPOINTS.VACATION_BALANCE}/${employeeId}`
      );
      return response.data;
    } catch (error) {
      throw new Error(error instanceof Error ? error.message : 'حدث خطأ في جلب رصيد الإجازات');
    }
  }

  /**
   * Submit a new vacation request
   */
  async submitRequest(request: CreateVacationRequestPayload): Promise<VacationRequestResponse> {
    try {
      const response = await apiService.post<VacationRequestResponse>(
        API_ENDPOINTS.VACATION_REQUEST,
        request
      );
      return response.data;
    } catch (error) {
        console.log('submitRequest error:', error); // added for debugging
      throw new Error(error instanceof Error ? error.message : 'حدث خطأ في تقديم طلب الإجازة');
    }
  }

  /**
   * Get list of vacation requests for an employee
   */
  async getRequests(employeeId: string): Promise<VacationRequestListResponse> {
    try {
      const response = await apiService.get<VacationRequestListResponse>(
        `${API_ENDPOINTS.VACATION_REQUEST}s/${employeeId}`
      );
      return response.data;
    } catch (error) {
      throw new Error(error instanceof Error ? error.message : 'حدث خطأ في جلب طلبات الإجازة');
    }
  }

  /**
   * Cancel a vacation request
   */
  async cancelRequest(requestId: string): Promise<VacationRequestResponse> {
    try {
      const response = await apiService.post<VacationRequestResponse>(
        `${API_ENDPOINTS.VACATION_REQUEST}/${requestId}/cancel`
      );
      return response.data;
    } catch (error) {
      throw new Error(error instanceof Error ? error.message : 'حدث خطأ في إلغاء طلب الإجازة');
    }
  }
}

export const vacationService = new VacationService();
export default vacationService;
</file>

<file path="src\types\api.ts">
// src/types/api.ts
export interface ApiResponse<T = any> {
    data: T;
    error?: ApiError;
  }
  
  export interface ApiError {
    message: string;
    status?: number;
    details?: any;
  }
  
  // Chat Types
  export interface ChatMessage {
    id: string;
    content: string;
    type: 'user' | 'bot';
    timestamp: Date;
    status: 'sending' | 'sent' | 'error';
  }
  
  export interface ChatResponse {
    response: string;
    timestamp: string;
  }
  
  // Vacation Types
  export interface VacationBalance {
    status: string;
    employee_id: string;
    name: string;
    annual_balance: number;
    used_days: number;
    remaining_balance: number;
    last_updated: string;
  }
  
  export interface VacationRequest {
    employee_id: string;
    start_date: string;
    end_date: string;
    request_type: string;
    notes?: string;
  }
  
  export interface VacationRequestResponse {
    status: string;
    message: string;
    ticket_id: string;
  }
  
  // Document Types
  export interface Document {
    name: string;
    size: number;
    uploaded: string;
  }
  
  export interface UploadResponse {
    message: string;
    filename: string;
  }
  
  // User Types
  export interface User {
    id: string;
    name: string;
    role: string;
    employee_id?: string;
  }
  
  // Auth Types
  export interface LoginCredentials {
    username: string;
    password: string;
  }
  
  export interface AuthResponse {
    user: User;
    token: string;
  }
</file>

<file path="src\types\chat.ts">
// src/types/chat.ts

import { VacationRequest, VacationBalance } from './vacation';
import { DocumentMetadata } from './documents';

export type MessageType = 
  | 'text'
  | 'vacation_request'
  | 'vacation_balance'
  | 'vacation_action'
  | 'document_upload'
  | 'document_shared';

export type VacationAction = 
  | 'view_balance'
  | 'request_vacation'
  | 'view_requests'
  | 'goto_vacation_page';

export interface MessageBase {
  id: string;
  type: MessageType;
  content: string;
  timestamp: Date;
  status: 'sending' | 'sent' | 'error';
}

export interface TextMessage extends MessageBase {
  type: 'text';
}

export interface VacationRequestMessage extends MessageBase {
  type: 'vacation_request';
  metadata: {
    request: VacationRequest;
    actions?: VacationAction[];
  };
}

export interface VacationBalanceMessage extends MessageBase {
  type: 'vacation_balance';
  metadata: {
    balance: VacationBalance;
    actions?: VacationAction[];
  };
}

export interface VacationActionMessage extends MessageBase {
  type: 'vacation_action';
  metadata: {
    action: VacationAction;
    data?: any;
  };
}

export interface VacationStatusMessage extends MessageBase {
  type: 'vacation_status';
  metadata: {
    requestId: string;
    status: string;
    actions?: VacationAction[];
  };
}

export interface DocumentMessage extends MessageBase {
  type: 'document_upload' | 'document_shared';
  metadata: {
    document: DocumentMetadata;
  };
}

export type ChatMessage = 
  | TextMessage 
  | VacationRequestMessage 
  | VacationBalanceMessage 
  | VacationStatusMessage
  | VacationActionMessage
  | DocumentMessage;

export interface ChatResponse {
  response: string;
  type: MessageType;
  metadata?: any;
  timestamp: string;
}
</file>

<file path="src\types\documents.ts">
// src/types/documents.ts

/**
 * Document statuses
 */
export type DocumentStatus = 'processing' | 'active' | 'error';

/**
 * Allowed file types
 */
export type AllowedFileType = 'pdf' | 'docx' | 'doc' | 'txt';

/**
 * Document metadata
 */
export interface DocumentMetadata {
  id: string;
  title: string;
  fileType: AllowedFileType;
  size: number;
  uploadedBy: string;
  uploadedAt: string;
  status: DocumentStatus;
  lastModified?: string;
}

/**
 * Document list response
 */
export interface DocumentListResponse {
  documents: DocumentMetadata[];
  totalCount: number;
}

/**
 * Document upload response
 */
export interface DocumentUploadResponse {
  document: DocumentMetadata;
  message: string;
}

/**
 * Document service errors
 */
export interface DocumentError {
  code: string;
  message: string;
  details?: any;
}
</file>

<file path="src\types\tickets.ts">
// src/types/tickets.ts
export interface Ticket {
  ticket_id: string;
  employee_id: string;
  request_type: string | null;
  start_date: string | null;
  end_date: string | null;
  days_count: number | null;
  status: string;
  manager_id: string | null;
  request_date: string | null;
  response_date: string | null;
  notes: string | null;
  summary: string | null;
  description: string | null;
  created_at: string | null;
  updated_at: string | null;
}
</file>

<file path="src\types\vacation.ts">
// src/types/vacation.ts

/**
 * Vacation request status types
 */
export type VacationRequestStatus = 'pending' | 'approved' | 'rejected' | 'cancelled';

/**
 * Vacation request types
 */
export type VacationRequestType = 'annual' | 'sick' | 'emergency';

/**
 * Vacation balance information
 */
export interface VacationBalance {
  employee_id: string;
  name: string;
  annual_balance: number;
  used_days: number;
  remaining_balance: number;
  last_updated: string;
}

/**
 * Vacation request form data
 */
export interface VacationRequestFormData {
  startDate: string;
  endDate: string;
  requestType: VacationRequestType;
  notes?: string;
}

/**
 * Vacation request data
 */
export interface VacationRequest {
  id: string;
  employee_id: string;
  start_date: string;
  end_date: string;
  request_type: VacationRequestType;
  status: VacationRequestStatus;
  notes?: string;
  created_at: string;
  updated_at: string;
}

/**
 * Vacation request creation payload
 */
export interface CreateVacationRequestPayload {
  employee_id: string;
  start_date: string;
  end_date: string;
  request_type: VacationRequestType;
  notes?: string;
}

/**
 * Vacation service responses
 */
export interface VacationBalanceResponse {
  status: string;
  data: VacationBalance;
}

export interface VacationRequestResponse {
  status: string;
  data: VacationRequest;
}

export interface VacationRequestListResponse {
  status: string;
  data: VacationRequest[];
}
</file>

<file path="src\utils\data.ts">
// src/utils/date.ts
export const formatDate = (date: string | Date): string => {
  const d = new Date(date);
  return d.toLocaleDateString('ar-SA', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

export const formatTime = (date: string | Date): string => {
  const d = new Date(date);
  return d.toLocaleTimeString('ar-SA', {
    hour: '2-digit',
    minute: '2-digit',
  });
};

export const calculateDaysBetween = (startDate: string, endDate: string): number => {
  const start = new Date(startDate);
  const end = new Date(endDate);

  // Ignore time and set start date to beginning of the day
  start.setHours(0, 0, 0, 0);
  end.setHours(0, 0, 0, 0);

  const diffTime = Math.abs(end.getTime() - start.getTime());
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};
</file>

<file path="src\utils\errors.ts">
// src/utils/errors.ts
import { ApiError } from '../types/api';

export const getErrorMessage = (error: ApiError | unknown): string => {
  if (typeof error === 'string') {
    return error;
  }

  if ((error as ApiError)?.message) {
    return (error as ApiError).message;
  }

  return 'حدث خطأ غير متوقع';
};

export const isApiError = (error: any): error is ApiError => {
  return error && typeof error === 'object' && 'message' in error;
};

// src/utils/storage.ts
export const storage = {
  getToken: (): string | null => {
    return localStorage.getItem('token');
  },

  setToken: (token: string): void => {
    localStorage.setItem('token', token);
  },

  removeToken: (): void => {
    localStorage.removeItem('token');
  },

  getUser: (): any | null => {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  },

  setUser: (user: any): void => {
    localStorage.setItem('user', JSON.stringify(user));
  },

  removeUser: (): void => {
    localStorage.removeItem('user');
  },

  clear: (): void => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
};
</file>

<file path="src\utils\storage.ts">
// src/utils/storage.ts
export const storage = {
  getUser: (): any | null => {
    const user = localStorage.getItem('user');
    if (!user) return null;
    
    try {
      const parsed = JSON.parse(user);
      if (parsed.messages) {
        parsed.messages = parsed.messages.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        }));
      }
      return parsed;
    } catch (e) {
      console.error('Error parsing user data:', e);
      return null;
    }
  },

  setUser: (user: any): void => {
    localStorage.setItem('user', JSON.stringify(user));
  },

  removeUser: (): void => {
    localStorage.removeItem('user');
  },

  clear: (): void => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
};
</file>

<file path="src\utils\validation.ts">
// src/utils/validation.ts
export interface ValidationError {
  [key: string]: string;
}

export const validateVacationRequest = (
  startDate: string,
  endDate: string,
  balance: number
): ValidationError => {
  const errors: ValidationError = {};
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const start = new Date(startDate);
  const end = new Date(endDate);

  if (start < today) {
    errors.startDate = 'لا يمكن اختيار تاريخ في الماضي';
  }

  if (end < start) {
    errors.endDate = 'تاريخ النهاية يجب أن يكون بعد تاريخ البداية';
  }

  const days = calculateDaysBetween(startDate, endDate);
  if (days > balance) {
    errors.general = 'عدد الأيام المطلوبة يتجاوز الرصيد المتاح';
  }

  return errors;
};

export const validateLoginCredentials = (
  username: string,
  password: string
): ValidationError => {
  const errors: ValidationError = {};

  if (!username.trim()) {
    errors.username = 'اسم المستخدم مطلوب';
  }

  if (!password) {
    errors.password = 'كلمة المرور مطلوبة';
  } else if (password.length < 6) {
    errors.password = 'كلمة المرور يجب أن تكون 6 أحرف على الأقل';
  }

  return errors;
};
</file>

</repository_files>
