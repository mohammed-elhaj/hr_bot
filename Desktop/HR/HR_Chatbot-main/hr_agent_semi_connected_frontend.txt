<summary>

<header>
RepopackPy Output File
This file was generated by RepopackPy on: 2025-01-05T14:16:31.598198
</header>

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository structure
3. Repository files, each consisting of:
    - File path as an attribute
    - Full contents of the file
</file_format>

<usage_guidelines>
1. This file should be treated as read-only. Any changes should be made to the
    original repository files, not this packed version.
2. When processing this file, use the file path attributes to distinguish
    between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
    the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation.
</notes>

<additional_info>
For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py
</additional_info>

</summary>

<repository_structure>
README.md
eslint.config.js
index.html
package.json
postcss.config.js
src\App.css
src\App.tsx
src\assets\background.webp
src\assets\أخصائية مشتريات وعقود مرام الحميد .png
src\assets\أخصائية مشتريات وعقود مرام الحميد_.png
src\assets\حاسبة المشتريات
src\assets\نماذج التأهيل مستوى 1-2-3 (1).xlsx
src\assets\نماذج التأهيل مستوى 1-2-3.xlsx
src\components\common\Layout.tsx
src\components\common\ProtectedRoute.tsx
src\components\landing\FeatureCard.tsx
src\components\landing\Features.tsx
src\components\landing\Hero.tsx
src\components\vacation\VacationRequest.tsx
src\constants\index.ts
src\context\AuthContext.tsx
src\context\ChatContext.tsx
src\context\VacationContext.tsx
src\hooks\useAuth.ts
src\hooks\useChat.ts
src\hooks\useVacation.ts
src\index.css
src\main.tsx
src\pages\ChatPage.tsx
src\pages\LandingPage.tsx
src\pages\LoginPage.tsx
src\services\api.ts
src\services\auth.ts
src\services\chat.ts
src\services\document.ts
src\services\vacation.ts
src\types\api.ts
src\utils\data.ts
src\utils\errors.ts
src\utils\storage.ts
src\utils\validation.ts
src\vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</repository_structure>

<repository_files>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.9",
    "framer-motion": "^11.15.0",
    "lucide-react": "^0.468.0",
    "postcss": "^8.4.49",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.1",
    "tailwindcss": "^3.4.16"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/axios": "^0.9.36",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@types/react-router-dom": "^5.3.3",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.15.0",
    "vite": "^6.0.1"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```
</file>

<file path="tailwind.config.js">
// tailwind.config.js
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
        },
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  // "compilerOptions": {
  //   "target": "esnext",
  //   "module": "esnext",
  //   "jsx": "react-jsx",
  //   "strict": true,
  //   "esModuleInterop": true,
  //   "skipLibCheck": true,
  //   "moduleResolution": "node",
  //   "allowSyntheticDefaultImports": true
  // }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  
})
</file>

<file path="src\App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src\App.tsx">
// src/App.tsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import { ChatProvider } from './context/ChatContext';
import { VacationProvider } from './context/VacationContext';
import LandingPage from './pages/LandingPage';
import LoginPage from './pages/LoginPage';
import ChatPage from './pages/ChatPage';
import ProtectedRoute from './components/common/ProtectedRoute';

const App = () => {
  return (
    <AuthProvider>
      <ChatProvider>
        <VacationProvider>
          <Router>
            <Routes>
              <Route path="/" element={<LandingPage />} />
              <Route path="/login" element={<LoginPage />} />
              <Route
                path="/chat"
                element={
                  <ProtectedRoute>
                    <ChatPage />
                  </ProtectedRoute>
                }
              />
            </Routes>
          </Router>
        </VacationProvider>
      </ChatProvider>
    </AuthProvider>
  );
};

export default App;
</file>

<file path="src\index.css">
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gray-50 text-gray-900;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-lg font-medium transition-colors;
  }
  
  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-700;
  }
}
</file>

<file path="src\main.tsx">
// src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

// Set the HTML dir attribute to RTL
document.documentElement.dir = 'rtl'
document.documentElement.lang = 'ar'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
</file>

<file path="src\vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="src\components\common\Layout.tsx">
import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Menu, X, ChevronDown } from 'lucide-react';

const Layout = ({ children }: { children: React.ReactNode }) => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const location = useLocation();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <motion.nav
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        className={`fixed w-full z-50 transition-all duration-300 ${
          isScrolled ? 'bg-white/80 backdrop-blur-md shadow-lg' : 'bg-transparent'
        }`}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <motion.div
              className="flex-shrink-0"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Link to="/" className="flex items-center space-x-2 space-x-reverse">
                <div className="w-10 h-10 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 flex items-center justify-center">
                  <span className="text-white text-xl font-bold">HR</span>
                </div>
                <span className="text-2xl font-bold bg-gradient-to-r from-primary-600 to-purple-600 bg-clip-text text-transparent">
                  روبوت الموارد البشرية
                </span>
              </Link>
            </motion.div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8 space-x-reverse">
              <NavLink href="/" isActive={location.pathname === '/'}>
                الرئيسية
              </NavLink>
              <NavLink href="/features" isActive={location.pathname === '/features'}>
                المميزات
              </NavLink>
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Link
                  to="/login"
                  className="px-6 py-3 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium hover:shadow-lg transition-shadow"
                >
                  تسجيل الدخول
                </Link>
              </motion.div>
            </div>

            {/* Mobile Menu Button */}
            <div className="md:hidden">
              <button
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                className="text-gray-600 hover:text-gray-900"
              >
                {isMobileMenuOpen ? (
                  <X className="h-6 w-6" />
                ) : (
                  <Menu className="h-6 w-6" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Mobile Menu */}
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{
            opacity: isMobileMenuOpen ? 1 : 0,
            height: isMobileMenuOpen ? 'auto' : 0
          }}
          className="md:hidden bg-white border-t"
        >
          <div className="px-4 py-2 space-y-1">
            <MobileNavLink href="/" isActive={location.pathname === '/'}>
              الرئيسية
            </MobileNavLink>
            <MobileNavLink href="/features" isActive={location.pathname === '/features'}>
              المميزات
            </MobileNavLink>
            <Link
              to="/login"
              className="block w-full text-center px-4 py-2 rounded-lg bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium"
            >
              تسجيل الدخول
            </Link>
          </div>
        </motion.div>
      </motion.nav>

      <main className="pt-20">{children}</main>

      <footer className="bg-gradient-to-r from-gray-900 to-gray-800 text-white">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div>
              <h3 className="text-xl font-bold mb-4">روبوت الموارد البشرية</h3>
              <p className="text-gray-400">
                حلول ذكية لإدارة الموارد البشرية في مؤسستك
              </p>
            </div>
            <div>
              <h3 className="text-xl font-bold mb-4">روابط سريعة</h3>
              <ul className="space-y-2">
                <li>
                  <Link to="/" className="text-gray-400 hover:text-white">
                    الرئيسية
                  </Link>
                </li>
                <li>
                  <Link to="/features" className="text-gray-400 hover:text-white">
                    المميزات
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="text-xl font-bold mb-4">تواصل معنا</h3>
              <p className="text-gray-400">
                البريد الإلكتروني: info@hrchatbot.com
              </p>
            </div>
          </div>
          <div className="mt-8 pt-8 border-t border-gray-700 text-center text-gray-400">
            <p>جميع الحقوق محفوظة © {new Date().getFullYear()}</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

// Navigation Link Components
const NavLink = ({ href, children, isActive }: { href: string; children: React.ReactNode; isActive: boolean }) => (
  <Link
    to={href}
    className={`relative text-lg font-medium transition-colors ${
      isActive ? 'text-primary-600' : 'text-gray-600 hover:text-gray-900'
    }`}
  >
    {children}
    {isActive && (
      <motion.div
        layoutId="underline"
        className="absolute right-0 left-0 bottom-0 h-0.5 bg-primary-600"
      />
    )}
  </Link>
);

const MobileNavLink = ({ href, children, isActive }: { href: string; children: React.ReactNode; isActive: boolean }) => (
  <Link
    to={href}
    className={`block px-4 py-2 rounded-lg transition-colors ${
      isActive ? 'bg-primary-50 text-primary-600' : 'text-gray-600 hover:bg-gray-50'
    }`}
  >
    {children}
  </Link>
);

export default Layout;
</file>

<file path="src\components\common\ProtectedRoute.tsx">
// src/components/common/ProtectedRoute.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;
</file>

<file path="src\components\vacation\VacationRequest.tsx">
// src/components/vacation/VacationRequest.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Calendar, Clock, AlertCircle } from 'lucide-react';
import { useVacation } from '../../hooks/useVacation';
import { useAuth } from '../../hooks/useAuth';
import { validateVacationRequest } from '../../utils/validation';

interface VacationRequestProps {
  onSuccess?: () => void;
  onCancel?: () => void;
}

const VacationRequest: React.FC<VacationRequestProps> = ({ onSuccess, onCancel }) => {
  const { user } = useAuth();
  const { submitRequest, balance, fetchBalance } = useVacation();
  const [formData, setFormData] = useState({
    startDate: '',
    endDate: '',
    notes: '',
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);

  // Fetch balance when component mounts
  React.useEffect(() => {
    if (user) {
      fetchBalance(user.id);
    }
  }, [user]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user || !balance) return;

    const validationErrors = validateVacationRequest(
      formData.startDate,
      formData.endDate,
      balance.remaining_balance
    );

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    setIsLoading(true);
    try {
      await submitRequest({
        employee_id: user.id,
        start_date: formData.startDate,
        end_date: formData.endDate,
        request_type: 'vacation',
        notes: formData.notes,
      });
      
      onSuccess?.();
    } catch (error) {
      setErrors({ submit: 'فشل في تقديم الطلب. يرجى المحاولة مرة أخرى.' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg shadow-lg p-6"
    >
      <h3 className="text-xl font-semibold mb-4">طلب إجازة جديد</h3>
      
      {balance && (
        <div className="bg-gray-50 rounded-lg p-4 mb-6">
          <div className="flex justify-between items-center">
            <span className="text-gray-600">الرصيد المتبقي:</span>
            <span className="font-semibold text-lg">{balance.remaining_balance} يوم</span>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">
            تاريخ
</file>

<file path="src\constants\index.ts">
// src/constants/index.ts
export const API_ENDPOINTS = {
    LOGIN: '/api/auth/login',
    CHAT: '/api/chat',
    VACATION_BALANCE: '/api/employee/vacation-balance',
    VACATION_REQUEST: '/api/employee/vacation-request',
    DOCUMENTS: '/api/admin/documents',
    UPLOAD_DOCUMENT: '/api/admin/upload'
  };
  
  export const VACATION_TYPES = {
    ANNUAL: 'annual',
    SICK: 'sick',
    EMERGENCY: 'emergency'
  } as const;
  
  export const MESSAGE_STATUS = {
    SENDING: 'sending',
    SENT: 'sent',
    ERROR: 'error'
  } as const;
  
  export const ERROR_MESSAGES = {
    NETWORK_ERROR: 'حدث خطأ في الاتصال بالخادم',
    UNAUTHORIZED: 'جلسة العمل منتهية. يرجى تسجيل الدخول مرة أخرى',
    INVALID_CREDENTIALS: 'اسم المستخدم أو كلمة المرور غير صحيحة',
    GENERAL_ERROR: 'حدث خطأ غير متوقع'
  };
  
  export const ROUTES = {
    HOME: '/',
    LOGIN: '/login',
    CHAT: '/chat',
    PROFILE: '/profile',
    ADMIN: '/admin'
  } as const;
</file>

<file path="src\context\AuthContext.tsx">
// src/context/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { User } from '../types/api';
import { authService } from '../services/auth';
import { storage } from '../utils/storage';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Check for existing session
    const checkAuth = async () => {
      const storedUser = storage.getUser();
      if (storedUser) {
        setUser(storedUser);
      }
      setIsLoading(false);
    };

    checkAuth();
  }, []);

  const login = async (username: string, password: string) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await authService.login({ username, password });
      const userData = response.user;
      
      setUser(userData);
      storage.setUser(userData);
    } catch (error: any) {
      setError(error.message || 'فشل تسجيل الدخول');
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    authService.logout();
    setUser(null);
    storage.clear();
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        isLoading,
        error,
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
</file>

<file path="src\context\ChatContext.tsx">
// src/context/ChatContext.tsx
import React, { createContext, useContext, useReducer, useEffect } from 'react';
import { useAuth } from './AuthContext';
import { chatService } from '../services/chat';
import { Message } from '../types/api';

interface ChatState {
  messages: Message[];
  isLoading: boolean;
  error: string | null;
}

type ChatAction =
  | { type: 'SET_MESSAGES'; payload: Message[] }
  | { type: 'ADD_MESSAGE'; payload: Message }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'UPDATE_MESSAGE_STATUS'; payload: { id: string; status: Message['status'] } };

const chatReducer = (state: ChatState, action: ChatAction): ChatState => {
  switch (action.type) {
    case 'SET_MESSAGES':
      return {
        ...state,
        messages: action.payload
      };
    case 'ADD_MESSAGE':
      return {
        ...state,
        messages: [...state.messages, action.payload]
      };
    case 'SET_LOADING':
      return {
        ...state,
        isLoading: action.payload
      };
    case 'SET_ERROR':
      return {
        ...state,
        error: action.payload
      };
    case 'UPDATE_MESSAGE_STATUS':
      return {
        ...state,
        messages: state.messages.map(msg =>
          msg.id === action.payload.id
            ? { ...msg, status: action.payload.status }
            : msg
        )
      };
    default:
      return state;
  }
};

interface ChatContextType {
  state: ChatState;
  sendMessage: (content: string) => Promise<void>;
  clearError: () => void;
}

export const ChatContext = createContext<ChatContextType | undefined>(undefined);

const initialState: ChatState = {
  messages: [],
  isLoading: false,
  error: null
};

export const ChatProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  const [state, dispatch] = useReducer(chatReducer, initialState);

  useEffect(() => {
    const loadChatHistory = async () => {
      if (user?.employee_id) {
        dispatch({ type: 'SET_LOADING', payload: true });
        try {
          const history = await chatService.getChatHistory(user.employee_id);
          const historyWithDates = history.map(msg => ({
            ...msg,
            timestamp: new Date(msg.timestamp)
          }));
          dispatch({ type: 'SET_MESSAGES', payload: historyWithDates });
        } catch (error) {
          dispatch({ 
            type: 'SET_ERROR', 
            payload: 'فشل في تحميل سجل المحادثات' 
          });
        } finally {
          dispatch({ type: 'SET_LOADING', payload: false });
        }
      }
    };

    loadChatHistory();
  }, [user]);

  const sendMessage = async (content: string) => {
    const currentUser = user; // Store user in variable to avoid closure issues
    
    if (!currentUser?.employee_id) {
      dispatch({ 
        type: 'SET_ERROR', 
        payload: 'يجب تسجيل الدخول لإرسال الرسائل' 
      });
      return;
    }

    const messageId = Date.now().toString();
    
    dispatch({
      type: 'ADD_MESSAGE',
      payload: {
        id: messageId,
        content,
        type: 'user',
        timestamp: new Date(),
        status: 'sending'
      }
    });

    dispatch({ type: 'SET_LOADING', payload: true });

    try {
      const response = await chatService.sendMessage(content, currentUser.employee_id);
      
      dispatch({
        type: 'UPDATE_MESSAGE_STATUS',
        payload: { id: messageId, status: 'sent' }
      });

      dispatch({
        type: 'ADD_MESSAGE',
        payload: {
          id: Date.now().toString(),
          content: response.response,
          type: 'bot',
          timestamp: new Date(response.timestamp),
          status: 'sent'
        }
      });
    } catch (error) {
      dispatch({
        type: 'UPDATE_MESSAGE_STATUS',
        payload: { id: messageId, status: 'error' }
      });
      dispatch({
        type: 'SET_ERROR',
        payload: 'فشل في إرسال الرسالة. يرجى المحاولة مرة أخرى.'
      });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const clearError = () => {
    dispatch({ type: 'SET_ERROR', payload: null });
  };

  return (
    <ChatContext.Provider
      value={{
        state,
        sendMessage,
        clearError
      }}
    >
      {children}
    </ChatContext.Provider>
  );
};

export const useChat = () => {
  const context = useContext(ChatContext);
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};
</file>

<file path="src\context\VacationContext.tsx">
// src/context/VacationContext.tsx
import React, { createContext, useContext, useState } from 'react';
import { 
  vacationService, 
  VacationBalance, 
  VacationRequest, 
  VacationRequestResponse 
} from '../services/vacation';
import { getErrorMessage } from '../utils/errors';

interface VacationContextType {
  balance: VacationBalance | null;
  isLoading: boolean;
  error: string | null;
  fetchBalance: (employeeId: string) => Promise<void>;
  submitRequest: (request: VacationRequest) => Promise<VacationRequestResponse>;
  clearError: () => void;
}

const VacationContext = createContext<VacationContextType | undefined>(undefined);

export const VacationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [balance, setBalance] = useState<VacationBalance | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchBalance = async (employeeId: string) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await vacationService.getBalance(employeeId);
      setBalance(response.data);
    } catch (error) {
      setError(getErrorMessage(error));
    } finally {
      setIsLoading(false);
    }
  };

  const submitRequest = async (request: VacationRequest) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await vacationService.submitRequest(request);
      // Refresh balance after successful request
      await fetchBalance(request.employee_id);
      return response.data;
    } catch (error) {
      setError(getErrorMessage(error));
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const clearError = () => {
    setError(null);
  };

  return (
    <VacationContext.Provider
      value={{
        balance,
        isLoading,
        error,
        fetchBalance,
        submitRequest,
        clearError,
      }}
    >
      {children}
    </VacationContext.Provider>
  );
};
</file>

<file path="src\hooks\useAuth.ts">
// src/hooks/useAuth.ts
import { useContext } from 'react';
import { AuthContext } from '../context/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Make sure to export both the context and the provider
export { AuthContext };
</file>

<file path="src\hooks\useChat.ts">
// src/hooks/useChat.ts
import { useContext } from 'react';
import { ChatContext } from '../context/ChatContext';

export const useChat = () => {
  const context = useContext(ChatContext);
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};

// Make sure to export both the context and the provider
</file>

<file path="src\hooks\useVacation.ts">
// src/hooks/useVacation.ts
export const useVacation = () => {
  const context = useContext(VacationContext);
  if (context === undefined) {
    throw new Error('useVacation must be used within a VacationProvider');
  }
  return context;
};
</file>

<file path="src\pages\ChatPage.tsx">
// src/pages/ChatPage.tsx
import React, { useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Bot, User, Loader2, ThumbsUp, ThumbsDown } from 'lucide-react';
import Layout from '../components/common/Layout';
import { useChat } from '../context/ChatContext';
import { useAuth } from '../context/AuthContext';

const ChatPage = () => {
  const { state, sendMessage } = useChat();
  const { user } = useAuth();
  const [inputMessage, setInputMessage] = React.useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  const initialSuggestions = [
    { id: '1', text: 'كيف يمكنني تقديم إجازة؟' },
    { id: '2', text: 'ما هي سياسة العمل عن بعد؟' },
    { id: '3', text: 'كيف يمكنني تحديث معلوماتي الشخصية؟' },
    { id: '4', text: 'ما هي إجراءات تقييم الأداء؟' },
  ];

  useEffect(() => {
    scrollToBottom();
  }, [state.messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async (content: string) => {
    if (!content.trim() || state.isLoading) return;
    setInputMessage('');
    await sendMessage(content);
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(inputMessage);
    }
  };

  return (
    <Layout>
      <div className="h-screen flex flex-col bg-gray-50">
        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto px-4 py-6">
          <div className="max-w-3xl mx-auto space-y-6">
            {/* Welcome Message */}
            {state.messages.length === 0 && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-center space-y-4"
              >
                <div className="w-20 h-20 mx-auto rounded-full bg-gradient-to-r from-primary-500 to-purple-500 flex items-center justify-center">
                  <Bot className="w-10 h-10 text-white" />
                </div>
                <h2 className="text-xl font-semibold">مرحباً {user?.name}</h2>
                <p className="text-gray-600">كيف يمكنني مساعدتك اليوم؟</p>
              </motion.div>
            )}

            {/* Message List */}
            <AnimatePresence>
              {state.messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`flex ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start gap-3 max-w-[80%]`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 
                      ${message.type === 'user' ? 'bg-primary-500' : 'bg-purple-500'}`}>
                      {message.type === 'user' ? (
                        <User className="w-5 h-5 text-white" />
                      ) : (
                        <Bot className="w-5 h-5 text-white" />
                      )}
                    </div>
                    <div className={`flex flex-col ${message.type === 'user' ? 'items-end' : 'items-start'}`}>
                      <div className={`rounded-2xl px-4 py-2 ${
                        message.type === 'user' 
                          ? 'bg-primary-500 text-white' 
                          : 'bg-white border border-gray-200'
                      }`}>
                        <p className="whitespace-pre-wrap">{message.content}</p>
                      </div>
                      <div className="flex items-center gap-2 mt-1">
                        <span className="text-xs text-gray-500">
                          {new Date(message.timestamp).toLocaleTimeString('ar-SA', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </span>
                        {message.type === 'user' && (
                          <span className="text-xs">
                            {message.status === 'sending' && (
                              <div className="text-gray-400">جاري الإرسال...</div>
                            )}
                            {message.status === 'error' && (
                              <div className="text-red-500">فشل الإرسال</div>
                            )}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>

            {/* Loading Indicator */}
            <AnimatePresence>
              {state.isLoading && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="flex items-center gap-2 text-gray-500"
                >
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span className="text-sm">جاري الكتابة...</span>
                </motion.div>
              )}
            </AnimatePresence>
            
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Suggestions */}
        {state.messages.length === 0 && (
          <div className="bg-white border-t">
            <div className="max-w-3xl mx-auto px-4 py-4">
              <div className="flex flex-wrap gap-2">
                {initialSuggestions.map((suggestion) => (
                  <motion.button
                    key={suggestion.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => handleSendMessage(suggestion.text)}
                    className="px-4 py-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm transition-colors"
                  >
                    {suggestion.text}
                  </motion.button>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Input Area */}
        <div className="bg-white border-t">
          <div className="max-w-3xl mx-auto px-4 py-4">
            <div className="flex items-end gap-4">
              <div className="flex-1 bg-gray-100 rounded-2xl">
                <textarea
                  ref={inputRef}
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="اكتب رسالتك هنا..."
                  className="w-full bg-transparent border-none resize-none px-4 py-3 max-h-32 focus:ring-0 focus:outline-none"
                  rows={1}
                  dir="rtl"
                />
              </div>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => handleSendMessage(inputMessage)}
                disabled={!inputMessage.trim() || state.isLoading}
                className="flex-shrink-0 p-3 rounded-full bg-primary-500 text-white hover:bg-primary-600 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Send className="w-5 h-5" />
              </motion.button>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default ChatPage;
</file>

<file path="src\pages\LandingPage.tsx">
// src/pages/LandingPage.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { MessageCircle, Shield, Zap, Users, ArrowLeft, ChevronLeft, CheckCircle, Bot, Calendar, User } from 'lucide-react';
import Layout from '../components/common/Layout';

// Feature component
interface Feature {
  title: string;
  description: string;
  icon: React.FC<{ className?: string }>;
  gradient: string;
}

const features: Feature[] = [
  {
    title: "دعم ذكي على مدار الساعة",
    description: "مساعد افتراضي متاح 24/7 للإجابة على جميع استفساراتك المتعلقة بالموارد البشرية",
    icon: Bot,
    gradient: "from-blue-500 to-cyan-500"
  },
  {
    title: "إدارة الإجازات",
    description: "نظام سهل لتقديم وتتبع طلبات الإجازة والاستعلام عن الأرصدة",
    icon: Calendar,
    gradient: "from-purple-500 to-pink-500"
  },
  {
    title: "معالجة فورية",
    description: "معالجة سريعة لجميع الطلبات والاستفسارات بدون تأخير",
    icon: Zap,
    gradient: "from-primary-500 to-yellow-500"
  },
  {
    title: "إدارة المعلومات",
    description: "الوصول السهل والآمن لجميع سياسات وإجراءات الموارد البشرية",
    icon: Shield,
    gradient: "from-green-500 to-teal-500"
  }
];

// Statistics component
interface Statistic {
  number: string;
  label: string;
  suffix: string;
}

const statistics: Statistic[] = [
  { number: "98", label: "رضا المستخدمين", suffix: "%" },
  { number: "50,000", label: "مستخدم نشط", suffix: "+" },
  { number: "24/7", label: "دعم متواصل", suffix: "" },
  { number: "15", label: "دقيقة متوسط وقت الاستجابة", suffix: "" }
];

// Testimonial component
interface Testimonial {
  content: string;
  author: string;
  position: string;
  company: string;
  imageUrl: string;
}

const testimonials: Testimonial[] = [
  {
    content: "نظام سهل الاستخدام وفعال جداً في تلبية احتياجات الموظفين. ساعد في تقليل وقت معالجة طلبات الموارد البشرية بشكل كبير.",
    author: "سارة الأحمد",
    position: "مدير الموارد البشرية",
    company: "شركة التقنية المتقدمة",
    imageUrl: "/api/placeholder/64/64"
  },
  {
    content: "المساعد الافتراضي ممتاز في الرد على استفسارات الموظفين. وفر علينا الكثير من الوقت والجهد.",
    author: "محمد العمري",
    position: "مدير التطوير التنظيمي",
    company: "مجموعة الابتكار",
    imageUrl: "/api/placeholder/64/64"
  }
];

const LandingPage = () => {
  return (
    <Layout>
      <Hero />
      <Features />
      <Benefits />
      <Statistics />
      <Testimonials />
      <CallToAction />
    </Layout>
  );
};

const Hero = () => {
  const navigate = useNavigate();

  return (
    <section className="relative overflow-hidden bg-gradient-to-br from-primary-50 via-white to-purple-50 pt-16 pb-32">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
        className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"
      >
        <div className="text-center">
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="text-5xl font-extrabold tracking-tight text-gray-900 sm:text-6xl md:text-7xl"
          >
            <span className="block text-transparent bg-clip-text bg-gradient-to-r from-primary-600 to-purple-600">
              مساعد الموارد البشرية الذكي
            </span>
            <span className="block text-gray-600 mt-3 text-3xl sm:text-4xl">
              إدارة شؤون الموظفين بذكاء وكفاءة
            </span>
          </motion.h1>
          
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="mt-6 max-w-2xl mx-auto text-xl text-gray-500"
          >
            نظام متكامل يجمع بين الذكاء الاصطناعي وأفضل ممارسات الموارد البشرية لتقديم تجربة سلسة للموظفين
          </motion.p>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
            className="mt-10 flex justify-center gap-4"
          >
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => navigate('/chat')}
              className="px-8 py-4 rounded-full bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium hover:shadow-lg transition-shadow flex items-center gap-2"
            >
              ابدأ المحادثة
              <MessageCircle className="w-5 h-5" />
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => navigate('/login')}
              className="px-8 py-4 rounded-full border-2 border-primary-500 text-primary-600 font-medium hover:bg-primary-50 transition-colors flex items-center gap-2"
            >
              تسجيل الدخول
              <User className="w-5 h-5" />
            </motion.button>
          </motion.div>
        </div>
      </motion.div>

      {/* Decorative Elements */}
      <motion.div
        animate={{
          rotate: 360,
          scale: [1, 1.2, 1],
        }}
        transition={{
          duration: 20,
          repeat: Infinity,
          ease: "linear"
        }}
        className="absolute right-0 top-1/4 w-72 h-72 bg-gradient-to-r from-primary-300/20 to-purple-300/20 rounded-full blur-3xl"
      />
      <motion.div
        animate={{
          rotate: -360,
          scale: [1, 1.5, 1],
        }}
        transition={{
          duration: 25,
          repeat: Infinity,
          ease: "linear"
        }}
        className="absolute left-0 bottom-1/4 w-96 h-96 bg-gradient-to-r from-purple-300/20 to-primary-300/20 rounded-full blur-3xl"
      />
    </section>
  );
};

const Features = () => {
  return (
    <section className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-gray-900">مميزات النظام</h2>
          <p className="mt-4 text-xl text-gray-600">كل ما تحتاجه لإدارة شؤون الموظفين في مكان واحد</p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              whileHover={{ y: -5 }}
              className="relative group"
            >
              <div className="bg-white rounded-2xl shadow-lg p-8 transition-shadow hover:shadow-xl border border-gray-100">
                <div className={`w-14 h-14 rounded-full bg-gradient-to-r ${feature.gradient} p-4 mb-6`}>
                  <feature.icon className="w-full h-full text-white" />
                </div>
                <h3 className="text-xl font-semibold mb-4">{feature.title}</h3>
                <p className="text-gray-600">{feature.description}</p>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const Benefits = () => {
  return (
    <section className="py-20 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-gray-900">لماذا تختارنا؟</h2>
          <p className="mt-4 text-xl text-gray-600">مزايا تجعل نظامنا الخيار الأمثل لمؤسستك</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {[
            "تحسين كفاءة عمليات الموارد البشرية",
            "تقليل الوقت المستغرق في المعاملات الروتينية",
            "تحسين تجربة الموظفين",
            "تقليل الأخطاء البشرية",
            "توفير البيانات والتقارير بشكل فوري",
            "تحسين عملية اتخاذ القرار"
          ].map((benefit, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, x: index % 2 === 0 ? -20 : 20 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              className="flex items-center gap-4 bg-white p-6 rounded-xl shadow-sm"
            >
              <CheckCircle className="w-6 h-6 text-primary-500 flex-shrink-0" />
              <span className="text-gray-700">{benefit}</span>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const Statistics = () => {
  const [isHovered, setIsHovered] = useState<number | null>(null);
  
  return (
    <section className="py-20 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {statistics.map((stat, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, scale: 0.5 }}
              whileInView={{ opacity: 1, scale: 1 }}
              viewport={{ once: true }}
              onHoverStart={() => setIsHovered(index)}
              onHoverEnd={() => setIsHovered(null)}
              className="text-center"
            >
              <motion.div
                animate={{
                  scale: isHovered === index ? 1.1 : 1,
                }}
                className="mb-4"
              >
                <span className="text-4xl font-bold bg-gradient-to-r from-primary-400 to-purple-400 bg-clip-text text-transparent">
                  {stat.number}
                </span>
                <span className="text-2xl font-bold text-primary-400">{stat.suffix}</span>
              </motion.div>
              <p className="text-gray-300">{stat.label}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const Testimonials = () => {
  return (
    <section className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold text-gray-900">ماذا يقول عملاؤنا</h2>
          <p className="mt-4 text-xl text-gray-600">تجارب حقيقية لعملائنا مع النظام</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {testimonials.map((testimonial, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className="bg-gray-50 rounded-2xl p-8 border border-gray-100"
            >
              <p className="text-gray-700 mb-6">{testimonial.content}</p>
              <div className="flex items-center gap-4">
                <img
                  src={testimonial.imageUrl}
                  alt={testimonial.author}
                  className="w-16 h-16 rounded-full"
                />
                <div>
                  <h4 className="font-semibold text-gray-900">{testimonial.author}</h4>
                  <p className="text-gray-600">{testimonial.position}</p>
                  <p className="text-gray-500 text-sm">{testimonial.company}</p>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

const CallToAction = () => {
  const navigate = useNavigate();
  
  return (
    <section className="py-20 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="relative bg-gradient-to-r from-primary-500 to-purple-500 rounded-3xl overflow-hidden"
        >
          <div className="relative z-10 px-8 py-16 text-center text-white">
            <h2 className="text-3xl md:text-4xl font-bold mb-6">
              جاهز لتحسين إدارة الموارد البشرية في مؤسستك؟
            </h2>
            <p className="text-xl mb-8 text-white/90 max-w-2xl mx-auto">
              ابدأ اليوم واكتشف كيف يمكن لمساعدنا الذكي أن يساعدك في تحسين كفاءة عمليات الموارد البشرية
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => navigate('/chat')}
                className="bg-white text-primary-600 px-8 py-4 rounded-full font-medium hover:shadow-lg transition-shadow inline-flex items-center gap-2 justify-center"
              >
                ابدأ المحادثة
                <MessageCircle className="w-5 h-5" />
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => navigate('/login')}
                className="bg-transparent border-2 border-white text-white px-8 py-4 rounded-full font-medium hover:bg-white/10 transition-colors inline-flex items-center gap-2 justify-center"
              >
                معرفة المزيد
                <ChevronLeft className="w-5 h-5" />
              </motion.button>
            </div>
          </div>
          
          {/* Decorative background elements */}
          <div className="absolute top-0 left-0 right-0 bottom-0 opacity-10">
            <div className="absolute -left-20 -top-20 w-60 h-60 rounded-full bg-white" />
            <div className="absolute -right-20 -bottom-20 w-60 h-60 rounded-full bg-white" />
          </div>
        </motion.div>

        {/* Additional Features List */}
        <div className="mt-20 grid grid-cols-1 md:grid-cols-3 gap-8">
          {[
            {
              title: "دعم فني متميز",
              description: "فريق دعم متخصص جاهز لمساعدتك في أي وقت",
              icon: MessageCircle,
            },
            {
              title: "تحديثات مستمرة",
              description: "نظام يتطور باستمرار لتلبية احتياجاتك المتغيرة",
              icon: Zap,
            },
            {
              title: "أمان عالي",
              description: "حماية قصوى لبياناتك ومعلومات موظفيك",
              icon: Shield,
            },
          ].map((feature, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className="text-center"
            >
              <div className="inline-block p-3 bg-primary-100 rounded-full mb-4">
                <feature.icon className="w-6 h-6 text-primary-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {feature.title}
              </h3>
              <p className="text-gray-600">{feature.description}</p>
            </motion.div>
          ))}
        </div>

        {/* FAQ Section */}
        <div className="mt-20">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900">الأسئلة الشائعة</h2>
            <p className="mt-4 text-xl text-gray-600">إجابات على أكثر الأسئلة شيوعاً</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {[
              {
                question: "كيف يمكنني البدء باستخدام النظام؟",
                answer: "يمكنك البدء مباشرة بالتسجيل وإنشاء حساب جديد. بعد ذلك، سيقوم فريقنا بالتواصل معك لإكمال عملية الإعداد."
              },
              {
                question: "هل النظام آمن لحفظ بيانات الموظفين؟",
                answer: "نعم، نستخدم أحدث تقنيات التشفير وأنظمة الحماية لضمان أمان بياناتك ومعلومات موظفيك."
              },
              {
                question: "هل يمكن تخصيص النظام حسب احتياجاتنا؟",
                answer: "نعم، يمكن تخصيص النظام بالكامل ليتناسب مع احتياجات مؤسستك وسياساتها الخاصة."
              },
              {
                question: "كيف يمكنني الحصول على الدعم الفني؟",
                answer: "نوفر دعماً فنياً على مدار الساعة عبر المحادثة المباشرة والبريد الإلكتروني والهاتف."
              }
            ].map((faq, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                className="bg-white p-6 rounded-xl shadow-sm"
              >
                <h4 className="font-semibold text-gray-900 mb-2">{faq.question}</h4>
                <p className="text-gray-600">{faq.answer}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default LandingPage;
</file>

<file path="src\pages\LoginPage.tsx">
// src/pages/LoginPage.tsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { Eye, EyeOff, User, Lock, AlertCircle } from 'lucide-react';
import Layout from '../components/common/Layout';
import { useAuth } from '../context/AuthContext';

interface FormErrors {
  username?: string;
  password?: string;
  submit?: string;
}

const LoginPage = () => {
  const navigate = useNavigate();
  const { login, isAuthenticated } = useAuth();
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState<FormErrors>({});
  const [isLoading, setIsLoading] = useState(false);

  // Check if user is already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/chat');
    }
  }, [isAuthenticated, navigate]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    // Clear error when user starts typing
    if (errors[name as keyof FormErrors]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};
    if (!formData.username.trim()) {
      newErrors.username = 'اسم المستخدم مطلوب';
    }
    if (!formData.password) {
      newErrors.password = 'كلمة المرور مطلوبة';
    } else if (formData.password.length < 6) {
      newErrors.password = 'كلمة المرور يجب أن تكون 6 أحرف على الأقل';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
  
    setIsLoading(true);
    try {
      await login(formData.username, formData.password);
      navigate('/chat');
    } catch (error: any) {
      setErrors({
        submit: error.message || 'فشل تسجيل الدخول. يرجى التحقق من اسم المستخدم وكلمة المرور.',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout>
      <div className="min-h-screen pt-16 pb-12 flex flex-col bg-gradient-to-br from-primary-50 via-white to-purple-50">
        <div className="flex-grow flex items-center justify-center px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="max-w-md w-full"
          >
            <div className="bg-white/80 backdrop-blur-lg rounded-2xl shadow-xl p-8 border border-gray-100">
              <div className="text-center mb-8">
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="h-20 w-20 bg-gradient-to-r from-primary-500 to-purple-500 rounded-full mx-auto mb-4 flex items-center justify-center"
                >
                  <User className="h-10 w-10 text-white" />
                </motion.div>
                <h2 className="text-2xl font-bold text-gray-900">مرحباً بعودتك</h2>
                <p className="text-gray-600 mt-2">سجل دخولك للوصول إلى لوحة التحكم</p>
              </div>

              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Username Field */}
                <div>
                  <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-1">
                    اسم المستخدم
                  </label>
                  <div className="relative">
                    <input
                      id="username"
                      name="username"
                      type="text"
                      value={formData.username}
                      onChange={handleChange}
                      className={`block w-full px-4 py-3 rounded-lg bg-gray-50 border ${
                        errors.username ? 'border-red-500' : 'border-gray-200'
                      } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:bg-white transition-colors`}
                      dir="rtl"
                    />
                    {errors.username && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="mt-1 text-red-500 text-sm flex items-center gap-1"
                      >
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.username}</span>
                      </motion.div>
                    )}
                  </div>
                </div>

                {/* Password Field */}
                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                    كلمة المرور
                  </label>
                  <div className="relative">
                    <input
                      id="password"
                      name="password"
                      type={showPassword ? 'text' : 'password'}
                      value={formData.password}
                      onChange={handleChange}
                      className={`block w-full px-4 py-3 rounded-lg bg-gray-50 border ${
                        errors.password ? 'border-red-500' : 'border-gray-200'
                      } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:bg-white transition-colors`}
                      dir="rtl"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
                    >
                      {showPassword ? (
                        <EyeOff className="w-5 h-5" />
                      ) : (
                        <Eye className="w-5 h-5" />
                      )}
                    </button>
                    {errors.password && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="mt-1 text-red-500 text-sm flex items-center gap-1"
                      >
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.password}</span>
                      </motion.div>
                    )}
                  </div>
                </div>

                {errors.submit && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="text-red-500 text-sm text-center"
                  >
                    {errors.submit}
                  </motion.div>
                )}

                {/* Submit Button */}
                <motion.button
                  whileHover={{ scale: 1.01 }}
                  whileTap={{ scale: 0.99 }}
                  type="submit"
                  disabled={isLoading}
                  className="w-full py-3 px-4 rounded-lg bg-gradient-to-r from-primary-500 to-purple-500 text-white font-medium hover:shadow-lg transition-shadow disabled:opacity-70 disabled:cursor-not-allowed"
                >
                  {isLoading ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="w-5 h-5 border-2 border-white border-t-transparent rounded-full mx-auto"
                    />
                  ) : (
                    'تسجيل الدخول'
                  )}
                </motion.button>
              </form>
            </div>
          </motion.div>
        </div>
      </div>
    </Layout>
  );
};

export default LoginPage;
</file>

<file path="src\services\api.ts">
// src/services/api.ts
import axios, { AxiosInstance, AxiosError, AxiosResponse } from 'axios';

// Types
export interface ApiError {
  message: string;
  status?: number;
  details?: any;
}

export interface ApiResponse<T = any> {
  data: T;
  error?: ApiError;
}

class ApiService {
  private api: AxiosInstance;

  constructor() {
    this.api = axios.create({
      baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    // Response interceptor
    this.api.interceptors.response.use(
      (response: AxiosResponse) => response,
      (error: AxiosError) => {
        const apiError: ApiError = {
          message: 'حدث خطأ في الاتصال',
          status: error.response?.status,
        };

        if (error.response) {
          // Server responded with error
          const data = error.response.data as any;
          apiError.message = data.error || data.message || 'حدث خطأ في الخادم';
          apiError.details = data;
        } else if (error.request) {
          // Request made but no response
          apiError.message = 'لا يمكن الوصول إلى الخادم';
        }

        return Promise.reject(apiError);
      }
    );
  }

  // Generic GET request
  async get<T>(url: string, params?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.get<T>(url, { params });
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic POST request
  async post<T>(url: string, data?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.post<T>(url, data);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic PUT request
  async put<T>(url: string, data?: any): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.put<T>(url, data);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Generic DELETE request
  async delete<T>(url: string): Promise<ApiResponse<T>> {
    try {
      const response = await this.api.delete<T>(url);
      return { data: response.data };
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // Error handler
  private handleError(error: any): ApiError {
    if (error.status === 401) {
      // Handle unauthorized access
      // You might want to redirect to login or refresh token
      console.log('Unauthorized access');
    }
    return error;
  }

  // Get the underlying axios instance
  getInstance(): AxiosInstance {
    return this.api;
  }
}

// Export a singleton instance
export const apiService = new ApiService();
export default apiService;
</file>

<file path="src\services\auth.ts">
// src/services/auth.ts
import apiService from './api';
import { User } from '../types/api';

export interface LoginResponse {
  status: string;
  user: User;
}

export interface LoginCredentials {
  username: string;
  password: string;
}

class AuthService {
  async login(credentials: LoginCredentials): Promise<LoginResponse> {
    const response = await apiService.post<LoginResponse>('/api/auth/login', credentials);
    return response.data;
  }

  logout(): void {
    // Clear any stored auth data
    localStorage.removeItem('user');
  }
}

export const authService = new AuthService();
export default authService;
</file>

<file path="src\services\chat.ts">
// src/services/chat.ts
import apiService from './api';
import { Message } from '../types/api';

export interface ChatResponse {
  response: string;
  timestamp: string;
}

export interface ChatHistoryResponse {
  status: string;
  history: Message[];
}

class ChatService {
  async sendMessage(message: string, employee_id?: string): Promise<ChatResponse> {
    const response = await apiService.post<ChatResponse>('/api/chat', {
      message,
      employee_id
    });
    return response.data;
  }

  async getChatHistory(employee_id: string): Promise<Message[]> {
    const response = await apiService.get<ChatHistoryResponse>(`/api/chat/history/${employee_id}`);
    return response.data.history;
  }
}

export const chatService = new ChatService();
export default chatService;
</file>

<file path="src\services\document.ts">
// src/services/documents.ts
import apiService, { ApiResponse } from './api';

export interface Document {
  name: string;
  size: number;
  uploaded: string;
}

export interface DocumentsResponse {
  documents: Document[];
}

export interface UploadResponse {
  message: string;
  filename: string;
}

export class DocumentService {
  async listDocuments(): Promise<ApiResponse<DocumentsResponse>> {
    return apiService.get<DocumentsResponse>('/api/admin/documents');
  }

  async uploadDocument(file: File): Promise<ApiResponse<UploadResponse>> {
    const formData = new FormData();
    formData.append('file', file);

    const instance = apiService.getInstance();
    const response = await instance.post('/api/admin/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    return { data: response.data };
  }

  async updateActiveDocuments(documents: string[]): Promise<ApiResponse<any>> {
    return apiService.post('/api/admin/documents', { documents });
  }
}

export const documentService = new DocumentService();
</file>

<file path="src\services\vacation.ts">
// src/services/vacation.ts
import apiService, { ApiResponse } from './api';

export interface VacationBalance {
  status: string;
  employee_id: string;
  name: string;
  annual_balance: number;
  used_days: number;
  remaining_balance: number;
  last_updated: string;
}

export interface VacationRequest {
  employee_id: string;
  start_date: string;
  end_date: string;
  request_type: string;
  notes?: string;
}

export interface VacationRequestResponse {
  status: string;
  message: string;
  ticket_id: string;
}

export class VacationService {
  async getBalance(employeeId: string): Promise<ApiResponse<VacationBalance>> {
    return apiService.get<VacationBalance>(`/api/employee/vacation-balance/${employeeId}`);
  }

  async submitRequest(request: VacationRequest): Promise<ApiResponse<VacationRequestResponse>> {
    return apiService.post<VacationRequestResponse>('/api/employee/vacation-request', request);
  }
}

export const vacationService = new VacationService();
</file>

<file path="src\types\api.ts">
// src/types/api.ts
export interface ApiResponse<T = any> {
    data: T;
    error?: ApiError;
  }
  
  export interface ApiError {
    message: string;
    status?: number;
    details?: any;
  }
  
  // Chat Types
  export interface ChatMessage {
    id: string;
    content: string;
    type: 'user' | 'bot';
    timestamp: Date;
    status: 'sending' | 'sent' | 'error';
  }
  
  export interface ChatResponse {
    response: string;
    timestamp: string;
  }
  
  // Vacation Types
  export interface VacationBalance {
    status: string;
    employee_id: string;
    name: string;
    annual_balance: number;
    used_days: number;
    remaining_balance: number;
    last_updated: string;
  }
  
  export interface VacationRequest {
    employee_id: string;
    start_date: string;
    end_date: string;
    request_type: string;
    notes?: string;
  }
  
  export interface VacationRequestResponse {
    status: string;
    message: string;
    ticket_id: string;
  }
  
  // Document Types
  export interface Document {
    name: string;
    size: number;
    uploaded: string;
  }
  
  export interface UploadResponse {
    message: string;
    filename: string;
  }
  
  // User Types
  export interface User {
    id: string;
    name: string;
    role: string;
    employee_id?: string;
  }
  
  // Auth Types
  export interface LoginCredentials {
    username: string;
    password: string;
  }
  
  export interface AuthResponse {
    user: User;
    token: string;
  }
</file>

<file path="src\utils\data.ts">
// src/utils/date.ts
export const formatDate = (date: string | Date): string => {
  const d = new Date(date);
  return d.toLocaleDateString('ar-SA', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

export const formatTime = (date: string | Date): string => {
  const d = new Date(date);
  return d.toLocaleTimeString('ar-SA', {
    hour: '2-digit',
    minute: '2-digit',
  });
};

export const calculateDaysBetween = (startDate: string, endDate: string): number => {
  const start = new Date(startDate);
  const end = new Date(endDate);
  const diffTime = Math.abs(end.getTime() - start.getTime());
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
};
</file>

<file path="src\utils\errors.ts">
// src/utils/errors.ts
import { ApiError } from '../types/api';

export const getErrorMessage = (error: ApiError | unknown): string => {
  if (typeof error === 'string') {
    return error;
  }

  if ((error as ApiError)?.message) {
    return (error as ApiError).message;
  }

  return 'حدث خطأ غير متوقع';
};

export const isApiError = (error: any): error is ApiError => {
  return error && typeof error === 'object' && 'message' in error;
};

// src/utils/storage.ts
export const storage = {
  getToken: (): string | null => {
    return localStorage.getItem('token');
  },

  setToken: (token: string): void => {
    localStorage.setItem('token', token);
  },

  removeToken: (): void => {
    localStorage.removeItem('token');
  },

  getUser: (): any | null => {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  },

  setUser: (user: any): void => {
    localStorage.setItem('user', JSON.stringify(user));
  },

  removeUser: (): void => {
    localStorage.removeItem('user');
  },

  clear: (): void => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
};
</file>

<file path="src\utils\storage.ts">
// src/utils/storage.ts
export const storage = {
  getUser: (): any | null => {
    const user = localStorage.getItem('user');
    if (!user) return null;
    
    try {
      const parsed = JSON.parse(user);
      if (parsed.messages) {
        parsed.messages = parsed.messages.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        }));
      }
      return parsed;
    } catch (e) {
      console.error('Error parsing user data:', e);
      return null;
    }
  },

  setUser: (user: any): void => {
    localStorage.setItem('user', JSON.stringify(user));
  },

  removeUser: (): void => {
    localStorage.removeItem('user');
  },

  clear: (): void => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
};
</file>

<file path="src\utils\validation.ts">
// src/utils/validation.ts
export interface ValidationError {
  [key: string]: string;
}

export const validateVacationRequest = (
  startDate: string,
  endDate: string,
  balance: number
): ValidationError => {
  const errors: ValidationError = {};
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const start = new Date(startDate);
  const end = new Date(endDate);

  if (start < today) {
    errors.startDate = 'لا يمكن اختيار تاريخ في الماضي';
  }

  if (end < start) {
    errors.endDate = 'تاريخ النهاية يجب أن يكون بعد تاريخ البداية';
  }

  const days = calculateDaysBetween(startDate, endDate);
  if (days > balance) {
    errors.general = 'عدد الأيام المطلوبة يتجاوز الرصيد المتاح';
  }

  return errors;
};

export const validateLoginCredentials = (
  username: string,
  password: string
): ValidationError => {
  const errors: ValidationError = {};

  if (!username.trim()) {
    errors.username = 'اسم المستخدم مطلوب';
  }

  if (!password) {
    errors.password = 'كلمة المرور مطلوبة';
  } else if (password.length < 6) {
    errors.password = 'كلمة المرور يجب أن تكون 6 أحرف على الأقل';
  }

  return errors;
};
</file>

</repository_files>
